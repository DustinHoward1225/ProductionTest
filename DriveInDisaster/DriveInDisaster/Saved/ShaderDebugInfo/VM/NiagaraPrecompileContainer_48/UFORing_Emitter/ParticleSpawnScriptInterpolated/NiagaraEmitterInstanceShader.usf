#line 1 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 6 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#pragma warning(disable:4008)
#line 7 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Public/Platform.ush"
#line 9 "/Engine/Public/Platform.ush"
#line 1 "FP16Math.ush"
#line 10 "/Engine/Public/Platform.ush"
#line 43 "/Engine/Public/Platform.ush"
#line 1 "ShaderVersion.ush"
#line 44 "/Engine/Public/Platform.ush"
#line 595 "/Engine/Public/Platform.ush"
float min3( float a, float b, float c )
{
	return min( a, min( b, c ) );
}

float max3( float a, float b, float c )
{
	return max( a, max( b, c ) );
}

float2 min3( float2 a, float2 b, float2 c )
{
	return float2(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y )
	);
}

float2 max3( float2 a, float2 b, float2 c )
{
	return float2(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y )
	);
}

float3 max3( float3 a, float3 b, float3 c )
{
	return float3(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z )
	);
}

float3 min3( float3 a, float3 b, float3 c )
{
	return float3(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z )
	);
}

float4 min3( float4 a, float4 b, float4 c )
{
	return float4(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z ),
		min3( a.w, b.w, c.w )
	);
}

float4 max3( float4 a, float4 b, float4 c )
{
	return float4(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z ),
		max3( a.w, b.w, c.w )
	);
}




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }
#line 8 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"






	const static float PI = 3.1415926535897932f;

	const static float TWO_PI = 3.1415926535897932f*2.0f;
#line 18 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Private/Definitions.usf"
#line 19 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"


float4 ModuloPrecise(float4 x, float4 y){ return x - y * trunc(x/y); }
float3 ModuloPrecise(float3 x, float3 y){ return x - y * trunc(x/y); }
float2 ModuloPrecise(float2 x, float2 y){ return x - y * trunc(x/y);}
float ModuloPrecise(float x, float y){ return x - y * trunc(x/y); }
int ModuloPrecise(int x, int y){ return x - y * (x/y); }
int Modulo(int x, int y){ return x - y * (x/y); }



float4 Reciprocal(float4 x){ return 1.0f/x;}
float3 Reciprocal(float3 x){ return 1.0f/x; }
float2 Reciprocal(float2 x){ return 1.0f/x;}
float Reciprocal(float x){ return 1.0f/x; }



bool NiagaraAll(bool b) { return b; }
bool NiagaraAny(bool b) { return b; }









bool NiagaraAll(bool2 b) { return b.x && b.y; }
bool NiagaraAll(bool3 b) { return b.x && b.y && b.z; }
bool NiagaraAll(bool4 b) { return b.x && b.y && b.z && b.w; }
bool NiagaraAny(bool2 b) { return b.x || b.y; }
bool NiagaraAny(bool3 b) { return b.x || b.y || b.z; }
bool NiagaraAny(bool4 b) { return b.x || b.y || b.z || b.w; }
#line 193 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
float4 rand4(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int4 v = int4(Seed4, Seed1, Seed2, Seed3) * 1664525 + 1013904223;

	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;






	return float4((v >> 8) & 0x00ffffff) / 16777216.0;

}







float3 rand3(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int3 v = int3(Seed1, Seed2, Seed4 | (Seed3 << 16)) * 1664525 + 1013904223;

	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return float3((v >> 8) & 0x00ffffff) / 16777216.0;
}


static int RandomCounterDeterministic = 0;


float rand(float x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * x;
}


float2 rand(float2 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xy * x;
}


float3 rand(float3 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyz * x;
}


float4 rand(float4 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand4(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyzw * x;
}


int rand(int x, int Seed1, int Seed2, int Seed3)
{


	RandomCounterDeterministic += 1;
	return int(rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * (x+1));
}
#line 323 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float rand(float x);

	float2 rand(float2 x)
	{
		return float2(rand(x.x), rand(x.y));
	}

	float3 rand(float3 x)
	{
		return float3(rand(x.x), rand(x.y), rand(x.z));
	}

	float4 rand(float4 x)
	{
		return float4(rand(x.x), rand(x.y), rand(x.z), rand(x.w));
	}

	int rand(int x);



float rand_float(float x)
{
	return rand(x.x);
}

float2 rand_float(float2 x)
{
	return float2(rand_float(x.x), rand_float(x.y));
}

float3 rand_float(float3 x)
{
	return float3(rand_float(x.x), rand_float(x.y), rand_float(x.z));
}

float4 rand_float(float4 x)
{
	return float4(rand_float(x.x), rand_float(x.y), rand_float(x.z), rand_float(x.w));
}

int rand_int(int x)
{



	return rand_float(x.x);
}


float rand_float(float x, int Seed1, int Seed2, int Seed3)
{
	return rand(x.x, Seed1, Seed2, Seed3);
}

float2 rand_float(float2 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float3 rand_float(float3 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float4 rand_float(float4 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

int rand_int(int x, int Seed1, int Seed2, int Seed3)
{


	return rand(x.x-1, Seed1, Seed2, Seed3);
}
#line 405 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float noise(float x);
	float noise(float2 x);
	float noise(float3 x);



	float4 Modulo(float4 x, float4 y);
	float3 Modulo(float3 x, float3 y);
	float2 Modulo(float2 x, float2 y);
	float Modulo(float x, float y);


	int ExecIndex();



	int AcquireIndex(int DataSetID, bool DoAcquire);

	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag);
	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex);

	float InputDataFloat(int DataSetIndex, int RegisterIdx);
	int InputDataInt(int DataSetIndex, int RegisterIdx);
	bool InputDataBool(int DataSetIndex, int RegisterIdx);

	float InputDataNoadvanceFloat(int DataSetIndex, int RegisterIdx);
	int InputDataNoadvanceInt(int DataSetIndex, int RegisterIdx);
	bool InputDataNoadvanceBool(int DataSetIndex, int RegisterIdx);

	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);
	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value);
	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value);
#line 683 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int OutputIndex(const int DataSetID, const bool bStageKillsParticles, const bool bIsValid)
	{
#line 698 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
			return AcquireIndex(DataSetID, bIsValid);
	}
#line 702 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Generated/NiagaraEmitterInstance.ush"




struct NiagaraRandInfo
{
	int Seed1;
	int Seed2;
	int Seed3;
};

struct NiagaraID
{
	int Index;
	int AcquireTag;
};

cbuffer FNiagaraGlobalParameters
{
	float Engine_DeltaTime;
	float Engine_InverseDeltaTime;
	float Engine_Time;
	float Engine_RealTime;
}

cbuffer FNiagaraSystemParameters
{
	float Engine_Owner_TimeSinceRendered;
	float Engine_Owner_LODDistance;
	float Engine_Owner_LODDistanceFraction;
	float Engine_System_Age;
	int Engine_Owner_ExecutionState;
	int Engine_System_TickCount;
	int Engine_System_NumEmitters;
	int Engine_System_NumEmittersAlive;
}

cbuffer FNiagaraOwnerParameters
{
	float4x4 Engine_Owner_SystemLocalToWorld;
	float4x4 Engine_Owner_SystemWorldToLocal;
	float4x4 Engine_Owner_SystemLocalToWorldTransposed;
	float4x4 Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 Engine_Owner_SystemWorldToLocalNoScale;
	float4 Engine_Owner_Rotation;
	float4 Engine_Owner_Position;
	float4 Engine_Owner_Velocity;
	float4 Engine_Owner_SystemXAxis;
	float4 Engine_Owner_SystemYAxis;
	float4 Engine_Owner_SystemZAxis;
	float4 Engine_Owner_Scale;
}

cbuffer FNiagaraEmitterParameters
{
	int Engine_Emitter_NumParticles;
	int Engine_Emitter_TotalSpawnedParticles;
	float Engine_Emitter_SpawnCountScale;
	float Emitter_Age;
	int Emitter_RandomSeed;
	int Engine_Emitter_PaddingInt32_0;
	int Engine_Emitter_PaddingInt32_1;
	int Engine_Emitter_PaddingInt32_2;
}

cbuffer FNiagaraExternalParameters
{
	float2 Constants_Emitter_Vector2DFromCurve_ScaleCurve;
	float Constants_Emitter_InitializeParticle_Lifetime;
	float4 Constants_Emitter_InitializeParticle_Color;
	float Constants_Emitter_InitializeParticle_Mass;
	float Constants_Emitter_InitializeParticle_SpriteRotation;
	float3 Constants_Emitter_InitializeParticle_MeshScale;
	float3 Constants_Emitter_GravityForce_Gravity;
	float Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	float Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	int Constants_Emitter_CylinderLocation003_RandomSeed;
	float Constants_Emitter_CylinderLocation003_CylinderHeight;
	float Constants_Emitter_CylinderLocation003_CylinderRadius;
	float Constants_Emitter_CylinderLocation003_SurfaceOnlyBandThickness;
	float3 Constants_Emitter_CylinderLocation003_Offset;
	float3 Constants_Emitter_CylinderLocation003_NonUniformScale;
	int Constants_Emitter_CylinderLocation003_SpawnGroupMask;
	float2 Constants_Emitter_Vector2DFromCurve001_ScaleCurve;
	int Engine_ExecutionCount;
	float Emitter_SpawnRate;
	float Emitter_SpawnInterval;
	float Emitter_InterpSpawnStartDt;
	int Emitter_SpawnGroup;
}

cbuffer PREV_FNiagaraGlobalParameters
{
	float PREV_Engine_DeltaTime;
	float PREV_Engine_InverseDeltaTime;
	float PREV_Engine_Time;
	float PREV_Engine_RealTime;
}

cbuffer PREV_FNiagaraSystemParameters
{
	float PREV_Engine_Owner_TimeSinceRendered;
	float PREV_Engine_Owner_LODDistance;
	float PREV_Engine_Owner_LODDistanceFraction;
	float PREV_Engine_System_Age;
	int PREV_Engine_Owner_ExecutionState;
	int PREV_Engine_System_TickCount;
	int PREV_Engine_System_NumEmitters;
	int PREV_Engine_System_NumEmittersAlive;
}

cbuffer PREV_FNiagaraOwnerParameters
{
	float4x4 PREV_Engine_Owner_SystemLocalToWorld;
	float4x4 PREV_Engine_Owner_SystemWorldToLocal;
	float4x4 PREV_Engine_Owner_SystemLocalToWorldTransposed;
	float4x4 PREV_Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 PREV_Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 PREV_Engine_Owner_SystemWorldToLocalNoScale;
	float4 PREV_Engine_Owner_Rotation;
	float4 PREV_Engine_Owner_Position;
	float4 PREV_Engine_Owner_Velocity;
	float4 PREV_Engine_Owner_SystemXAxis;
	float4 PREV_Engine_Owner_SystemYAxis;
	float4 PREV_Engine_Owner_SystemZAxis;
	float4 PREV_Engine_Owner_Scale;
}

cbuffer PREV_FNiagaraEmitterParameters
{
	int PREV_Engine_Emitter_NumParticles;
	int PREV_Engine_Emitter_TotalSpawnedParticles;
	float PREV_Engine_Emitter_SpawnCountScale;
	float PREV_Emitter_Age;
	int PREV_Emitter_RandomSeed;
	int PREV_Engine_Emitter_PaddingInt32_0;
	int PREV_Engine_Emitter_PaddingInt32_1;
	int PREV_Engine_Emitter_PaddingInt32_2;
}

cbuffer PREV_FNiagaraExternalParameters
{
	float2 PREV_Constants_Emitter_Vector2DFromCurve_ScaleCurve;
	float PREV_Constants_Emitter_InitializeParticle_Lifetime;
	float4 PREV_Constants_Emitter_InitializeParticle_Color;
	float PREV_Constants_Emitter_InitializeParticle_Mass;
	float PREV_Constants_Emitter_InitializeParticle_SpriteRotation;
	float3 PREV_Constants_Emitter_InitializeParticle_MeshScale;
	float3 PREV_Constants_Emitter_GravityForce_Gravity;
	float PREV_Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	float PREV_Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	int PREV_Constants_Emitter_CylinderLocation003_RandomSeed;
	float PREV_Constants_Emitter_CylinderLocation003_CylinderHeight;
	float PREV_Constants_Emitter_CylinderLocation003_CylinderRadius;
	float PREV_Constants_Emitter_CylinderLocation003_SurfaceOnlyBandThickness;
	float3 PREV_Constants_Emitter_CylinderLocation003_Offset;
	float3 PREV_Constants_Emitter_CylinderLocation003_NonUniformScale;
	int PREV_Constants_Emitter_CylinderLocation003_SpawnGroupMask;
	float2 PREV_Constants_Emitter_Vector2DFromCurve001_ScaleCurve;
	int PREV_Engine_ExecutionCount;
	float PREV_Emitter_SpawnRate;
	float PREV_Emitter_SpawnInterval;
	float PREV_Emitter_InterpSpawnStartDt;
	int PREV_Emitter_SpawnGroup;
}

struct FParamMap0_Vector2DFromCurve001
{
	float CurveIndex;
	float2 ScaleCurve;
};

struct FParamMap0_Vector2DFromCurve
{
	float CurveIndex;
	float2 ScaleCurve;
};

struct FParamMap0_Transient
{
	float PhysicsDeltaTime;
	float PhysicsDrag;
	float3 PhysicsForce;
	float2 SpriteSizeScaleFactor;
};

struct FParamMap0_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float DeltaTime;
	float3 Force;
	float Mass;
	float3 Position;
	float3 PreviousVelocity;
	float SpeedLimit;
	float3 Velocity;
	bool WritetoIntrinsicProperties;
};

struct FParamMap0_ScaleSpriteSize
{
	float2 InitialSpriteSize;
	float2 ScaleFactor;
};

struct FParamMap0_ParticleState
{
	float DeltaTime;
	float Lifetime;
};

struct FParamMap0_Particles_Initial
{
	float2 SpriteSize;
};

struct FParamMap0_Particles
{
	float Age;
	float4 Color;
	FParamMap0_Particles_Initial Initial;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float NormalizedAge;
	float3 Position;
	float3 PreviousVelocity;
	float3 Scale;
	float SpriteRotation;
	float2 SpriteSize;
	int UniqueID;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity
{
	float IncomingPhysicsDrag;
	float3 IncomingPhysicsForce;
	float3 Position;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_ParticleState
{
	bool FirstFrame;
};

struct FParamMap0_OUTPUT_VAR_CylinderLocation003
{
	float3 CylinderNormal;
	float3 CylinderVector;
};

struct FParamMap0_OUTPUT_VAR
{
	FParamMap0_OUTPUT_VAR_CylinderLocation003 CylinderLocation003;
	FParamMap0_OUTPUT_VAR_ParticleState ParticleState;
	FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity SolveForcesAndVelocity;
};

struct FParamMap0_Local_SolveForcesAndVelocity
{
	float DeltaTime;
	float Mass;
	float3 PhysicsForce;
};

struct FParamMap0_Local_CylinderLocation003
{
	float CylinderHeight;
	float CylinderRadius;
	float3 CylinderVector;
	float EndcapRatio;
	float Endcaps;
	float RandomAngle;
	float3 RandomDirection;
	float RandomRadius;
	float RandomRatio;
	float RandomZ;
	bool SurfaceOnly;
	float SurfaceOnlyZAxis;
	bool UseEndcapsSurfaceOnly;
	float XAxis;
	float YAxis;
};

struct FParamMap0_Local
{
	FParamMap0_Local_CylinderLocation003 CylinderLocation003;
	FParamMap0_Local_SolveForcesAndVelocity SolveForcesAndVelocity;
};

struct FParamMap0_Interpolation
{
	float Emitter_InterpSpawnStartDt;
	int Emitter_SpawnGroup;
	float Emitter_SpawnInterval;
	int InterpSpawn_Index;
	float InterpSpawn_InvSpawnTime;
	float InterpSpawn_InvUpdateTime;
	float InterpSpawn_SpawnTime;
	float InterpSpawn_UpdateTime;
	float SpawnInterp;
};

struct FParamMap0_InitializeParticle
{
	float4 Color;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float3 MeshScale;
	float3 Position;
	float SpriteRotation;
	float2 SpriteSize;
	bool WriteColor;
	bool WriteLifetime;
	bool WriteMass;
	bool WriteMaterialRandom;
	bool WritePosition;
	bool WriteScale;
	bool WriteSpriteRotation;
	bool WriteSpriteSize;
};

struct FParamMap0_GravityForce
{
	float3 Gravity;
};

struct FParamMap0_Engine_System
{
	float Age;
	int NumEmitters;
	int NumEmittersAlive;
	int TickCount;
};

struct FParamMap0_Engine_Owner
{
	int ExecutionState;
	float LODDistance;
	float LODDistanceFraction;
	float3 Position;
	float4 Rotation;
	float3 Scale;
	float4x4 SystemLocalToWorld;
	float4x4 SystemLocalToWorldNoScale;
	float4x4 SystemLocalToWorldTransposed;
	float4x4 SystemWorldToLocal;
	float4x4 SystemWorldToLocalNoScale;
	float4x4 SystemWorldToLocalTransposed;
	float3 SystemXAxis;
	float3 SystemYAxis;
	float3 SystemZAxis;
	float TimeSinceRendered;
	float3 Velocity;
};

struct FParamMap0_Engine_Emitter
{
	int NumParticles;
	int PaddingInt32_0;
	int PaddingInt32_1;
	int PaddingInt32_2;
	float SpawnCountScale;
	int TotalSpawnedParticles;
};

struct FParamMap0_Engine
{
	float DeltaTime;
	FParamMap0_Engine_Emitter Emitter;
	int ExecutionCount;
	float InverseDeltaTime;
	FParamMap0_Engine_Owner Owner;
	float RealTime;
	FParamMap0_Engine_System System;
	float Time;
};

struct FParamMap0_Emitter
{
	float Age;
	float InterpSpawnStartDt;
	bool LocalSpace;
	int RandomSeed;
	int SpawnGroup;
	float SpawnInterval;
	float SpawnRate;
};

struct FParamMap0_DataInstance
{
	bool Alive;
};

struct FParamMap0_CylinderLocation003
{
	int CoordinateSpace;
	float CylinderHeight;
	float3 CylinderOrigin;
	float CylinderRadius;
	bool EnableLatheProfile;
	bool FixedRandomSeed;
	bool HemisphereX;
	bool HemisphereY;
	float3 NonUniformScale;
	float3 Offset;
	int OrientationAxis;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
	int SpawnGroupMask;
	bool SurfaceOnly;
	float SurfaceOnlyBandThickness;
	bool UseEndcapsInSurfaceOnlyMode;
};

struct FParamMap0_Constants_Emitter_Vector2DFromCurve001
{
	float2 ScaleCurve;
};

struct FParamMap0_Constants_Emitter_Vector2DFromCurve
{
	float2 ScaleCurve;
};

struct FParamMap0_Constants_Emitter_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float SpeedLimit;
};

struct FParamMap0_Constants_Emitter_InitializeParticle
{
	float4 Color;
	float Lifetime;
	float Mass;
	float3 MeshScale;
	float SpriteRotation;
};

struct FParamMap0_Constants_Emitter_GravityForce
{
	float3 Gravity;
};

struct FParamMap0_Constants_Emitter_CylinderLocation003
{
	float CylinderHeight;
	float CylinderRadius;
	float3 NonUniformScale;
	float3 Offset;
	int RandomSeed;
	int SpawnGroupMask;
	float SurfaceOnlyBandThickness;
};

struct FParamMap0_Constants_Emitter
{
	FParamMap0_Constants_Emitter_CylinderLocation003 CylinderLocation003;
	FParamMap0_Constants_Emitter_GravityForce GravityForce;
	FParamMap0_Constants_Emitter_InitializeParticle InitializeParticle;
	FParamMap0_Constants_Emitter_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Constants_Emitter_Vector2DFromCurve Vector2DFromCurve;
	FParamMap0_Constants_Emitter_Vector2DFromCurve001 Vector2DFromCurve001;
};

struct FParamMap0_Constants
{
	FParamMap0_Constants_Emitter Emitter;
};

struct FParamMap0
{
	FParamMap0_Constants Constants;
	FParamMap0_CylinderLocation003 CylinderLocation003;
	FParamMap0_DataInstance DataInstance;
	FParamMap0_Emitter Emitter;
	FParamMap0_Engine Engine;
	FParamMap0_GravityForce GravityForce;
	FParamMap0_InitializeParticle InitializeParticle;
	FParamMap0_Interpolation Interpolation;
	FParamMap0_Local Local;
	FParamMap0_OUTPUT_VAR OUTPUT_VAR;
	FParamMap0_Particles Particles;
	FParamMap0_ParticleState ParticleState;
	FParamMap0_ScaleSpriteSize ScaleSpriteSize;
	FParamMap0_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Transient Transient;
	FParamMap0_Vector2DFromCurve Vector2DFromCurve;
	FParamMap0_Vector2DFromCurve001 Vector2DFromCurve001;
};

struct FSimulationContext
{
	FParamMap0 MapSpawn;
	FParamMap0 MapUpdate;
};

static float HackSpawnInterp = 1.0;
void ParticleOwnerPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context);
void SampleVector2DCurve_EmitterSpriteSizeVector2Curve(float In_X, out float2 Out_Value);
void Vector2DFromCurve_Emitter_Func_(out float2 Out_Value, inout FSimulationContext Context);
void InitializeParticle_SimulationPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context);
void GetRandomInfo_Emitter_Determinism_false_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context);
void InitializeParticle_Emitter_Func_(inout FSimulationContext Context);
void ParticleState_Emitter_Func_(inout FSimulationContext Context);
void GravityForce_Emitter_Func_(inout FSimulationContext Context);
void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context);
void RandomRangeFloat_Func_(float2 In_Min, float2 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float2 Out_Result, inout FSimulationContext Context);
void RandomUnitVector_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float3 Out_UnitVector3D, out float2 Out_UnitVector2D, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float4 In_Min, float4 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float4 Out_Result, inout FSimulationContext Context);
void SampleCurve_EmitterLatheProfile003(float In_X, out float Out_Value);
void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context);
void CylinderLocation003_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void DirectionAndLengthSafe_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, float In_FallbackLength, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context);
void RandomUnitVector_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float3 Out_UnitVector3D, out float2 Out_UnitVector2D, inout FSimulationContext Context);
void RandomVector_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float3 Out_Vector, inout FSimulationContext Context);
void CylinderLocation003_Emitter_Func_(inout FSimulationContext Context);
void SampleVector2DCurve_EmitterScaleFactorVector2Curve(float In_X, out float2 Out_Value);
void Vector2DFromCurve001_Emitter_Func_(out float2 Out_Value, inout FSimulationContext Context);
void ScaleSpriteSize_Emitter_Func_(inout FSimulationContext Context);
float GetSpawnInterpolation();
void ParticleOwnerPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant14 = false;
	float3 Constant15 = float3(0,0,0);
	float3 Vector_IfResult;
	if(Constant14)
	{
	Vector_IfResult = Constant15;
	}
	else
	{
	Vector_IfResult = Context.MapSpawn.Engine.Owner.Position;
	}
	Out_OutPosition = Vector_IfResult;
}

void Vector2DFromCurve_Emitter_Func_(out float2 Out_Value, inout FSimulationContext Context)
{
	float2 SampleVector2DCurve_EmitterSpriteSizeVector2CurveOutput_Value;
	SampleVector2DCurve_EmitterSpriteSizeVector2Curve(Context.MapSpawn.Vector2DFromCurve.CurveIndex, SampleVector2DCurve_EmitterSpriteSizeVector2CurveOutput_Value);
	float2 Result = SampleVector2DCurve_EmitterSpriteSizeVector2CurveOutput_Value * Context.MapSpawn.Constants.Emitter.Vector2DFromCurve.ScaleCurve;
	Out_Value = Result;
}

void InitializeParticle_SimulationPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant20 = false;
	float3 Constant21 = float3(0,0,0);
	float3 Vector_IfResult1;
	if(Constant20)
	{
	Vector_IfResult1 = Constant21;
	}
	else
	{
	Vector_IfResult1 = Context.MapSpawn.Engine.Owner.Position;
	}
	Out_OutPosition = Vector_IfResult1;
}

void GetRandomInfo_Emitter_Determinism_false_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context)
{
	bool Constant33 = false;
	int Constant34 = 0;
	bool Result1 = NiagaraAll(In_RandomnessMode == Constant34);
	bool Result2 = Constant33 && Result1;
	int Constant35 = 1;
	bool Result3 = NiagaraAll(In_RandomnessMode == Constant35);
	bool Result4 = Result2 || Result3;
	int Seed_IfResult;
	if(In_OverrideSeed)
	{
	Seed_IfResult = In_Seed;
	}
	else
	{
	Seed_IfResult = Context.MapSpawn.Emitter.RandomSeed;
	}
	int Constant36 = 0;
	int Constant37 = 0;
	int Seed1_IfResult;
	int Seed2_IfResult;
	int Seed3_IfResult;
	if(In_FixedOverrideSeed)
	{
	Seed1_IfResult = Seed_IfResult;
	Seed2_IfResult = Constant36;
	Seed3_IfResult = Constant37;
	}
	else
	{
	Seed1_IfResult = Context.MapSpawn.Particles.UniqueID;
	Seed2_IfResult = Context.MapSpawn.Engine.System.TickCount;
	Seed3_IfResult = Seed_IfResult;
	}
	int Constant38 = -1;
	int Constant39 = -1;
	int Constant40 = -1;
	int Seed1_IfResult1;
	int Seed2_IfResult1;
	int Seed3_IfResult1;
	if(Result4)
	{
	Seed1_IfResult1 = Seed1_IfResult;
	Seed2_IfResult1 = Seed2_IfResult;
	Seed3_IfResult1 = Seed3_IfResult;
	}
	else
	{
	Seed1_IfResult1 = Constant38;
	Seed2_IfResult1 = Constant39;
	Seed3_IfResult1 = Constant40;
	}
	NiagaraRandInfo Output1;
	Output1.Seed1 = Seed1_IfResult1;
	Output1.Seed2 = Seed2_IfResult1;
	Output1.Seed3 = Seed3_IfResult1;
	Out_RandomInfo = Output1;
	Out_UseDeterministicRandoms = Result4;
}

void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context)
{
	int Constant28 = (0);
	bool Constant29 = false;
	int Constant30 = 0;
	int Constant31 = (0);
	bool Constant32 = false;
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo;
	bool GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms;
	GetRandomInfo_Emitter_Determinism_false_Func_(In_Seed, Constant28, In_OverrideSeed, Constant30, Constant31, Constant32, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo, GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms, Context);
	float Result5 = In_Max - In_Min;
	int Seed1;
	int Seed2;
	int Seed3;
	Seed1 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo.Seed1;
	Seed2 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo.Seed2;
	Seed3 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo.Seed3;
	float Result6 = rand_float(Result5, Seed1, Seed2, Seed3);
	float Result7 = rand_float(Result5);
	float Random_IfResult;
	if(GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms)
	{
	Random_IfResult = Result6;
	}
	else
	{
	Random_IfResult = Result7;
	}
	float Result8 = In_Min + Random_IfResult;
	Out_Result = Result8;
}

void InitializeParticle_Emitter_Func_(inout FSimulationContext Context)
{
	float Lifetime_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteLifetime)
	{
	Lifetime_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.Lifetime;
	}
	else
	{
	Lifetime_IfResult = Context.MapSpawn.Particles.Lifetime;
	}
	Context.MapSpawn.Particles.Lifetime = Lifetime_IfResult;
	float4 Color_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteColor)
	{
	Color_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.Color;
	}
	else
	{
	Color_IfResult = Context.MapSpawn.Particles.Color;
	}
	Context.MapSpawn.Particles.Color = Color_IfResult;
	float Mass_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteMass)
	{
	Mass_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.Mass;
	}
	else
	{
	Mass_IfResult = Context.MapSpawn.Particles.Mass;
	}
	Context.MapSpawn.Particles.Mass = Mass_IfResult;
	float2 SpriteSize_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteSpriteSize)
	{
	SpriteSize_IfResult = Context.MapSpawn.InitializeParticle.SpriteSize;
	}
	else
	{
	SpriteSize_IfResult = Context.MapSpawn.Particles.SpriteSize;
	}
	Context.MapSpawn.Particles.SpriteSize = SpriteSize_IfResult;
	float SpriteRotation_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteSpriteRotation)
	{
	SpriteRotation_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.SpriteRotation;
	}
	else
	{
	SpriteRotation_IfResult = Context.MapSpawn.Particles.SpriteRotation;
	}
	Context.MapSpawn.Particles.SpriteRotation = SpriteRotation_IfResult;
	float3 Scale_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteScale)
	{
	Scale_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.MeshScale;
	}
	else
	{
	Scale_IfResult = Context.MapSpawn.Particles.Scale;
	}
	Context.MapSpawn.Particles.Scale = Scale_IfResult;
	float3 Scale_IfResult1;
	if(Context.MapSpawn.InitializeParticle.WritePosition)
	{
	Scale_IfResult1 = Context.MapSpawn.InitializeParticle.Position;
	}
	else
	{
	Scale_IfResult1 = Context.MapSpawn.Particles.Position;
	}
	Context.MapSpawn.Particles.Position = Scale_IfResult1;
	float MaterialRandom_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteMaterialRandom)
	{
	MaterialRandom_IfResult = Context.MapSpawn.InitializeParticle.MaterialRandom;
	}
	else
	{
	MaterialRandom_IfResult = Context.MapSpawn.Particles.MaterialRandom;
	}
	Context.MapSpawn.Particles.MaterialRandom = MaterialRandom_IfResult;
}

void ParticleState_Emitter_Func_(inout FSimulationContext Context)
{
	bool Result9 = NiagaraAll(Context.MapUpdate.Particles.Age <= Context.MapUpdate.Engine.DeltaTime);
	Context.MapUpdate.OUTPUT_VAR.ParticleState.FirstFrame = Result9;
	float Result10 = Context.MapUpdate.Particles.Age + Context.MapUpdate.ParticleState.DeltaTime;
	float Constant42 = 1e-05;
	float Result11 = max(Context.MapUpdate.ParticleState.Lifetime, Constant42);
	float Constant43 = 0.0001;
	float Result12 = Result11 - Constant43;
	bool Result13 = NiagaraAll(Result10 < Result12);
	bool Constant44 = false;
	bool bool_IfResult;
	if(Result13)
	{
	bool_IfResult = Context.MapUpdate.DataInstance.Alive;
	}
	else
	{
	bool_IfResult = Constant44;
	}
	float Result14 = Result10 / Result11;
	Context.MapUpdate.DataInstance.Alive = bool_IfResult;
	Context.MapUpdate.Particles.Age = Result10;
	Context.MapUpdate.Particles.NormalizedAge = Result14;
}

void GravityForce_Emitter_Func_(inout FSimulationContext Context)
{
	float3 Result15 = Context.MapUpdate.Constants.Emitter.GravityForce.Gravity * Context.MapUpdate.Particles.Mass;
	float3 Result16 = Context.MapUpdate.Transient.PhysicsForce + Result15;
	Context.MapUpdate.Transient.PhysicsForce = Result16;
}

void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context)
{
	Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime = Context.MapUpdate.SolveForcesAndVelocity.DeltaTime;
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Context.MapUpdate.SolveForcesAndVelocity.Force;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsForce = Context.MapUpdate.SolveForcesAndVelocity.Force;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.SolveForcesAndVelocity.Velocity;
	Context.MapUpdate.Local.SolveForcesAndVelocity.Mass = Context.MapUpdate.SolveForcesAndVelocity.Mass;
	float Constant54 = 0.0001;
	float Result17 = max(Context.MapUpdate.Local.SolveForcesAndVelocity.Mass, Constant54);
	float Result18 = Reciprocal(Result17);
	float3 Result19 = Result18 * Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce;
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Result19;
	float3 Result20 = Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce * Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime + Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float Constant55 = 0;
	float Result21 = max(Context.MapUpdate.Transient.PhysicsDrag, Constant55);
	float Result22 = Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime * Result21;
	float Constant56 = 1;
	float Result23 = Result22 + Constant56;
	float3 Result24 = Result20 / Result23;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Result24;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsDrag = Context.MapUpdate.Transient.PhysicsDrag;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float3 Result25 = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity * Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime + Context.MapUpdate.SolveForcesAndVelocity.Position;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position = Result25;
	float3 Position_IfResult;
	float3 Velocity_IfResult;
	float3 PreviousVelocity_IfResult;
	if(Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	Position_IfResult = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position;
	Velocity_IfResult = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	PreviousVelocity_IfResult = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	}
	else
	{
	Position_IfResult = Context.MapUpdate.SolveForcesAndVelocity.Position;
	Velocity_IfResult = Context.MapUpdate.SolveForcesAndVelocity.Velocity;
	PreviousVelocity_IfResult = Context.MapUpdate.SolveForcesAndVelocity.PreviousVelocity;
	}
	Context.MapUpdate.Particles.Position = Position_IfResult;
	Context.MapUpdate.Particles.Velocity = Velocity_IfResult;
	Context.MapUpdate.Particles.PreviousVelocity = PreviousVelocity_IfResult;
	float3 Constant57 = float3(0,0,0);
	float Constant58 = 0;
	float3 ForceVector_IfResult;
	float Drag_IfResult;
	if(Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	ForceVector_IfResult = Constant57;
	Drag_IfResult = Constant58;
	}
	else
	{
	ForceVector_IfResult = Context.MapUpdate.Transient.PhysicsForce;
	Drag_IfResult = Context.MapUpdate.Transient.PhysicsDrag;
	}
	Context.MapUpdate.Transient.PhysicsForce = ForceVector_IfResult;
	Context.MapUpdate.Transient.PhysicsDrag = Drag_IfResult;
}

void RandomRangeFloat_Func_(float2 In_Min, float2 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float2 Out_Result, inout FSimulationContext Context)
{
	int Constant89 = (0);
	bool Constant90 = false;
	int Constant91 = 0;
	int Constant92 = (0);
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1;
	bool GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms1;
	GetRandomInfo_Emitter_Determinism_false_Func_(In_Seed, Constant89, In_OverrideSeed, Constant91, Constant92, In_FixedOverrideSeed, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1, GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms1, Context);
	float2 Result26 = In_Max - In_Min;
	int Seed11;
	int Seed21;
	int Seed31;
	Seed11 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1.Seed1;
	Seed21 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1.Seed2;
	Seed31 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1.Seed3;
	float2 Result27 = rand_float(Result26, Seed11, Seed21, Seed31);
	float2 Result28 = rand_float(Result26);
	float2 Random_IfResult1;
	if(GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms1)
	{
	Random_IfResult1 = Result27;
	}
	else
	{
	Random_IfResult1 = Result28;
	}
	float2 Result29 = In_Min + Random_IfResult1;
	Out_Result = Result29;
}

void RandomUnitVector_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float3 Out_UnitVector3D, out float2 Out_UnitVector2D, inout FSimulationContext Context)
{
	float2 Constant87 = float2(0,-1);
	float2 Constant88 = float2(6.28319,1);
	float2 RandomRangeFloat_Func_Output_Result1;
	RandomRangeFloat_Func_(Constant87, Constant88, In_Seed, In_RandomnessMode, In_OverrideSeed, In_FixedOverrideSeed, RandomRangeFloat_Func_Output_Result1, Context);
	float Phi;
	float CosASC40ThetaASC41;
	Phi = RandomRangeFloat_Func_Output_Result1.x;
	CosASC40ThetaASC41 = RandomRangeFloat_Func_Output_Result1.y;
	float Result30 = cos(Phi);
	float Result31 = CosASC40ThetaASC41 * CosASC40ThetaASC41;
	float Result32 = 1 - Result31;
	float Result33 = sqrt(Result32);
	float Result34 = Result30 * Result33;
	float Result35 = sin(Phi);
	float Result36 = Result35 * Result33;
	float3 PositionOnSphere;
	PositionOnSphere.x = Result34;
	PositionOnSphere.y = Result36;
	PositionOnSphere.z = CosASC40ThetaASC41;
	float Constant93 = 0;
	float Constant94 = 6.28319;
	int Constant95 = -1;
	int Constant96 = 0;
	bool Constant97 = false;
	float RandomRangeFloat_Func_Output_Result2;
	RandomRangeFloat_Func_(Constant93, Constant94, Constant95, Constant96, Constant97, RandomRangeFloat_Func_Output_Result2, Context);
	float Result37 = cos(RandomRangeFloat_Func_Output_Result2);
	float Result38 = sin(RandomRangeFloat_Func_Output_Result2);
	float2 PositionOnCircle;
	PositionOnCircle.x = Result37;
	PositionOnCircle.y = Result38;
	Out_UnitVector3D = PositionOnSphere;
	Out_UnitVector2D = PositionOnCircle;
}

void RandomRangeFloat_Func_(float4 In_Min, float4 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float4 Out_Result, inout FSimulationContext Context)
{
	int Constant101 = (0);
	bool Constant102 = false;
	int Constant103 = 0;
	int Constant104 = (0);
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2;
	bool GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms2;
	GetRandomInfo_Emitter_Determinism_false_Func_(In_Seed, Constant101, In_OverrideSeed, Constant103, Constant104, In_FixedOverrideSeed, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2, GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms2, Context);
	float4 Result39 = In_Max - In_Min;
	int Seed12;
	int Seed22;
	int Seed32;
	Seed12 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2.Seed1;
	Seed22 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2.Seed2;
	Seed32 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2.Seed3;
	float4 Result40 = rand_float(Result39, Seed12, Seed22, Seed32);
	float4 Result41 = rand_float(Result39);
	float4 Random_IfResult2;
	if(GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms2)
	{
	Random_IfResult2 = Result40;
	}
	else
	{
	Random_IfResult2 = Result41;
	}
	float4 Result42 = In_Min + Random_IfResult2;
	Out_Result = Result42;
}

void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context)
{
	int Constant123 = 0;
	bool Result69 = NiagaraAll(In_SourceSpace == Constant123);
	int Constant124 = 0;
	bool Result70 = NiagaraAll(In_DestinationSpace == Constant124);
	bool Result71 = Result69 && Result70;
	int Constant125 = 1;
	bool Result72 = NiagaraAll(In_SourceSpace == Constant125);
	int Constant126 = 1;
	bool Result73 = NiagaraAll(In_DestinationSpace == Constant126);
	bool Result74 = Result72 && Result73;
	bool Result75 = Result71 || Result74;
	int Constant127 = 2;
	bool Result76 = NiagaraAll(In_SourceSpace == Constant127);
	int Constant128 = 2;
	bool Result77 = NiagaraAll(In_DestinationSpace == Constant128);
	bool Result78 = Result76 && Result77;
	bool Result79 = Result75 || Result78;
	bool Result80 = Result69 && Result77;
	bool Result81 = Result76 && Result70;
	bool Result82 = Result80 || Result81;
	bool Result83 = In_bLocalSpace && Result82;
	bool Result84 = Result79 || Result83;
	bool Result85 = !In_bLocalSpace;
	bool Result86 = Result69 && Result73;
	bool Result87 = Result72 && Result70;
	bool Result88 = Result86 || Result87;
	bool Result89 = Result85 && Result88;
	bool Result90 = Result84 || Result89;
	bool Result91 = In_bLocalSpace && Result86;
	bool Result92 = Result76 && Result73;
	bool Result93 = Result91 || Result92;
	bool Result94 = Result85 && Result81;
	bool Result95 = Result93 || Result94;
	float4x4 Matrix_IfResult1;
	if(Result95)
	{
	Matrix_IfResult1 = In_LocalToWorldTransform;
	}
	else
	{
	Matrix_IfResult1 = In_WorldToLocalTransform;
	}
	Out_bUseOriginal = Result90;
	Out_OutTransform = Matrix_IfResult1;
}

void CylinderLocation003_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant122 = false;
	float4x4 Matrix_IfResult;
	float4x4 Matrix001_IfResult;
	if(In_ApplyScale)
	{
	Matrix_IfResult = Context.MapUpdate.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult = Context.MapUpdate.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult = Context.MapUpdate.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult = Context.MapUpdate.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal;
	float4x4 TransformBase_Func_Output_OutTransform;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult, Matrix001_IfResult, Constant122, TransformBase_Func_Output_bUseOriginal, TransformBase_Func_Output_OutTransform, Context);
	float3 Result96 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform).xyz;
	float3 Vector_IfResult8;
	if(TransformBase_Func_Output_bUseOriginal)
	{
	Vector_IfResult8 = In_InVector;
	}
	else
	{
	Vector_IfResult8 = Result96;
	}
	Out_OutVector = Vector_IfResult8;
}

void DirectionAndLengthSafe_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, float In_FallbackLength, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context)
{
	float Result98 = length(In_V);
	bool Result99 = NiagaraAll(Result98 < In_Threshold);
	float Result100 = length(In_Fallback);
	float3 Vector_IfResult9;
	float float_IfResult3;
	if(Result99)
	{
	Vector_IfResult9 = In_Fallback;
	float_IfResult3 = In_FallbackLength;
	}
	else
	{
	Vector_IfResult9 = In_V;
	float_IfResult3 = Result98;
	}
	float3 Result101 = Vector_IfResult9 / float_IfResult3;
	float3 Vector_IfResult10;
	float float_IfResult4;
	if(Result99)
	{
	Vector_IfResult10 = In_Fallback;
	float_IfResult4 = Result100;
	}
	else
	{
	Vector_IfResult10 = Result101;
	float_IfResult4 = float_IfResult3;
	}
	Out_Direction = Vector_IfResult10;
	Out_Length = float_IfResult4;
	Out_BelowThreshold = Result99;
}

void RandomUnitVector_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float3 Out_UnitVector3D, out float2 Out_UnitVector2D, inout FSimulationContext Context)
{
	float2 Constant137 = float2(0,-1);
	float2 Constant138 = float2(6.28319,1);
	bool Constant139 = false;
	float2 RandomRangeFloat_Func_Output_Result4;
	RandomRangeFloat_Func_(Constant137, Constant138, In_Seed, In_RandomnessMode, In_OverrideSeed, Constant139, RandomRangeFloat_Func_Output_Result4, Context);
	float Phi1;
	float CosASC40ThetaASC411;
	Phi1 = RandomRangeFloat_Func_Output_Result4.x;
	CosASC40ThetaASC411 = RandomRangeFloat_Func_Output_Result4.y;
	float Result107 = cos(Phi1);
	float Result108 = CosASC40ThetaASC411 * CosASC40ThetaASC411;
	float Result109 = 1 - Result108;
	float Result110 = sqrt(Result109);
	float Result111 = Result107 * Result110;
	float Result112 = sin(Phi1);
	float Result113 = Result112 * Result110;
	float3 PositionOnSphere1;
	PositionOnSphere1.x = Result111;
	PositionOnSphere1.y = Result113;
	PositionOnSphere1.z = CosASC40ThetaASC411;
	float Constant140 = 0;
	float Constant141 = 6.28319;
	int Constant142 = -1;
	int Constant143 = 0;
	bool Constant144 = false;
	float RandomRangeFloat_Func_Output_Result5;
	RandomRangeFloat_Func_(Constant140, Constant141, Constant142, Constant143, Constant144, RandomRangeFloat_Func_Output_Result5, Context);
	float Result114 = cos(RandomRangeFloat_Func_Output_Result5);
	float Result115 = sin(RandomRangeFloat_Func_Output_Result5);
	float2 PositionOnCircle1;
	PositionOnCircle1.x = Result114;
	PositionOnCircle1.y = Result115;
	Out_UnitVector3D = PositionOnSphere1;
	Out_UnitVector2D = PositionOnCircle1;
}

void RandomVector_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float3 Out_Vector, inout FSimulationContext Context)
{
	float3 RandomUnitVector_Func_Output_UnitVector3D1;
	float2 RandomUnitVector_Func_Output_UnitVector2D1;
	RandomUnitVector_Func_(In_Seed, In_RandomnessMode, In_OverrideSeed, RandomUnitVector_Func_Output_UnitVector3D1, RandomUnitVector_Func_Output_UnitVector2D1, Context);
	Out_Vector = RandomUnitVector_Func_Output_UnitVector3D1;
}

void CylinderLocation003_Emitter_Func_(inout FSimulationContext Context)
{
	int Constant85 = 0;
	bool Constant86 = false;
	int Mode_IfResult;
	bool Override_IfResult;
	if(Context.MapUpdate.CylinderLocation003.OverrideRandomness)
	{
	Mode_IfResult = Context.MapUpdate.CylinderLocation003.RandomnessMode;
	Override_IfResult = Context.MapUpdate.CylinderLocation003.OverrideSeed;
	}
	else
	{
	Mode_IfResult = Constant85;
	Override_IfResult = Constant86;
	}
	float3 RandomUnitVector_Func_Output_UnitVector3D;
	float2 RandomUnitVector_Func_Output_UnitVector2D;
	RandomUnitVector_Func_(Context.MapUpdate.Constants.Emitter.CylinderLocation003.RandomSeed, Mode_IfResult, Override_IfResult, Context.MapUpdate.CylinderLocation003.FixedRandomSeed, RandomUnitVector_Func_Output_UnitVector3D, RandomUnitVector_Func_Output_UnitVector2D, Context);
	float3 Constant98 = float3(0,0,1);
	float3 Rand_IfResult;
	if(Context.MapUpdate.CylinderLocation003.SurfaceOnly)
	{
	Rand_IfResult = RandomUnitVector_Func_Output_UnitVector3D;
	}
	else
	{
	Rand_IfResult = Constant98;
	}
	float4 Constant99 = float4(0,0,-1,0);
	float4 Constant100 = float4(1,1,1,1);
	float4 RandomRangeFloat_Func_Output_Result3;
	RandomRangeFloat_Func_(Constant99, Constant100, Context.MapUpdate.Constants.Emitter.CylinderLocation003.RandomSeed, Mode_IfResult, Override_IfResult, Context.MapUpdate.CylinderLocation003.FixedRandomSeed, RandomRangeFloat_Func_Output_Result3, Context);
	float X;
	float Y;
	float Z;
	float W;
	X = RandomRangeFloat_Func_Output_Result3.x;
	Y = RandomRangeFloat_Func_Output_Result3.y;
	Z = RandomRangeFloat_Func_Output_Result3.z;
	W = RandomRangeFloat_Func_Output_Result3.w;
	Context.MapUpdate.Local.CylinderLocation003.RandomDirection = Rand_IfResult;
	Context.MapUpdate.Local.CylinderLocation003.RandomRatio = X;
	Context.MapUpdate.Local.CylinderLocation003.RandomAngle = Y;
	Context.MapUpdate.Local.CylinderLocation003.RandomZ = Z;
	Context.MapUpdate.Local.CylinderLocation003.RandomRadius = W;
	Context.MapUpdate.Local.CylinderLocation003.SurfaceOnly = Context.MapUpdate.CylinderLocation003.SurfaceOnly;
	Context.MapUpdate.Local.CylinderLocation003.UseEndcapsSurfaceOnly = Context.MapUpdate.CylinderLocation003.UseEndcapsInSurfaceOnlyMode;
	Context.MapUpdate.Local.CylinderLocation003.CylinderHeight = Context.MapUpdate.Constants.Emitter.CylinderLocation003.CylinderHeight;
	Context.MapUpdate.Local.CylinderLocation003.CylinderRadius = Context.MapUpdate.Constants.Emitter.CylinderLocation003.CylinderRadius;
	float Result43 = round(Context.MapUpdate.Local.CylinderLocation003.RandomRatio);
	float Constant105 = 0;
	float Constant106 = 1;
	float Result44 = clamp(Result43,Constant105,Constant106);
	Context.MapUpdate.Local.CylinderLocation003.EndcapRatio = Result44;
	float Constant107 = 1;
	float Result45 = sin(Context.MapUpdate.Local.CylinderLocation003.RandomAngle*(TWO_PI/Constant107));
	float Result46 = abs(Result45);
	float float_IfResult;
	if(Context.MapUpdate.CylinderLocation003.HemisphereX)
	{
	float_IfResult = Result46;
	}
	else
	{
	float_IfResult = Result45;
	}
	float Constant108 = 1;
	float Result47 = cos(Context.MapUpdate.Local.CylinderLocation003.RandomAngle*(TWO_PI/Constant108));
	float Result48 = abs(Result47);
	float float_IfResult1;
	if(Context.MapUpdate.CylinderLocation003.HemisphereY)
	{
	float_IfResult1 = Result48;
	}
	else
	{
	float_IfResult1 = Result47;
	}
	Context.MapUpdate.Local.CylinderLocation003.XAxis = float_IfResult;
	Context.MapUpdate.Local.CylinderLocation003.YAxis = float_IfResult1;
	float Constant109 = 0.0001;
	float Constant110 = 1;
	float Result49 = clamp(Context.MapUpdate.Local.CylinderLocation003.RandomZ,Constant109,Constant110);
	float Result50 = ceil(Result49);
	float Result51 = sign(Context.MapUpdate.Local.CylinderLocation003.RandomZ);
	float Result52 = Result50 * Result51;
	float Result53 = lerp(Context.MapUpdate.Local.CylinderLocation003.RandomZ,Result52,Context.MapUpdate.Local.CylinderLocation003.EndcapRatio);
	float Endcaps_IfResult;
	if(Context.MapUpdate.Local.CylinderLocation003.UseEndcapsSurfaceOnly)
	{
	Endcaps_IfResult = Result53;
	}
	else
	{
	Endcaps_IfResult = Context.MapUpdate.Local.CylinderLocation003.RandomZ;
	}
	float SurfaceOnlyZ_IfResult;
	if(Context.MapUpdate.Local.CylinderLocation003.SurfaceOnly)
	{
	SurfaceOnlyZ_IfResult = Endcaps_IfResult;
	}
	else
	{
	SurfaceOnlyZ_IfResult = Context.MapUpdate.Local.CylinderLocation003.RandomZ;
	}
	Context.MapUpdate.Local.CylinderLocation003.SurfaceOnlyZAxis = SurfaceOnlyZ_IfResult;
	Context.MapUpdate.Local.CylinderLocation003.Endcaps = Endcaps_IfResult;
	float3 Output11;
	Output11.x = Context.MapUpdate.Local.CylinderLocation003.XAxis;
	Output11.y = Context.MapUpdate.Local.CylinderLocation003.YAxis;
	Output11.z = Context.MapUpdate.Local.CylinderLocation003.SurfaceOnlyZAxis;
	float Result54 = abs(Context.MapUpdate.Local.CylinderLocation003.Endcaps);
	float Constant111 = 1;
	bool Result55 = NiagaraAll(Result54 == Constant111);
	float Result56 = sqrt(Context.MapUpdate.Local.CylinderLocation003.RandomRadius);
	float Constant112 = 1;
	float3 Output0;
	Output0.x = Result56;
	Output0.y = Result56;
	Output0.z = Constant112;
	float3 Constant113 = float3(1,1,1);
	float3 Vector_IfResult2;
	if(Result55)
	{
	Vector_IfResult2 = Output0;
	}
	else
	{
	Vector_IfResult2 = Constant113;
	}
	float3 Vector_IfResult3;
	if(Context.MapUpdate.Local.CylinderLocation003.SurfaceOnly)
	{
	Vector_IfResult3 = Vector_IfResult2;
	}
	else
	{
	Vector_IfResult3 = Output0;
	}
	float3 Result57 = Output11 * Vector_IfResult3;
	Context.MapUpdate.Local.CylinderLocation003.CylinderVector = Result57;
	float Constant114 = 0.5;
	float Constant115 = 0.5;
	float Result58 = Context.MapUpdate.Local.CylinderLocation003.SurfaceOnlyZAxis * Constant114 + Constant115;
	float SampleCurve_EmitterLatheProfile003Output_Value;
	SampleCurve_EmitterLatheProfile003(Result58, SampleCurve_EmitterLatheProfile003Output_Value);
	float Result59 = SampleCurve_EmitterLatheProfile003Output_Value * Context.MapUpdate.Local.CylinderLocation003.CylinderRadius;
	float float_IfResult2;
	if(Context.MapUpdate.CylinderLocation003.EnableLatheProfile)
	{
	float_IfResult2 = Result59;
	}
	else
	{
	float_IfResult2 = Context.MapUpdate.Local.CylinderLocation003.CylinderRadius;
	}
	float3 Output12;
	Output12.x = float_IfResult2;
	Output12.y = float_IfResult2;
	Output12.z = Context.MapUpdate.Local.CylinderLocation003.CylinderHeight;
	float3 Result60 = Output12 * Context.MapUpdate.Local.CylinderLocation003.CylinderVector;
	Context.MapUpdate.Local.CylinderLocation003.CylinderVector = Result60;
	float3 Constant116 = float3(1,1,1);
	float3 Constant117 = float3(1,1,0);
	float3 Vector_IfResult4;
	if(Context.MapUpdate.Local.CylinderLocation003.UseEndcapsSurfaceOnly)
	{
	Vector_IfResult4 = Constant116;
	}
	else
	{
	Vector_IfResult4 = Constant117;
	}
	float3 Result61 = Context.MapUpdate.Local.CylinderLocation003.RandomDirection * Vector_IfResult4;
	float3 Result62 = Context.MapUpdate.Constants.Emitter.CylinderLocation003.SurfaceOnlyBandThickness * Result61;
	float3 Result63 = Context.MapUpdate.Local.CylinderLocation003.CylinderVector + Result62;
	float3 Vector_IfResult5;
	if(Context.MapUpdate.Local.CylinderLocation003.SurfaceOnly)
	{
	Vector_IfResult5 = Result63;
	}
	else
	{
	Vector_IfResult5 = Context.MapUpdate.Local.CylinderLocation003.CylinderVector;
	}
	Context.MapUpdate.Local.CylinderLocation003.CylinderVector = Vector_IfResult5;
	int Constant118 = 0;
	bool Result64 = NiagaraAll(Context.MapUpdate.CylinderLocation003.OrientationAxis == Constant118);
	int Constant119 = 1;
	bool Result65 = NiagaraAll(Context.MapUpdate.CylinderLocation003.OrientationAxis == Constant119);
	bool Result66 = Result64 || Result65;
	float3 Output01;
	Output01.x = Context.MapUpdate.Local.CylinderLocation003.CylinderVector.z;
	Output01.y = Context.MapUpdate.Local.CylinderLocation003.CylinderVector.x;
	Output01.z = Context.MapUpdate.Local.CylinderLocation003.CylinderVector.y;
	float3 Output02;
	Output02.z = Context.MapUpdate.Local.CylinderLocation003.CylinderVector.y;
	Output02.y = Context.MapUpdate.Local.CylinderLocation003.CylinderVector.z;
	Output02.x = Context.MapUpdate.Local.CylinderLocation003.CylinderVector.x;
	float3 Vector_IfResult6;
	if(Result64)
	{
	Vector_IfResult6 = Output01;
	}
	else
	{
	Vector_IfResult6 = Output02;
	}
	float3 Vector_IfResult7;
	if(Result66)
	{
	Vector_IfResult7 = Vector_IfResult6;
	}
	else
	{
	Vector_IfResult7 = Context.MapUpdate.Local.CylinderLocation003.CylinderVector;
	}
	Context.MapUpdate.Local.CylinderLocation003.CylinderVector = Vector_IfResult7;
	float3 Result67 = Context.MapUpdate.CylinderLocation003.CylinderOrigin + Context.MapUpdate.Constants.Emitter.CylinderLocation003.Offset;
	float3 Result68 = Context.MapUpdate.Local.CylinderLocation003.CylinderVector * Context.MapUpdate.Constants.Emitter.CylinderLocation003.NonUniformScale;
	int Constant120 = 0;
	bool Constant121 = true;
	float3 CylinderLocation003_NF_TransformVector_Emitter_Func_Output_OutVector;
	CylinderLocation003_NF_TransformVector_Emitter_Func_(Result68, Context.MapUpdate.CylinderLocation003.CoordinateSpace, Constant120, Constant121, CylinderLocation003_NF_TransformVector_Emitter_Func_Output_OutVector, Context);
	float3 Result97 = Result67 + CylinderLocation003_NF_TransformVector_Emitter_Func_Output_OutVector;
	float3 Constant129 = float3(1,1,0);
	float3 Constant130 = float3(0,0,1);
	float Constant131 = 1e-05;
	float Constant132 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction;
	float DirectionAndLengthSafe_Func_Output_Length;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold;
	DirectionAndLengthSafe_Func_(Context.MapUpdate.Local.CylinderLocation003.CylinderVector, Constant130, Constant131, Constant132, DirectionAndLengthSafe_Func_Output_Direction, DirectionAndLengthSafe_Func_Output_Length, DirectionAndLengthSafe_Func_Output_BelowThreshold, Context);
	float3 Result102 = Constant129 * DirectionAndLengthSafe_Func_Output_Direction;
	float3 Result103 = Result102 * DirectionAndLengthSafe_Func_Output_Length;
	float3 Constant133 = float3(0,0,1);
	float3 Result104 = DirectionAndLengthSafe_Func_Output_Direction * Constant133;
	float3 Result105 = DirectionAndLengthSafe_Func_Output_Length * Result104;
	float3 Result106 = lerp(Result103,Result105,Context.MapUpdate.Local.CylinderLocation003.EndcapRatio);
	int Constant134 = -1;
	int Constant135 = 0;
	bool Constant136 = false;
	float3 RandomVector_Func_Output_Vector;
	RandomVector_Func_(Constant134, Constant135, Constant136, RandomVector_Func_Output_Vector, Context);
	float3 Vector_IfResult11;
	if(Context.MapUpdate.Local.CylinderLocation003.SurfaceOnly)
	{
	Vector_IfResult11 = Result106;
	}
	else
	{
	Vector_IfResult11 = RandomVector_Func_Output_Vector;
	}
	float3 Constant145 = float3(0,0,1);
	float Constant146 = 1e-05;
	float Constant147 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction1;
	float DirectionAndLengthSafe_Func_Output_Length1;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold1;
	DirectionAndLengthSafe_Func_(Vector_IfResult11, Constant145, Constant146, Constant147, DirectionAndLengthSafe_Func_Output_Direction1, DirectionAndLengthSafe_Func_Output_Length1, DirectionAndLengthSafe_Func_Output_BelowThreshold1, Context);
	Context.MapUpdate.Particles.Position = Result97;
	Context.MapUpdate.OUTPUT_VAR.CylinderLocation003.CylinderVector = Result97;
	Context.MapUpdate.OUTPUT_VAR.CylinderLocation003.CylinderNormal = DirectionAndLengthSafe_Func_Output_Direction1;
}

void Vector2DFromCurve001_Emitter_Func_(out float2 Out_Value, inout FSimulationContext Context)
{
	float2 SampleVector2DCurve_EmitterScaleFactorVector2CurveOutput_Value;
	SampleVector2DCurve_EmitterScaleFactorVector2Curve(Context.MapUpdate.Vector2DFromCurve001.CurveIndex, SampleVector2DCurve_EmitterScaleFactorVector2CurveOutput_Value);
	float2 Result116 = SampleVector2DCurve_EmitterScaleFactorVector2CurveOutput_Value * Context.MapUpdate.Constants.Emitter.Vector2DFromCurve001.ScaleCurve;
	Out_Value = Result116;
}

void ScaleSpriteSize_Emitter_Func_(inout FSimulationContext Context)
{
	float2 Result117 = Context.MapUpdate.ScaleSpriteSize.ScaleFactor * Context.MapUpdate.Transient.SpriteSizeScaleFactor;
	float2 Result118 = Context.MapUpdate.ScaleSpriteSize.InitialSpriteSize * Result117;
	Context.MapUpdate.Particles.SpriteSize = Result118;
	Context.MapUpdate.Transient.SpriteSizeScaleFactor = Result117;
}

float GetSpawnInterpolation()
{
	return HackSpawnInterp;
}


void InterpolateParameters(inout FSimulationContext Context)
{
	int InterpSpawn_Index = ExecIndex();
	float InterpSpawn_SpawnTime = Emitter_InterpSpawnStartDt + (Emitter_SpawnInterval * InterpSpawn_Index);
	float InterpSpawn_UpdateTime = Engine_DeltaTime - InterpSpawn_SpawnTime;
	float InterpSpawn_InvSpawnTime = 1.0 / InterpSpawn_SpawnTime;
	float InterpSpawn_InvUpdateTime = 1.0 / InterpSpawn_UpdateTime;
	float SpawnInterp = InterpSpawn_SpawnTime * Engine_InverseDeltaTime ;
	HackSpawnInterp = SpawnInterp;
	Context.MapSpawn.Interpolation.InterpSpawn_Index = InterpSpawn_Index;
	Context.MapSpawn.Interpolation.InterpSpawn_SpawnTime = InterpSpawn_SpawnTime;
	Context.MapSpawn.Interpolation.InterpSpawn_UpdateTime = InterpSpawn_UpdateTime;
	Context.MapSpawn.Interpolation.InterpSpawn_InvSpawnTime = InterpSpawn_InvSpawnTime;
	Context.MapSpawn.Interpolation.InterpSpawn_InvUpdateTime = InterpSpawn_InvUpdateTime;
	Context.MapSpawn.Interpolation.SpawnInterp = SpawnInterp;
	Context.MapSpawn.Interpolation.Emitter_SpawnInterval = Emitter_SpawnInterval;
	Context.MapSpawn.Interpolation.Emitter_InterpSpawnStartDt = Emitter_InterpSpawnStartDt;
	Context.MapSpawn.Interpolation.Emitter_SpawnGroup = Emitter_SpawnGroup;
	Context.MapSpawn.Engine.Time = lerp(PREV_Engine_Time, Engine_Time, SpawnInterp);
	Context.MapSpawn.Engine.RealTime = lerp(PREV_Engine_RealTime, Engine_RealTime, SpawnInterp);
	Context.MapSpawn.Engine.Owner.TimeSinceRendered = lerp(PREV_Engine_Owner_TimeSinceRendered, Engine_Owner_TimeSinceRendered, SpawnInterp);
	Context.MapSpawn.Engine.Owner.LODDistance = lerp(PREV_Engine_Owner_LODDistance, Engine_Owner_LODDistance, SpawnInterp);
	Context.MapSpawn.Engine.Owner.LODDistanceFraction = lerp(PREV_Engine_Owner_LODDistanceFraction, Engine_Owner_LODDistanceFraction, SpawnInterp);
	Context.MapSpawn.Engine.System.Age = lerp(PREV_Engine_System_Age, Engine_System_Age, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Rotation = lerp(PREV_Engine_Owner_Rotation, Engine_Owner_Rotation, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Position = lerp(PREV_Engine_Owner_Position.xyz, Engine_Owner_Position.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Velocity = lerp(PREV_Engine_Owner_Velocity.xyz, Engine_Owner_Velocity.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemXAxis = lerp(PREV_Engine_Owner_SystemXAxis.xyz, Engine_Owner_SystemXAxis.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemYAxis = lerp(PREV_Engine_Owner_SystemYAxis.xyz, Engine_Owner_SystemYAxis.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemZAxis = lerp(PREV_Engine_Owner_SystemZAxis.xyz, Engine_Owner_SystemZAxis.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Scale = lerp(PREV_Engine_Owner_Scale.xyz, Engine_Owner_Scale.xyz, SpawnInterp);
	Context.MapSpawn.Emitter.Age = lerp(PREV_Emitter_Age, Emitter_Age, SpawnInterp);
	Context.MapSpawn.Engine.DeltaTime = 0.0f;
	Context.MapSpawn.Engine.InverseDeltaTime = 0.0f;
	Context.MapUpdate.Engine.DeltaTime = InterpSpawn_UpdateTime;
	Context.MapUpdate.Engine.InverseDeltaTime = InterpSpawn_InvUpdateTime;
}

void ReadDataSets(inout FSimulationContext Context)
{
}

void WriteDataSets(inout FSimulationContext Context)
{
}

void SimulateMapSpawn(inout FSimulationContext Context)
{


	float Constant = 0;
	Context.MapSpawn.Particles.NormalizedAge = Constant;
	float Constant1 = 1;
	Context.MapSpawn.Particles.Lifetime = Constant1;
	float4 Constant2 = float4(1,1,1,1);
	Context.MapSpawn.Particles.Color = Constant2;
	float Constant3 = 1;
	Context.MapSpawn.Particles.Mass = Constant3;
	float2 Constant4 = float2(10,10);
	Context.MapSpawn.Particles.SpriteSize = Constant4;
	float Constant5 = 0;
	Context.MapSpawn.Particles.SpriteRotation = Constant5;
	float3 Constant6 = float3(1,1,1);
	Context.MapSpawn.Particles.Scale = Constant6;
	float Constant7 = 0;
	Context.MapSpawn.Particles.MaterialRandom = Constant7;
	float Constant8 = 0;
	Context.MapSpawn.Particles.Age = Constant8;
	float3 Constant9 = float3(0,0,0);
	Context.MapSpawn.Particles.Velocity = Constant9;

	bool Constant10 = true;
	bool Constant11 = true;
	bool Constant12 = true;
	bool Constant13 = false;
	float3 ParticleOwnerPosition_Emitter_Func_Output_OutPosition;
	ParticleOwnerPosition_Emitter_Func_(ParticleOwnerPosition_Emitter_Func_Output_OutPosition, Context);
	bool Constant16 = true;
	bool Constant17 = false;
	Context.MapSpawn.Vector2DFromCurve.CurveIndex = Context.MapSpawn.Particles.NormalizedAge;
	float2 Vector2DFromCurve_Emitter_Func_Output_Value;
	Vector2DFromCurve_Emitter_Func_(Vector2DFromCurve_Emitter_Func_Output_Value, Context);
	Context.MapSpawn.InitializeParticle.WriteSpriteSize = Constant10;
	Context.MapSpawn.InitializeParticle.WriteColor = Constant11;
	Context.MapSpawn.InitializeParticle.WritePosition = Constant12;
	Context.MapSpawn.InitializeParticle.Position = ParticleOwnerPosition_Emitter_Func_Output_OutPosition;
	Context.MapSpawn.InitializeParticle.WriteMass = Constant16;
	Context.MapSpawn.InitializeParticle.WriteSpriteRotation = Constant17;
	Context.MapSpawn.InitializeParticle.SpriteSize = Vector2DFromCurve_Emitter_Func_Output_Value;
	bool Constant18 = true;
	Context.MapSpawn.InitializeParticle.WriteLifetime = Constant18;
	bool Constant19 = false;
	Context.MapSpawn.InitializeParticle.WriteScale = Constant19;
	float3 InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition;
	InitializeParticle_SimulationPosition_Emitter_Func_(InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition, Context);
	Context.MapSpawn.Particles.Position = InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition;
	bool Constant22 = true;
	Context.MapSpawn.InitializeParticle.WriteMaterialRandom = Constant22;
	float Constant23 = 0;
	float Constant24 = 1;
	int Constant25 = -1;
	int Constant26 = 0;
	bool Constant27 = false;
	float RandomRangeFloat_Func_Output_Result;
	RandomRangeFloat_Func_(Constant23, Constant24, Constant25, Constant26, Constant27, RandomRangeFloat_Func_Output_Result, Context);
	Context.MapSpawn.InitializeParticle.MaterialRandom = RandomRangeFloat_Func_Output_Result;
	EnterStatScope(1 );
	InitializeParticle_Emitter_Func_(Context);
	ExitStatScope( );




	Context.MapSpawn.Particles.PreviousVelocity = Context.MapSpawn.Particles.Velocity;
	Context.MapSpawn.Particles.Initial.SpriteSize = Context.MapSpawn.Particles.SpriteSize;




}
void SimulateMapUpdate(inout FSimulationContext Context)
{

	bool Constant41 = true;
	Context.MapUpdate.DataInstance.Alive = Constant41;
	Context.MapUpdate.ParticleState.DeltaTime = Context.MapUpdate.Engine.DeltaTime;
	Context.MapUpdate.ParticleState.Lifetime = Context.MapUpdate.Particles.Lifetime;
	EnterStatScope(2 );
	ParticleState_Emitter_Func_(Context);
	ExitStatScope( );
	float3 Constant45 = float3(0,0,0);
	Context.MapUpdate.Transient.PhysicsForce = Constant45;
	EnterStatScope(3 );
	GravityForce_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapUpdate.Transient.PhysicsDeltaTime = Context.MapUpdate.Engine.DeltaTime;
	Context.MapUpdate.SolveForcesAndVelocity.DeltaTime = Context.MapUpdate.Transient.PhysicsDeltaTime;
	float Constant46 = (0.0);
	Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime = Constant46;
	Context.MapUpdate.SolveForcesAndVelocity.Force = Context.MapUpdate.Transient.PhysicsForce;
	Context.MapUpdate.SolveForcesAndVelocity.Velocity = Context.MapUpdate.Particles.Velocity;
	Context.MapUpdate.SolveForcesAndVelocity.Mass = Context.MapUpdate.Particles.Mass;
	float3 Constant47 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Constant47;
	float3 Constant48 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Constant48;
	float Constant49 = (0.0);
	Context.MapUpdate.Local.SolveForcesAndVelocity.Mass = Constant49;
	float Constant50 = 0;
	Context.MapUpdate.Transient.PhysicsDrag = Constant50;
	Context.MapUpdate.SolveForcesAndVelocity.PreviousVelocity = Context.MapUpdate.Particles.PreviousVelocity;
	bool Constant51 = false;
	Context.MapUpdate.SolveForcesAndVelocity.Position = Context.MapUpdate.Particles.Position;
	float3 Constant52 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position = Constant52;
	bool Constant53 = true;
	Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties = Constant53;
	EnterStatScope(4 );
	SolveForcesAndVelocity_Emitter_Func_(Context);
	ExitStatScope( );
	bool Constant59 = false;
	bool Constant60 = false;
	Context.MapUpdate.CylinderLocation003.SurfaceOnly = Constant59;
	Context.MapUpdate.CylinderLocation003.EnableLatheProfile = Constant60;
	bool Constant61 = false;
	Context.MapUpdate.CylinderLocation003.OverrideSeed = Constant61;
	bool Constant62 = false;
	Context.MapUpdate.CylinderLocation003.OverrideRandomness = Constant62;
	int Constant63 = 0;
	Context.MapUpdate.CylinderLocation003.RandomnessMode = Constant63;
	bool Constant64 = false;
	Context.MapUpdate.CylinderLocation003.FixedRandomSeed = Constant64;
	float3 Constant65 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.CylinderLocation003.RandomDirection = Constant65;
	float Constant66 = (0.0);
	Context.MapUpdate.Local.CylinderLocation003.RandomRatio = Constant66;
	float Constant67 = (0.0);
	Context.MapUpdate.Local.CylinderLocation003.RandomAngle = Constant67;
	float Constant68 = (0.0);
	Context.MapUpdate.Local.CylinderLocation003.RandomZ = Constant68;
	float Constant69 = (0.0);
	Context.MapUpdate.Local.CylinderLocation003.RandomRadius = Constant69;
	bool Constant70 = true;
	Context.MapUpdate.CylinderLocation003.UseEndcapsInSurfaceOnlyMode = Constant70;
	bool Constant71 = (false);
	Context.MapUpdate.Local.CylinderLocation003.SurfaceOnly = Constant71;
	bool Constant72 = (false);
	Context.MapUpdate.Local.CylinderLocation003.UseEndcapsSurfaceOnly = Constant72;
	float Constant73 = (0.0);
	Context.MapUpdate.Local.CylinderLocation003.CylinderHeight = Constant73;
	float Constant74 = (0.0);
	Context.MapUpdate.Local.CylinderLocation003.CylinderRadius = Constant74;
	float Constant75 = (0.0);
	Context.MapUpdate.Local.CylinderLocation003.EndcapRatio = Constant75;
	bool Constant76 = false;
	Context.MapUpdate.CylinderLocation003.HemisphereX = Constant76;
	bool Constant77 = false;
	Context.MapUpdate.CylinderLocation003.HemisphereY = Constant77;
	float Constant78 = (0.0);
	Context.MapUpdate.Local.CylinderLocation003.XAxis = Constant78;
	float Constant79 = (0.0);
	Context.MapUpdate.Local.CylinderLocation003.YAxis = Constant79;
	float Constant80 = (0.0);
	Context.MapUpdate.Local.CylinderLocation003.SurfaceOnlyZAxis = Constant80;
	float Constant81 = (0.0);
	Context.MapUpdate.Local.CylinderLocation003.Endcaps = Constant81;
	float3 Constant82 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.CylinderLocation003.CylinderVector = Constant82;
	int Constant83 = 2;
	Context.MapUpdate.CylinderLocation003.OrientationAxis = Constant83;
	Context.MapUpdate.CylinderLocation003.CylinderOrigin = Context.MapUpdate.Particles.Position;
	int Constant84 = 2;
	Context.MapUpdate.CylinderLocation003.CoordinateSpace = Constant84;
	EnterStatScope(5 );
	CylinderLocation003_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapUpdate.Vector2DFromCurve001.CurveIndex = Context.MapUpdate.Particles.NormalizedAge;
	float2 Vector2DFromCurve001_Emitter_Func_Output_Value;
	Vector2DFromCurve001_Emitter_Func_(Vector2DFromCurve001_Emitter_Func_Output_Value, Context);
	Context.MapUpdate.ScaleSpriteSize.ScaleFactor = Vector2DFromCurve001_Emitter_Func_Output_Value;
	Context.MapUpdate.ScaleSpriteSize.InitialSpriteSize = Context.MapUpdate.Particles.Initial.SpriteSize;
	float2 Constant148 = float2(1,1);
	Context.MapUpdate.Transient.SpriteSizeScaleFactor = Constant148;
	EnterStatScope(6 );
	ScaleSpriteSize_Emitter_Func_(Context);
	ExitStatScope( );



}
void SimulateMain()
{
EnterStatScope(7 );

	FSimulationContext Context = (FSimulationContext)0;
	Context.MapSpawn.Particles.Age = 0.0f;
	Context.MapSpawn.Particles.Color.r = 0.0f;
	Context.MapSpawn.Particles.Color.g = 0.0f;
	Context.MapSpawn.Particles.Color.b = 0.0f;
	Context.MapSpawn.Particles.Color.a = 0.0f;
	Context.MapSpawn.Particles.Initial.SpriteSize.x = 0.0f;
	Context.MapSpawn.Particles.Initial.SpriteSize.y = 0.0f;
	Context.MapSpawn.Particles.Lifetime = 0.0f;
	Context.MapSpawn.Particles.Mass = 0.0f;
	Context.MapSpawn.Particles.MaterialRandom = 0.0f;
	Context.MapSpawn.Particles.NormalizedAge = 0.0f;
	Context.MapSpawn.Particles.Position.x = 0.0f;
	Context.MapSpawn.Particles.Position.y = 0.0f;
	Context.MapSpawn.Particles.Position.z = 0.0f;
	Context.MapSpawn.Particles.PreviousVelocity.x = 0.0f;
	Context.MapSpawn.Particles.PreviousVelocity.y = 0.0f;
	Context.MapSpawn.Particles.PreviousVelocity.z = 0.0f;
	Context.MapSpawn.Particles.Scale.x = 0.0f;
	Context.MapSpawn.Particles.Scale.y = 0.0f;
	Context.MapSpawn.Particles.Scale.z = 0.0f;
	Context.MapSpawn.Particles.SpriteRotation = 0.0f;
	Context.MapSpawn.Particles.SpriteSize.x = 0.0f;
	Context.MapSpawn.Particles.SpriteSize.y = 0.0f;
	Context.MapSpawn.Particles.UniqueID = 0;
	Context.MapSpawn.Particles.Velocity.x = 0.0f;
	Context.MapSpawn.Particles.Velocity.y = 0.0f;
	Context.MapSpawn.Particles.Velocity.z = 0.0f;
	Context.MapSpawn.Particles.UniqueID = Engine_Emitter_TotalSpawnedParticles + ExecIndex();
	Context.MapSpawn.Engine.Owner.Position = Engine_Owner_Position.xyz;
	Context.MapSpawn.Constants.Emitter.Vector2DFromCurve.ScaleCurve = Constants_Emitter_Vector2DFromCurve_ScaleCurve;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.Lifetime = Constants_Emitter_InitializeParticle_Lifetime;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.Color = Constants_Emitter_InitializeParticle_Color;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.Mass = Constants_Emitter_InitializeParticle_Mass;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.SpriteRotation = Constants_Emitter_InitializeParticle_SpriteRotation;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.MeshScale = Constants_Emitter_InitializeParticle_MeshScale;
	Context.MapSpawn.Emitter.RandomSeed = Emitter_RandomSeed;
	Context.MapSpawn.Engine.System.TickCount = Engine_System_TickCount;
	Context.MapUpdate.Engine.DeltaTime = Engine_DeltaTime;
	Context.MapUpdate.Constants.Emitter.GravityForce.Gravity = Constants_Emitter_GravityForce_Gravity;
	Context.MapUpdate.Constants.Emitter.SolveForcesAndVelocity.SpeedLimit = Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	Context.MapUpdate.Constants.Emitter.SolveForcesAndVelocity.AccelerationLimit = Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	Context.MapUpdate.Engine.Owner.Position = Engine_Owner_Position.xyz;
	Context.MapUpdate.Constants.Emitter.CylinderLocation003.RandomSeed = Constants_Emitter_CylinderLocation003_RandomSeed;
	Context.MapUpdate.Constants.Emitter.CylinderLocation003.CylinderHeight = Constants_Emitter_CylinderLocation003_CylinderHeight;
	Context.MapUpdate.Constants.Emitter.CylinderLocation003.CylinderRadius = Constants_Emitter_CylinderLocation003_CylinderRadius;
	Context.MapUpdate.Constants.Emitter.CylinderLocation003.SurfaceOnlyBandThickness = Constants_Emitter_CylinderLocation003_SurfaceOnlyBandThickness;
	Context.MapUpdate.Constants.Emitter.CylinderLocation003.Offset = Constants_Emitter_CylinderLocation003_Offset;
	Context.MapUpdate.Constants.Emitter.CylinderLocation003.NonUniformScale = Constants_Emitter_CylinderLocation003_NonUniformScale;
	Context.MapUpdate.Constants.Emitter.CylinderLocation003.SpawnGroupMask = Constants_Emitter_CylinderLocation003_SpawnGroupMask;
	Context.MapUpdate.Engine.Owner.SystemLocalToWorld = Engine_Owner_SystemLocalToWorld;
	Context.MapUpdate.Engine.Owner.SystemWorldToLocal = Engine_Owner_SystemWorldToLocal;
	Context.MapUpdate.Engine.Owner.SystemLocalToWorldNoScale = Engine_Owner_SystemLocalToWorldNoScale;
	Context.MapUpdate.Engine.Owner.SystemWorldToLocalNoScale = Engine_Owner_SystemWorldToLocalNoScale;
	Context.MapUpdate.Constants.Emitter.Vector2DFromCurve001.ScaleCurve = Constants_Emitter_Vector2DFromCurve001_ScaleCurve;
	Context.MapUpdate.Engine.Time = Engine_Time;
	Context.MapUpdate.Engine.InverseDeltaTime = Engine_InverseDeltaTime;
	Context.MapUpdate.Engine.ExecutionCount = Engine_ExecutionCount;
	Context.MapUpdate.Emitter.SpawnRate = Emitter_SpawnRate;
	Context.MapUpdate.Emitter.SpawnInterval = Emitter_SpawnInterval;
	Context.MapUpdate.Emitter.InterpSpawnStartDt = Emitter_InterpSpawnStartDt;
	Context.MapUpdate.Emitter.SpawnGroup = Emitter_SpawnGroup;
	Context.MapUpdate.Engine.Emitter.TotalSpawnedParticles = Engine_Emitter_TotalSpawnedParticles;
	Context.MapUpdate.Emitter.RandomSeed = Emitter_RandomSeed;
	ReadDataSets(Context);
	InterpolateParameters(Context);
	SimulateMapSpawn(Context);

	Context.MapUpdate.Particles = Context.MapSpawn.Particles;


	SimulateMapUpdate(Context);
	WriteDataSets(Context);
	{
	bool bValid = Context.MapUpdate.DataInstance.Alive;
	int TmpWriteIndex = OutputIndex(0, true, bValid);
	OutputDataFloat(0, 0, TmpWriteIndex, Context.MapUpdate.Particles.Age);
	OutputDataFloat(0, 1, TmpWriteIndex, Context.MapUpdate.Particles.Color.r);
	OutputDataFloat(0, 2, TmpWriteIndex, Context.MapUpdate.Particles.Color.g);
	OutputDataFloat(0, 3, TmpWriteIndex, Context.MapUpdate.Particles.Color.b);
	OutputDataFloat(0, 4, TmpWriteIndex, Context.MapUpdate.Particles.Color.a);
	OutputDataFloat(0, 5, TmpWriteIndex, Context.MapUpdate.Particles.Initial.SpriteSize.x);
	OutputDataFloat(0, 6, TmpWriteIndex, Context.MapUpdate.Particles.Initial.SpriteSize.y);
	OutputDataFloat(0, 7, TmpWriteIndex, Context.MapUpdate.Particles.Lifetime);
	OutputDataFloat(0, 8, TmpWriteIndex, Context.MapUpdate.Particles.Mass);
	OutputDataFloat(0, 9, TmpWriteIndex, Context.MapUpdate.Particles.MaterialRandom);
	OutputDataFloat(0, 10, TmpWriteIndex, Context.MapUpdate.Particles.NormalizedAge);
	OutputDataFloat(0, 11, TmpWriteIndex, Context.MapUpdate.Particles.Position.x);
	OutputDataFloat(0, 12, TmpWriteIndex, Context.MapUpdate.Particles.Position.y);
	OutputDataFloat(0, 13, TmpWriteIndex, Context.MapUpdate.Particles.Position.z);
	OutputDataFloat(0, 14, TmpWriteIndex, Context.MapUpdate.Particles.PreviousVelocity.x);
	OutputDataFloat(0, 15, TmpWriteIndex, Context.MapUpdate.Particles.PreviousVelocity.y);
	OutputDataFloat(0, 16, TmpWriteIndex, Context.MapUpdate.Particles.PreviousVelocity.z);
	OutputDataFloat(0, 17, TmpWriteIndex, Context.MapUpdate.Particles.Scale.x);
	OutputDataFloat(0, 18, TmpWriteIndex, Context.MapUpdate.Particles.Scale.y);
	OutputDataFloat(0, 19, TmpWriteIndex, Context.MapUpdate.Particles.Scale.z);
	OutputDataFloat(0, 20, TmpWriteIndex, Context.MapUpdate.Particles.SpriteRotation);
	OutputDataFloat(0, 21, TmpWriteIndex, Context.MapUpdate.Particles.SpriteSize.x);
	OutputDataFloat(0, 22, TmpWriteIndex, Context.MapUpdate.Particles.SpriteSize.y);
	OutputDataInt(0, 23, TmpWriteIndex, Context.MapUpdate.Particles.UniqueID);
	OutputDataFloat(0, 24, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.x);
	OutputDataFloat(0, 25, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.y);
	OutputDataFloat(0, 26, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.z);
	}
ExitStatScope( );
}
#line 703 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"

#if 0 /*BEGIN_RESOURCE_TABLES*/
NULL, 0
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
