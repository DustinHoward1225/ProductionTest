#line 1 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 6 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#pragma warning(disable:4008)
#line 7 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Public/Platform.ush"
#line 9 "/Engine/Public/Platform.ush"
#line 1 "FP16Math.ush"
#line 10 "/Engine/Public/Platform.ush"
#line 43 "/Engine/Public/Platform.ush"
#line 1 "ShaderVersion.ush"
#line 44 "/Engine/Public/Platform.ush"
#line 595 "/Engine/Public/Platform.ush"
float min3( float a, float b, float c )
{
	return min( a, min( b, c ) );
}

float max3( float a, float b, float c )
{
	return max( a, max( b, c ) );
}

float2 min3( float2 a, float2 b, float2 c )
{
	return float2(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y )
	);
}

float2 max3( float2 a, float2 b, float2 c )
{
	return float2(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y )
	);
}

float3 max3( float3 a, float3 b, float3 c )
{
	return float3(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z )
	);
}

float3 min3( float3 a, float3 b, float3 c )
{
	return float3(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z )
	);
}

float4 min3( float4 a, float4 b, float4 c )
{
	return float4(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z ),
		min3( a.w, b.w, c.w )
	);
}

float4 max3( float4 a, float4 b, float4 c )
{
	return float4(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z ),
		max3( a.w, b.w, c.w )
	);
}




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }
#line 8 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"






	const static float PI = 3.1415926535897932f;

	const static float TWO_PI = 3.1415926535897932f*2.0f;
#line 18 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Private/Definitions.usf"
#line 19 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"


float4 ModuloPrecise(float4 x, float4 y){ return x - y * trunc(x/y); }
float3 ModuloPrecise(float3 x, float3 y){ return x - y * trunc(x/y); }
float2 ModuloPrecise(float2 x, float2 y){ return x - y * trunc(x/y);}
float ModuloPrecise(float x, float y){ return x - y * trunc(x/y); }
int ModuloPrecise(int x, int y){ return x - y * (x/y); }
int Modulo(int x, int y){ return x - y * (x/y); }



float4 Reciprocal(float4 x){ return 1.0f/x;}
float3 Reciprocal(float3 x){ return 1.0f/x; }
float2 Reciprocal(float2 x){ return 1.0f/x;}
float Reciprocal(float x){ return 1.0f/x; }



bool NiagaraAll(bool b) { return b; }
bool NiagaraAny(bool b) { return b; }









bool NiagaraAll(bool2 b) { return b.x && b.y; }
bool NiagaraAll(bool3 b) { return b.x && b.y && b.z; }
bool NiagaraAll(bool4 b) { return b.x && b.y && b.z && b.w; }
bool NiagaraAny(bool2 b) { return b.x || b.y; }
bool NiagaraAny(bool3 b) { return b.x || b.y || b.z; }
bool NiagaraAny(bool4 b) { return b.x || b.y || b.z || b.w; }
#line 193 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
float4 rand4(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int4 v = int4(Seed4, Seed1, Seed2, Seed3) * 1664525 + 1013904223;

	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;






	return float4((v >> 8) & 0x00ffffff) / 16777216.0;

}







float3 rand3(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int3 v = int3(Seed1, Seed2, Seed4 | (Seed3 << 16)) * 1664525 + 1013904223;

	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return float3((v >> 8) & 0x00ffffff) / 16777216.0;
}


static int RandomCounterDeterministic = 0;


float rand(float x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * x;
}


float2 rand(float2 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xy * x;
}


float3 rand(float3 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyz * x;
}


float4 rand(float4 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand4(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyzw * x;
}


int rand(int x, int Seed1, int Seed2, int Seed3)
{


	RandomCounterDeterministic += 1;
	return int(rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * (x+1));
}
#line 323 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float rand(float x);

	float2 rand(float2 x)
	{
		return float2(rand(x.x), rand(x.y));
	}

	float3 rand(float3 x)
	{
		return float3(rand(x.x), rand(x.y), rand(x.z));
	}

	float4 rand(float4 x)
	{
		return float4(rand(x.x), rand(x.y), rand(x.z), rand(x.w));
	}

	int rand(int x);



float rand_float(float x)
{
	return rand(x.x);
}

float2 rand_float(float2 x)
{
	return float2(rand_float(x.x), rand_float(x.y));
}

float3 rand_float(float3 x)
{
	return float3(rand_float(x.x), rand_float(x.y), rand_float(x.z));
}

float4 rand_float(float4 x)
{
	return float4(rand_float(x.x), rand_float(x.y), rand_float(x.z), rand_float(x.w));
}

int rand_int(int x)
{



	return rand_float(x.x);
}


float rand_float(float x, int Seed1, int Seed2, int Seed3)
{
	return rand(x.x, Seed1, Seed2, Seed3);
}

float2 rand_float(float2 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float3 rand_float(float3 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float4 rand_float(float4 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

int rand_int(int x, int Seed1, int Seed2, int Seed3)
{


	return rand(x.x-1, Seed1, Seed2, Seed3);
}
#line 405 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float noise(float x);
	float noise(float2 x);
	float noise(float3 x);



	float4 Modulo(float4 x, float4 y);
	float3 Modulo(float3 x, float3 y);
	float2 Modulo(float2 x, float2 y);
	float Modulo(float x, float y);


	int ExecIndex();



	int AcquireIndex(int DataSetID, bool DoAcquire);

	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag);
	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex);

	float InputDataFloat(int DataSetIndex, int RegisterIdx);
	int InputDataInt(int DataSetIndex, int RegisterIdx);
	bool InputDataBool(int DataSetIndex, int RegisterIdx);

	float InputDataNoadvanceFloat(int DataSetIndex, int RegisterIdx);
	int InputDataNoadvanceInt(int DataSetIndex, int RegisterIdx);
	bool InputDataNoadvanceBool(int DataSetIndex, int RegisterIdx);

	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);
	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value);
	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value);
#line 683 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int OutputIndex(const int DataSetID, const bool bStageKillsParticles, const bool bIsValid)
	{
#line 698 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
			return AcquireIndex(DataSetID, bIsValid);
	}
#line 702 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Generated/NiagaraEmitterInstance.ush"




struct NiagaraID
{
	int Index;
	int AcquireTag;
};

struct NiagaraRandInfo
{
	int Seed1;
	int Seed2;
	int Seed3;
};

cbuffer FNiagaraGlobalParameters
{
	float Engine_DeltaTime;
	float Engine_InverseDeltaTime;
	float Engine_Time;
	float Engine_RealTime;
}

cbuffer FNiagaraSystemParameters
{
	float Engine_Owner_TimeSinceRendered;
	float Engine_Owner_LODDistance;
	float Engine_Owner_LODDistanceFraction;
	float Engine_System_Age;
	int Engine_Owner_ExecutionState;
	int Engine_System_TickCount;
	int Engine_System_NumEmitters;
	int Engine_System_NumEmittersAlive;
}

cbuffer FNiagaraOwnerParameters
{
	float4x4 Engine_Owner_SystemLocalToWorld;
	float4x4 Engine_Owner_SystemWorldToLocal;
	float4x4 Engine_Owner_SystemLocalToWorldTransposed;
	float4x4 Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 Engine_Owner_SystemWorldToLocalNoScale;
	float4 Engine_Owner_Rotation;
	float4 Engine_Owner_Position;
	float4 Engine_Owner_Velocity;
	float4 Engine_Owner_SystemXAxis;
	float4 Engine_Owner_SystemYAxis;
	float4 Engine_Owner_SystemZAxis;
	float4 Engine_Owner_Scale;
}

cbuffer FNiagaraEmitterParameters
{
	int Engine_Emitter_NumParticles;
	int Engine_Emitter_TotalSpawnedParticles;
	float Engine_Emitter_SpawnCountScale;
	float Emitter_Age;
	int Emitter_RandomSeed;
	int Engine_Emitter_PaddingInt32_0;
	int Engine_Emitter_PaddingInt32_1;
	int Engine_Emitter_PaddingInt32_2;
}

cbuffer FNiagaraExternalParameters
{
	float Constants_Emitter_InitializeParticle_Lifetime;
	float4 Constants_Emitter_InitializeParticle_Color;
	float Constants_Emitter_InitializeParticle_Mass;
	float2 Constants_Emitter_InitializeParticle_SpriteSize;
	float Constants_Emitter_InitializeParticle_SpriteRotation;
	float3 Constants_Emitter_InitializeParticle_MeshScale;
	int Engine_ExecutionCount;
	float3 Emitter_BeamVector;
	float3 Emitter_BeamStart;
	float Emitter_BeamStartEndLength;
	float3 Emitter_BeamDirection;
	float3 Emitter_BeamStartTangent;
	float3 Emitter_BeamEnd;
	float3 Emitter_BeamEndTangent;
	float Constants_Emitter_SpawnBeam_SplinePositionErrorThreshold;
	bool Emitter_UseBeamTangents;
	int Emitter_BeamID;
	float Constants_Emitter_FloatFromCurve002_ScaleCurve;
	float Constants_Emitter_BeamWidth_BeamTwistAmount;
	float Constants_Emitter_ApplyInitialForces_PositionalForceWarmupTime;
	float Constants_Emitter_FloatFromCurve001_ScaleCurve;
	float4 Constants_Emitter_Color_Color;
	float3 Constants_Emitter_Color_ScaleColor;
	float Emitter_AlphaScale;
	float Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	float Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	float Emitter_SpawnRate;
	float Emitter_SpawnInterval;
	float Emitter_InterpSpawnStartDt;
	int Emitter_SpawnGroup;
}

cbuffer PREV_FNiagaraGlobalParameters
{
	float PREV_Engine_DeltaTime;
	float PREV_Engine_InverseDeltaTime;
	float PREV_Engine_Time;
	float PREV_Engine_RealTime;
}

cbuffer PREV_FNiagaraSystemParameters
{
	float PREV_Engine_Owner_TimeSinceRendered;
	float PREV_Engine_Owner_LODDistance;
	float PREV_Engine_Owner_LODDistanceFraction;
	float PREV_Engine_System_Age;
	int PREV_Engine_Owner_ExecutionState;
	int PREV_Engine_System_TickCount;
	int PREV_Engine_System_NumEmitters;
	int PREV_Engine_System_NumEmittersAlive;
}

cbuffer PREV_FNiagaraOwnerParameters
{
	float4x4 PREV_Engine_Owner_SystemLocalToWorld;
	float4x4 PREV_Engine_Owner_SystemWorldToLocal;
	float4x4 PREV_Engine_Owner_SystemLocalToWorldTransposed;
	float4x4 PREV_Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 PREV_Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 PREV_Engine_Owner_SystemWorldToLocalNoScale;
	float4 PREV_Engine_Owner_Rotation;
	float4 PREV_Engine_Owner_Position;
	float4 PREV_Engine_Owner_Velocity;
	float4 PREV_Engine_Owner_SystemXAxis;
	float4 PREV_Engine_Owner_SystemYAxis;
	float4 PREV_Engine_Owner_SystemZAxis;
	float4 PREV_Engine_Owner_Scale;
}

cbuffer PREV_FNiagaraEmitterParameters
{
	int PREV_Engine_Emitter_NumParticles;
	int PREV_Engine_Emitter_TotalSpawnedParticles;
	float PREV_Engine_Emitter_SpawnCountScale;
	float PREV_Emitter_Age;
	int PREV_Emitter_RandomSeed;
	int PREV_Engine_Emitter_PaddingInt32_0;
	int PREV_Engine_Emitter_PaddingInt32_1;
	int PREV_Engine_Emitter_PaddingInt32_2;
}

cbuffer PREV_FNiagaraExternalParameters
{
	float PREV_Constants_Emitter_InitializeParticle_Lifetime;
	float4 PREV_Constants_Emitter_InitializeParticle_Color;
	float PREV_Constants_Emitter_InitializeParticle_Mass;
	float2 PREV_Constants_Emitter_InitializeParticle_SpriteSize;
	float PREV_Constants_Emitter_InitializeParticle_SpriteRotation;
	float3 PREV_Constants_Emitter_InitializeParticle_MeshScale;
	int PREV_Engine_ExecutionCount;
	float3 PREV_Emitter_BeamVector;
	float3 PREV_Emitter_BeamStart;
	float PREV_Emitter_BeamStartEndLength;
	float3 PREV_Emitter_BeamDirection;
	float3 PREV_Emitter_BeamStartTangent;
	float3 PREV_Emitter_BeamEnd;
	float3 PREV_Emitter_BeamEndTangent;
	float PREV_Constants_Emitter_SpawnBeam_SplinePositionErrorThreshold;
	bool PREV_Emitter_UseBeamTangents;
	int PREV_Emitter_BeamID;
	float PREV_Constants_Emitter_FloatFromCurve002_ScaleCurve;
	float PREV_Constants_Emitter_BeamWidth_BeamTwistAmount;
	float PREV_Constants_Emitter_ApplyInitialForces_PositionalForceWarmupTime;
	float PREV_Constants_Emitter_FloatFromCurve001_ScaleCurve;
	float4 PREV_Constants_Emitter_Color_Color;
	float3 PREV_Constants_Emitter_Color_ScaleColor;
	float PREV_Emitter_AlphaScale;
	float PREV_Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	float PREV_Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	float PREV_Emitter_SpawnRate;
	float PREV_Emitter_SpawnInterval;
	float PREV_Emitter_InterpSpawnStartDt;
	int PREV_Emitter_SpawnGroup;
}

struct FParamMap0_Transient
{
	float PhysicsDeltaTime;
	float PhysicsDrag;
	float3 PhysicsForce;
	float3 PhysicsRotationalForce;
};

struct FParamMap0_SpawnBeam
{
	float SplinePositionErrorThreshold;
};

struct FParamMap0_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float DeltaTime;
	float3 Force;
	float Mass;
	float3 Position;
	float3 PreviousVelocity;
	float SpeedLimit;
	float3 Velocity;
	bool WritetoIntrinsicProperties;
};

struct FParamMap0_ParticleState
{
	float DeltaTime;
	float Lifetime;
};

struct FParamMap0_Particles
{
	float Age;
	float3 BeamSplineBinormal;
	float3 BeamSplineNormal;
	float3 BeamSplineTangent;
	float4 Color;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float NormalizedAge;
	float3 Position;
	float3 PreviousVelocity;
	NiagaraID RibbonID;
	float RibbonLinkOrder;
	float RibbonTwist;
	float RibbonWidth;
	float RotationalInertia;
	float3 RotationalVelocity;
	float3 Scale;
	float SpriteRotation;
	float2 SpriteSize;
	int UniqueID;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity
{
	float IncomingPhysicsDrag;
	float3 IncomingPhysicsForce;
	float3 Position;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_ParticleState
{
	bool FirstFrame;
};

struct FParamMap0_OUTPUT_VAR_ApplyInitialForces
{
	float3 IncomingPhysicsForce;
	float3 IncomingPhysicsRotationalForce;
};

struct FParamMap0_OUTPUT_VAR
{
	FParamMap0_OUTPUT_VAR_ApplyInitialForces ApplyInitialForces;
	FParamMap0_OUTPUT_VAR_ParticleState ParticleState;
	FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity SolveForcesAndVelocity;
};

struct FParamMap0_Local_SpawnBeam
{
	float3 BeamDirection;
	float3 BeamVector;
	float NormalizedExecIndex;
	float StartEndVecLength;
};

struct FParamMap0_Local_SolveForcesAndVelocity
{
	float DeltaTime;
	float Mass;
	float3 PhysicsForce;
};

struct FParamMap0_Local
{
	FParamMap0_Local_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Local_SpawnBeam SpawnBeam;
};

struct FParamMap0_Interpolation
{
	float Emitter_InterpSpawnStartDt;
	int Emitter_SpawnGroup;
	float Emitter_SpawnInterval;
	int InterpSpawn_Index;
	float InterpSpawn_InvSpawnTime;
	float InterpSpawn_InvUpdateTime;
	float InterpSpawn_SpawnTime;
	float InterpSpawn_UpdateTime;
	float SpawnInterp;
};

struct FParamMap0_InitializeParticle
{
	float4 Color;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float3 MeshScale;
	float3 Position;
	float SpriteRotation;
	float2 SpriteSize;
	bool WriteColor;
	bool WriteLifetime;
	bool WriteMass;
	bool WriteMaterialRandom;
	bool WritePosition;
	bool WriteScale;
	bool WriteSpriteRotation;
	bool WriteSpriteSize;
};

struct FParamMap0_FloatFromCurve002
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve001
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_Engine_System
{
	float Age;
	int NumEmitters;
	int NumEmittersAlive;
	int TickCount;
};

struct FParamMap0_Engine_Owner
{
	int ExecutionState;
	float LODDistance;
	float LODDistanceFraction;
	float3 Position;
	float4 Rotation;
	float3 Scale;
	float4x4 SystemLocalToWorld;
	float4x4 SystemLocalToWorldNoScale;
	float4x4 SystemLocalToWorldTransposed;
	float4x4 SystemWorldToLocal;
	float4x4 SystemWorldToLocalNoScale;
	float4x4 SystemWorldToLocalTransposed;
	float3 SystemXAxis;
	float3 SystemYAxis;
	float3 SystemZAxis;
	float TimeSinceRendered;
	float3 Velocity;
};

struct FParamMap0_Engine_Emitter
{
	int NumParticles;
	int PaddingInt32_0;
	int PaddingInt32_1;
	int PaddingInt32_2;
	float SpawnCountScale;
	int TotalSpawnedParticles;
};

struct FParamMap0_Engine
{
	float DeltaTime;
	FParamMap0_Engine_Emitter Emitter;
	int ExecutionCount;
	float InverseDeltaTime;
	FParamMap0_Engine_Owner Owner;
	float RealTime;
	FParamMap0_Engine_System System;
	float Time;
};

struct FParamMap0_Emitter
{
	float Age;
	float AlphaScale;
	float3 BeamDirection;
	float3 BeamEnd;
	float3 BeamEndTangent;
	int BeamID;
	float3 BeamStart;
	float BeamStartEndLength;
	float3 BeamStartTangent;
	float3 BeamVector;
	float InterpSpawnStartDt;
	bool LocalSpace;
	int RandomSeed;
	int SpawnGroup;
	float SpawnInterval;
	float SpawnRate;
	bool UseBeamTangents;
};

struct FParamMap0_DataInstance
{
	bool Alive;
};

struct FParamMap0_Constants_Emitter_SpawnBeam
{
	float SplinePositionErrorThreshold;
};

struct FParamMap0_Constants_Emitter_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float SpeedLimit;
};

struct FParamMap0_Constants_Emitter_InitializeParticle
{
	float4 Color;
	float Lifetime;
	float Mass;
	float3 MeshScale;
	float SpriteRotation;
	float2 SpriteSize;
};

struct FParamMap0_Constants_Emitter_FloatFromCurve002
{
	float ScaleCurve;
};

struct FParamMap0_Constants_Emitter_FloatFromCurve001
{
	float ScaleCurve;
};

struct FParamMap0_Constants_Emitter_Color
{
	float4 Color;
	float3 ScaleColor;
};

struct FParamMap0_Constants_Emitter_BeamWidth
{
	float BeamTwistAmount;
};

struct FParamMap0_Constants_Emitter_ApplyInitialForces
{
	float PositionalForceWarmupTime;
};

struct FParamMap0_Constants_Emitter
{
	FParamMap0_Constants_Emitter_ApplyInitialForces ApplyInitialForces;
	FParamMap0_Constants_Emitter_BeamWidth BeamWidth;
	FParamMap0_Constants_Emitter_Color Color;
	FParamMap0_Constants_Emitter_FloatFromCurve001 FloatFromCurve001;
	FParamMap0_Constants_Emitter_FloatFromCurve002 FloatFromCurve002;
	FParamMap0_Constants_Emitter_InitializeParticle InitializeParticle;
	FParamMap0_Constants_Emitter_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Constants_Emitter_SpawnBeam SpawnBeam;
};

struct FParamMap0_Constants
{
	FParamMap0_Constants_Emitter Emitter;
};

struct FParamMap0_Color
{
	float4 Color;
	float ScaleAlpha;
	float3 ScaleColor;
};

struct FParamMap0_BeamWidth
{
	float BeamTwistAmount;
	float BeamWidth;
};

struct FParamMap0_ApplyInitialForces
{
	bool ApplyForcetoPosition;
	bool ApplyForcetoVelocity;
	bool ApplyRotationalForcetoRotationalVelocity;
	float PositionalForceWarmupTime;
};

struct FParamMap0
{
	FParamMap0_ApplyInitialForces ApplyInitialForces;
	FParamMap0_BeamWidth BeamWidth;
	FParamMap0_Color Color;
	FParamMap0_Constants Constants;
	FParamMap0_DataInstance DataInstance;
	FParamMap0_Emitter Emitter;
	FParamMap0_Engine Engine;
	FParamMap0_FloatFromCurve001 FloatFromCurve001;
	FParamMap0_FloatFromCurve002 FloatFromCurve002;
	FParamMap0_InitializeParticle InitializeParticle;
	FParamMap0_Interpolation Interpolation;
	FParamMap0_Local Local;
	FParamMap0_OUTPUT_VAR OUTPUT_VAR;
	FParamMap0_Particles Particles;
	FParamMap0_ParticleState ParticleState;
	FParamMap0_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_SpawnBeam SpawnBeam;
	FParamMap0_Transient Transient;
};

struct FSimulationContext
{
	FParamMap0 MapSpawn;
	FParamMap0 MapUpdate;
};

static float HackSpawnInterp = 1.0;
void SimulationPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context);
void InitializeParticle_SimulationPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context);
void GetRandomInfo_Emitter_Determinism_false_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context);
void InitializeParticle_Emitter_Func_(inout FSimulationContext Context);
void NormalizedExecutionIndex_Func_(int In_EngineExecutionCount, out float Out_NormalizedExecIndex, inout FSimulationContext Context);
void CustomHlsl93A9E2A54C5C45027356F49C5CBE48F8_Func_(float In_t, float3 In_p0, float3 In_p1, float3 In_p2, float3 In_p3, out float3 Out_Position, out float3 Out_Tangent, out float3 Out_Normal, out float3 Out_Binormal);
void FindPositionOnBezierSpline_Func_(float In_TASC45PositionAlongSpline, float3 In_StartHandle, float3 In_StartPoint, float3 In_EndPoint, float3 In_EndHandle, out float3 Out_PositionOnSpline, out float3 Out_SplineTangent, out float3 Out_SplineNormal, out float3 Out_SplineBinormal, inout FSimulationContext Context);
void SpawnBeam_Emitter_Func_(inout FSimulationContext Context);
void SampleCurve_EmitterBeamWidthFloatCurve(float In_X, out float Out_Value);
void FloatFromCurve002_Emitter_Func_(out float Out_Value, inout FSimulationContext Context);
void BeamWidth_Emitter_Func_(inout FSimulationContext Context);
void ApplyInitialForces_Emitter_Func_(inout FSimulationContext Context);
void ParticleState_Emitter_Func_(inout FSimulationContext Context);
void SampleCurve_EmitterScaleAlphaFloatCurve(float In_X, out float Out_Value);
void FloatFromCurve001_Emitter_Func_(out float Out_Value, inout FSimulationContext Context);
void Color_Emitter_Func_(inout FSimulationContext Context);
void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context);
float GetSpawnInterpolation();
void SimulationPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant20 = false;
	float3 Constant21 = float3(0,0,0);
	float3 Vector_IfResult;
	if(Constant20)
	{
	Vector_IfResult = Constant21;
	}
	else
	{
	Vector_IfResult = Context.MapSpawn.Engine.Owner.Position;
	}
	Out_OutPosition = Vector_IfResult;
}

void InitializeParticle_SimulationPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant29 = false;
	float3 Constant30 = float3(0,0,0);
	float3 Vector_IfResult1;
	if(Constant29)
	{
	Vector_IfResult1 = Constant30;
	}
	else
	{
	Vector_IfResult1 = Context.MapSpawn.Engine.Owner.Position;
	}
	Out_OutPosition = Vector_IfResult1;
}

void GetRandomInfo_Emitter_Determinism_false_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context)
{
	bool Constant42 = false;
	int Constant43 = 0;
	bool Result = NiagaraAll(In_RandomnessMode == Constant43);
	bool Result1 = Constant42 && Result;
	int Constant44 = 1;
	bool Result2 = NiagaraAll(In_RandomnessMode == Constant44);
	bool Result3 = Result1 || Result2;
	int Seed_IfResult;
	if(In_OverrideSeed)
	{
	Seed_IfResult = In_Seed;
	}
	else
	{
	Seed_IfResult = Context.MapSpawn.Emitter.RandomSeed;
	}
	int Constant45 = 0;
	int Constant46 = 0;
	int Seed1_IfResult;
	int Seed2_IfResult;
	int Seed3_IfResult;
	if(In_FixedOverrideSeed)
	{
	Seed1_IfResult = Seed_IfResult;
	Seed2_IfResult = Constant45;
	Seed3_IfResult = Constant46;
	}
	else
	{
	Seed1_IfResult = Context.MapSpawn.Particles.UniqueID;
	Seed2_IfResult = Context.MapSpawn.Engine.System.TickCount;
	Seed3_IfResult = Seed_IfResult;
	}
	int Constant47 = -1;
	int Constant48 = -1;
	int Constant49 = -1;
	int Seed1_IfResult1;
	int Seed2_IfResult1;
	int Seed3_IfResult1;
	if(Result3)
	{
	Seed1_IfResult1 = Seed1_IfResult;
	Seed2_IfResult1 = Seed2_IfResult;
	Seed3_IfResult1 = Seed3_IfResult;
	}
	else
	{
	Seed1_IfResult1 = Constant47;
	Seed2_IfResult1 = Constant48;
	Seed3_IfResult1 = Constant49;
	}
	NiagaraRandInfo Output1;
	Output1.Seed1 = Seed1_IfResult1;
	Output1.Seed2 = Seed2_IfResult1;
	Output1.Seed3 = Seed3_IfResult1;
	Out_RandomInfo = Output1;
	Out_UseDeterministicRandoms = Result3;
}

void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context)
{
	int Constant37 = (0);
	bool Constant38 = false;
	int Constant39 = 0;
	int Constant40 = (0);
	bool Constant41 = false;
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo;
	bool GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms;
	GetRandomInfo_Emitter_Determinism_false_Func_(In_Seed, Constant37, In_OverrideSeed, Constant39, Constant40, Constant41, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo, GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms, Context);
	float Result4 = In_Max - In_Min;
	int Seed1;
	int Seed2;
	int Seed3;
	Seed1 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo.Seed1;
	Seed2 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo.Seed2;
	Seed3 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo.Seed3;
	float Result5 = rand_float(Result4, Seed1, Seed2, Seed3);
	float Result6 = rand_float(Result4);
	float Random_IfResult;
	if(GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms)
	{
	Random_IfResult = Result5;
	}
	else
	{
	Random_IfResult = Result6;
	}
	float Result7 = In_Min + Random_IfResult;
	Out_Result = Result7;
}

void InitializeParticle_Emitter_Func_(inout FSimulationContext Context)
{
	float Lifetime_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteLifetime)
	{
	Lifetime_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.Lifetime;
	}
	else
	{
	Lifetime_IfResult = Context.MapSpawn.Particles.Lifetime;
	}
	Context.MapSpawn.Particles.Lifetime = Lifetime_IfResult;
	float4 Color_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteColor)
	{
	Color_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.Color;
	}
	else
	{
	Color_IfResult = Context.MapSpawn.Particles.Color;
	}
	Context.MapSpawn.Particles.Color = Color_IfResult;
	float Mass_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteMass)
	{
	Mass_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.Mass;
	}
	else
	{
	Mass_IfResult = Context.MapSpawn.Particles.Mass;
	}
	Context.MapSpawn.Particles.Mass = Mass_IfResult;
	float2 SpriteSize_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteSpriteSize)
	{
	SpriteSize_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.SpriteSize;
	}
	else
	{
	SpriteSize_IfResult = Context.MapSpawn.Particles.SpriteSize;
	}
	Context.MapSpawn.Particles.SpriteSize = SpriteSize_IfResult;
	float SpriteRotation_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteSpriteRotation)
	{
	SpriteRotation_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.SpriteRotation;
	}
	else
	{
	SpriteRotation_IfResult = Context.MapSpawn.Particles.SpriteRotation;
	}
	Context.MapSpawn.Particles.SpriteRotation = SpriteRotation_IfResult;
	float3 Scale_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteScale)
	{
	Scale_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.MeshScale;
	}
	else
	{
	Scale_IfResult = Context.MapSpawn.Particles.Scale;
	}
	Context.MapSpawn.Particles.Scale = Scale_IfResult;
	float3 Scale_IfResult1;
	if(Context.MapSpawn.InitializeParticle.WritePosition)
	{
	Scale_IfResult1 = Context.MapSpawn.InitializeParticle.Position;
	}
	else
	{
	Scale_IfResult1 = Context.MapSpawn.Particles.Position;
	}
	Context.MapSpawn.Particles.Position = Scale_IfResult1;
	float MaterialRandom_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteMaterialRandom)
	{
	MaterialRandom_IfResult = Context.MapSpawn.InitializeParticle.MaterialRandom;
	}
	else
	{
	MaterialRandom_IfResult = Context.MapSpawn.Particles.MaterialRandom;
	}
	Context.MapSpawn.Particles.MaterialRandom = MaterialRandom_IfResult;
}

void NormalizedExecutionIndex_Func_(int In_EngineExecutionCount, out float Out_NormalizedExecIndex, inout FSimulationContext Context)
{
	int Result8 = ExecIndex();
	float Output0;
	Output0 = Result8;
	int Constant53 = -1;
	int Result9 = In_EngineExecutionCount + Constant53;
	float Output01;
	Output01 = Result9;
	float Result10 = Output0 / Output01;
	Out_NormalizedExecIndex = Result10;
}

void CustomHlsl93A9E2A54C5C45027356F49C5CBE48F8_Func_(float In_t, float3 In_p0, float3 In_p1, float3 In_p2, float3 In_p3, out float3 Out_Position, out float3 Out_Tangent, out float3 Out_Normal, out float3 Out_Binormal)
{

float t2 = (In_t * In_t);
	float t3 = (In_t * In_t * In_t);

	float3 PC1 = ( In_p3 - (3.0 * In_p2) + (3.0 * In_p1) - In_p0 );
	float3 PC2 = ( (3.0 * In_p2) - (6.0 * In_p1) + (3.0 * In_p0) );
	float3 PC3 = ( (3.0 * In_p1) - (3.0 * In_p0) );
	float3 PC4 = ( In_p0 );


	Out_Position = (PC1 * t3 + PC2 * t2 + PC3 * In_t + PC4);


	float3 Velocity = (3 * PC1 * t2 ) + (2 * PC2 * In_t ) + PC3;


	float3 Acceleration = (6 * PC1 * In_t) + (2 * PC2);

	Out_Tangent = normalize(Velocity);


	Out_Normal =normalize(Acceleration - (Velocity * dot(Velocity, Acceleration)/dot(Velocity, Velocity)));

	Out_Binormal = cross(Out_Tangent, Out_Normal);
}

void FindPositionOnBezierSpline_Func_(float In_TASC45PositionAlongSpline, float3 In_StartHandle, float3 In_StartPoint, float3 In_EndPoint, float3 In_EndHandle, out float3 Out_PositionOnSpline, out float3 Out_SplineTangent, out float3 Out_SplineNormal, out float3 Out_SplineBinormal, inout FSimulationContext Context)
{
	float3 CustomHlsl93A9E2A54C5C45027356F49C5CBE48F8_Func_Output_Position;
	float3 CustomHlsl93A9E2A54C5C45027356F49C5CBE48F8_Func_Output_Tangent;
	float3 CustomHlsl93A9E2A54C5C45027356F49C5CBE48F8_Func_Output_Normal;
	float3 CustomHlsl93A9E2A54C5C45027356F49C5CBE48F8_Func_Output_Binormal;
	CustomHlsl93A9E2A54C5C45027356F49C5CBE48F8_Func_(In_TASC45PositionAlongSpline, In_StartPoint, In_StartHandle, In_EndHandle, In_EndPoint, CustomHlsl93A9E2A54C5C45027356F49C5CBE48F8_Func_Output_Position, CustomHlsl93A9E2A54C5C45027356F49C5CBE48F8_Func_Output_Tangent, CustomHlsl93A9E2A54C5C45027356F49C5CBE48F8_Func_Output_Normal, CustomHlsl93A9E2A54C5C45027356F49C5CBE48F8_Func_Output_Binormal);
	Out_PositionOnSpline = CustomHlsl93A9E2A54C5C45027356F49C5CBE48F8_Func_Output_Position;
	Out_SplineTangent = CustomHlsl93A9E2A54C5C45027356F49C5CBE48F8_Func_Output_Tangent;
	Out_SplineNormal = CustomHlsl93A9E2A54C5C45027356F49C5CBE48F8_Func_Output_Normal;
	Out_SplineBinormal = CustomHlsl93A9E2A54C5C45027356F49C5CBE48F8_Func_Output_Binormal;
}

void SpawnBeam_Emitter_Func_(inout FSimulationContext Context)
{
	float NormalizedExecutionIndex_Func_Output_NormalizedExecIndex;
	NormalizedExecutionIndex_Func_(Context.MapSpawn.Engine.ExecutionCount, NormalizedExecutionIndex_Func_Output_NormalizedExecIndex, Context);
	float3 Result11 = NormalizedExecutionIndex_Func_Output_NormalizedExecIndex * Context.MapSpawn.Emitter.BeamVector;
	float3 Result12 = Result11 + Context.MapSpawn.Emitter.BeamStart;
	Context.MapSpawn.Local.SpawnBeam.NormalizedExecIndex = NormalizedExecutionIndex_Func_Output_NormalizedExecIndex;
	Context.MapSpawn.Local.SpawnBeam.BeamVector = Result12;
	Context.MapSpawn.Local.SpawnBeam.StartEndVecLength = Context.MapSpawn.Emitter.BeamStartEndLength;
	Context.MapSpawn.Local.SpawnBeam.BeamDirection = Context.MapSpawn.Emitter.BeamDirection;
	float Constant54 = 1;
	float Result13 = Constant54 - Context.MapSpawn.Constants.Emitter.SpawnBeam.SplinePositionErrorThreshold;
	float Result14 = clamp(Context.MapSpawn.Local.SpawnBeam.NormalizedExecIndex,Context.MapSpawn.Constants.Emitter.SpawnBeam.SplinePositionErrorThreshold,Result13);
	float3 FindPositionOnBezierSpline_Func_Output_PositionOnSpline;
	float3 FindPositionOnBezierSpline_Func_Output_SplineTangent;
	float3 FindPositionOnBezierSpline_Func_Output_SplineNormal;
	float3 FindPositionOnBezierSpline_Func_Output_SplineBinormal;
	FindPositionOnBezierSpline_Func_(Result14, Context.MapSpawn.Emitter.BeamStartTangent, Context.MapSpawn.Emitter.BeamStart, Context.MapSpawn.Emitter.BeamEnd, Context.MapSpawn.Emitter.BeamEndTangent, FindPositionOnBezierSpline_Func_Output_PositionOnSpline, FindPositionOnBezierSpline_Func_Output_SplineTangent, FindPositionOnBezierSpline_Func_Output_SplineNormal, FindPositionOnBezierSpline_Func_Output_SplineBinormal, Context);
	float Constant55 = 0;
	float Constant56 = 0;
	float Constant57 = 1;
	float3 Output11;
	Output11.x = Constant55;
	Output11.y = Constant56;
	Output11.z = Constant57;
	float3 Result15 = cross(Output11,Context.MapSpawn.Local.SpawnBeam.BeamDirection);
	float3 BeamPosition_IfResult;
	float3 BeamTangent_IfResult;
	float3 BeamNormal_IfResult;
	float3 BeamBinormal_IfResult;
	if(Context.MapSpawn.Emitter.UseBeamTangents)
	{
	BeamPosition_IfResult = FindPositionOnBezierSpline_Func_Output_PositionOnSpline;
	BeamTangent_IfResult = FindPositionOnBezierSpline_Func_Output_SplineTangent;
	BeamNormal_IfResult = FindPositionOnBezierSpline_Func_Output_SplineNormal;
	BeamBinormal_IfResult = FindPositionOnBezierSpline_Func_Output_SplineBinormal;
	}
	else
	{
	BeamPosition_IfResult = Context.MapSpawn.Local.SpawnBeam.BeamVector;
	BeamTangent_IfResult = Context.MapSpawn.Local.SpawnBeam.BeamDirection;
	BeamNormal_IfResult = Output11;
	BeamBinormal_IfResult = Result15;
	}
	Context.MapSpawn.Particles.RibbonLinkOrder = Context.MapSpawn.Local.SpawnBeam.NormalizedExecIndex;
	Context.MapSpawn.Particles.Position = BeamPosition_IfResult;
	Context.MapSpawn.Particles.BeamSplineTangent = BeamTangent_IfResult;
	Context.MapSpawn.Particles.BeamSplineNormal = BeamNormal_IfResult;
	Context.MapSpawn.Particles.BeamSplineBinormal = BeamBinormal_IfResult;
	int Constant58 = 0;
	NiagaraID Output12;
	Output12.Index = Context.MapSpawn.Emitter.BeamID;
	Output12.AcquireTag = Constant58;
	Context.MapSpawn.Particles.RibbonID = Output12;
}

void FloatFromCurve002_Emitter_Func_(out float Out_Value, inout FSimulationContext Context)
{
	float SampleCurve_EmitterBeamWidthFloatCurveOutput_Value;
	SampleCurve_EmitterBeamWidthFloatCurve(Context.MapSpawn.FloatFromCurve002.CurveIndex, SampleCurve_EmitterBeamWidthFloatCurveOutput_Value);
	float Result16 = SampleCurve_EmitterBeamWidthFloatCurveOutput_Value * Context.MapSpawn.Constants.Emitter.FloatFromCurve002.ScaleCurve;
	Out_Value = Result16;
}

void BeamWidth_Emitter_Func_(inout FSimulationContext Context)
{
	Context.MapSpawn.Particles.RibbonWidth = Context.MapSpawn.BeamWidth.BeamWidth;
	Context.MapSpawn.Particles.RibbonTwist = Context.MapSpawn.Constants.Emitter.BeamWidth.BeamTwistAmount;
}

void ApplyInitialForces_Emitter_Func_(inout FSimulationContext Context)
{
	float Constant64 = 1e-06;
	float Result17 = max(Context.MapSpawn.Particles.Mass, Constant64);
	float3 Result18 = Context.MapSpawn.Transient.PhysicsForce / Result17;
	float3 Result19 = Result18 + Context.MapSpawn.Particles.Velocity;
	float3 Velocity_IfResult;
	if(Context.MapSpawn.ApplyInitialForces.ApplyForcetoVelocity)
	{
	Velocity_IfResult = Result19;
	}
	else
	{
	Velocity_IfResult = Context.MapSpawn.Particles.Velocity;
	}
	float Constant65 = 1e-06;
	float Result20 = max(Context.MapSpawn.Particles.RotationalInertia, Constant65);
	float3 Result21 = Context.MapSpawn.Transient.PhysicsRotationalForce / Result20;
	float3 Result22 = Context.MapSpawn.Particles.RotationalVelocity + Result21;
	float3 Constant66 = float3(0,0,0);
	float3 RotVelocity_IfResult;
	float3 RotationalForce_IfResult;
	if(Context.MapSpawn.ApplyInitialForces.ApplyRotationalForcetoRotationalVelocity)
	{
	RotVelocity_IfResult = Result22;
	RotationalForce_IfResult = Constant66;
	}
	else
	{
	RotVelocity_IfResult = Context.MapSpawn.Particles.RotationalVelocity;
	RotationalForce_IfResult = Context.MapSpawn.Transient.PhysicsRotationalForce;
	}
	float3 Result23 = Context.MapSpawn.Transient.PhysicsForce * Context.MapSpawn.Constants.Emitter.ApplyInitialForces.PositionalForceWarmupTime;
	float3 Result24 = Context.MapSpawn.Particles.Position + Result23;
	float3 Position_IfResult;
	if(Context.MapSpawn.ApplyInitialForces.ApplyForcetoPosition)
	{
	Position_IfResult = Result24;
	}
	else
	{
	Position_IfResult = Context.MapSpawn.Particles.Position;
	}
	bool Result25 = Context.MapSpawn.ApplyInitialForces.ApplyForcetoVelocity || Context.MapSpawn.ApplyInitialForces.ApplyForcetoPosition;
	float3 Constant67 = float3(0,0,0);
	float3 Force_IfResult;
	if(Result25)
	{
	Force_IfResult = Constant67;
	}
	else
	{
	Force_IfResult = Context.MapSpawn.Transient.PhysicsForce;
	}
	Context.MapSpawn.Particles.Velocity = Velocity_IfResult;
	Context.MapSpawn.Particles.RotationalVelocity = RotVelocity_IfResult;
	Context.MapSpawn.Particles.Position = Position_IfResult;
	Context.MapSpawn.Transient.PhysicsForce = Force_IfResult;
	Context.MapSpawn.Transient.PhysicsRotationalForce = RotationalForce_IfResult;
	Context.MapSpawn.OUTPUT_VAR.ApplyInitialForces.IncomingPhysicsForce = Context.MapSpawn.Transient.PhysicsForce;
	Context.MapSpawn.OUTPUT_VAR.ApplyInitialForces.IncomingPhysicsRotationalForce = Context.MapSpawn.Transient.PhysicsRotationalForce;
}

void ParticleState_Emitter_Func_(inout FSimulationContext Context)
{
	bool Result26 = NiagaraAll(Context.MapUpdate.Particles.Age <= Context.MapUpdate.Engine.DeltaTime);
	Context.MapUpdate.OUTPUT_VAR.ParticleState.FirstFrame = Result26;
	float Result27 = Context.MapUpdate.Particles.Age + Context.MapUpdate.ParticleState.DeltaTime;
	float Constant69 = 1e-05;
	float Result28 = max(Context.MapUpdate.ParticleState.Lifetime, Constant69);
	float Constant70 = 0.0001;
	float Result29 = Result28 - Constant70;
	bool Result30 = NiagaraAll(Result27 < Result29);
	bool Constant71 = false;
	bool bool_IfResult;
	if(Result30)
	{
	bool_IfResult = Context.MapUpdate.DataInstance.Alive;
	}
	else
	{
	bool_IfResult = Constant71;
	}
	float Result31 = Result27 / Result28;
	Context.MapUpdate.DataInstance.Alive = bool_IfResult;
	Context.MapUpdate.Particles.Age = Result27;
	Context.MapUpdate.Particles.NormalizedAge = Result31;
}

void FloatFromCurve001_Emitter_Func_(out float Out_Value, inout FSimulationContext Context)
{
	float SampleCurve_EmitterScaleAlphaFloatCurveOutput_Value;
	SampleCurve_EmitterScaleAlphaFloatCurve(Context.MapUpdate.FloatFromCurve001.CurveIndex, SampleCurve_EmitterScaleAlphaFloatCurveOutput_Value);
	float Result32 = SampleCurve_EmitterScaleAlphaFloatCurveOutput_Value * Context.MapUpdate.Constants.Emitter.FloatFromCurve001.ScaleCurve;
	Out_Value = Result32;
}

void Color_Emitter_Func_(inout FSimulationContext Context)
{
	float3 Output02;
	float Output2;
	Output02.x = Context.MapUpdate.Constants.Emitter.Color.Color.r;
	Output02.y = Context.MapUpdate.Constants.Emitter.Color.Color.g;
	Output02.z = Context.MapUpdate.Constants.Emitter.Color.Color.b;
	Output2 = Context.MapUpdate.Constants.Emitter.Color.Color.a;
	float3 Result33 = Output02 * Context.MapUpdate.Constants.Emitter.Color.ScaleColor;
	float Result34 = Output2 * Context.MapUpdate.Color.ScaleAlpha;
	float Result35 = Result34 * Context.MapUpdate.Emitter.AlphaScale;
	float4 Output03;
	Output03.g = Result33.y;
	Output03.a = Result35;
	Output03.r = Result33.x;
	Output03.b = Result33.z;
	Context.MapUpdate.Particles.Color = Output03;
}

void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context)
{
	Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime = Context.MapUpdate.SolveForcesAndVelocity.DeltaTime;
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Context.MapUpdate.SolveForcesAndVelocity.Force;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsForce = Context.MapUpdate.SolveForcesAndVelocity.Force;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.SolveForcesAndVelocity.Velocity;
	Context.MapUpdate.Local.SolveForcesAndVelocity.Mass = Context.MapUpdate.SolveForcesAndVelocity.Mass;
	float Constant81 = 0.0001;
	float Result36 = max(Context.MapUpdate.Local.SolveForcesAndVelocity.Mass, Constant81);
	float Result37 = Reciprocal(Result36);
	float3 Result38 = Result37 * Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce;
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Result38;
	float3 Result39 = Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce * Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime + Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float Constant82 = 0;
	float Result40 = max(Context.MapUpdate.Transient.PhysicsDrag, Constant82);
	float Result41 = Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime * Result40;
	float Constant83 = 1;
	float Result42 = Result41 + Constant83;
	float3 Result43 = Result39 / Result42;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Result43;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsDrag = Context.MapUpdate.Transient.PhysicsDrag;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float3 Result44 = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity * Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime + Context.MapUpdate.SolveForcesAndVelocity.Position;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position = Result44;
	float3 Position_IfResult1;
	float3 Velocity_IfResult1;
	float3 PreviousVelocity_IfResult;
	if(Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	Position_IfResult1 = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position;
	Velocity_IfResult1 = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	PreviousVelocity_IfResult = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	}
	else
	{
	Position_IfResult1 = Context.MapUpdate.SolveForcesAndVelocity.Position;
	Velocity_IfResult1 = Context.MapUpdate.SolveForcesAndVelocity.Velocity;
	PreviousVelocity_IfResult = Context.MapUpdate.SolveForcesAndVelocity.PreviousVelocity;
	}
	Context.MapUpdate.Particles.Position = Position_IfResult1;
	Context.MapUpdate.Particles.Velocity = Velocity_IfResult1;
	Context.MapUpdate.Particles.PreviousVelocity = PreviousVelocity_IfResult;
	float3 Constant84 = float3(0,0,0);
	float Constant85 = 0;
	float3 ForceVector_IfResult;
	float Drag_IfResult;
	if(Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	ForceVector_IfResult = Constant84;
	Drag_IfResult = Constant85;
	}
	else
	{
	ForceVector_IfResult = Context.MapUpdate.Transient.PhysicsForce;
	Drag_IfResult = Context.MapUpdate.Transient.PhysicsDrag;
	}
	Context.MapUpdate.Transient.PhysicsForce = ForceVector_IfResult;
	Context.MapUpdate.Transient.PhysicsDrag = Drag_IfResult;
}

float GetSpawnInterpolation()
{
	return HackSpawnInterp;
}


void InterpolateParameters(inout FSimulationContext Context)
{
	int InterpSpawn_Index = ExecIndex();
	float InterpSpawn_SpawnTime = Emitter_InterpSpawnStartDt + (Emitter_SpawnInterval * InterpSpawn_Index);
	float InterpSpawn_UpdateTime = Engine_DeltaTime - InterpSpawn_SpawnTime;
	float InterpSpawn_InvSpawnTime = 1.0 / InterpSpawn_SpawnTime;
	float InterpSpawn_InvUpdateTime = 1.0 / InterpSpawn_UpdateTime;
	float SpawnInterp = InterpSpawn_SpawnTime * Engine_InverseDeltaTime ;
	HackSpawnInterp = SpawnInterp;
	Context.MapSpawn.Interpolation.InterpSpawn_Index = InterpSpawn_Index;
	Context.MapSpawn.Interpolation.InterpSpawn_SpawnTime = InterpSpawn_SpawnTime;
	Context.MapSpawn.Interpolation.InterpSpawn_UpdateTime = InterpSpawn_UpdateTime;
	Context.MapSpawn.Interpolation.InterpSpawn_InvSpawnTime = InterpSpawn_InvSpawnTime;
	Context.MapSpawn.Interpolation.InterpSpawn_InvUpdateTime = InterpSpawn_InvUpdateTime;
	Context.MapSpawn.Interpolation.SpawnInterp = SpawnInterp;
	Context.MapSpawn.Interpolation.Emitter_SpawnInterval = Emitter_SpawnInterval;
	Context.MapSpawn.Interpolation.Emitter_InterpSpawnStartDt = Emitter_InterpSpawnStartDt;
	Context.MapSpawn.Interpolation.Emitter_SpawnGroup = Emitter_SpawnGroup;
	Context.MapSpawn.Engine.Time = lerp(PREV_Engine_Time, Engine_Time, SpawnInterp);
	Context.MapSpawn.Engine.RealTime = lerp(PREV_Engine_RealTime, Engine_RealTime, SpawnInterp);
	Context.MapSpawn.Engine.Owner.TimeSinceRendered = lerp(PREV_Engine_Owner_TimeSinceRendered, Engine_Owner_TimeSinceRendered, SpawnInterp);
	Context.MapSpawn.Engine.Owner.LODDistance = lerp(PREV_Engine_Owner_LODDistance, Engine_Owner_LODDistance, SpawnInterp);
	Context.MapSpawn.Engine.Owner.LODDistanceFraction = lerp(PREV_Engine_Owner_LODDistanceFraction, Engine_Owner_LODDistanceFraction, SpawnInterp);
	Context.MapSpawn.Engine.System.Age = lerp(PREV_Engine_System_Age, Engine_System_Age, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Rotation = lerp(PREV_Engine_Owner_Rotation, Engine_Owner_Rotation, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Position = lerp(PREV_Engine_Owner_Position.xyz, Engine_Owner_Position.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Velocity = lerp(PREV_Engine_Owner_Velocity.xyz, Engine_Owner_Velocity.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemXAxis = lerp(PREV_Engine_Owner_SystemXAxis.xyz, Engine_Owner_SystemXAxis.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemYAxis = lerp(PREV_Engine_Owner_SystemYAxis.xyz, Engine_Owner_SystemYAxis.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemZAxis = lerp(PREV_Engine_Owner_SystemZAxis.xyz, Engine_Owner_SystemZAxis.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Scale = lerp(PREV_Engine_Owner_Scale.xyz, Engine_Owner_Scale.xyz, SpawnInterp);
	Context.MapSpawn.Emitter.Age = lerp(PREV_Emitter_Age, Emitter_Age, SpawnInterp);
	Context.MapSpawn.Emitter.BeamVector = lerp(PREV_Emitter_BeamVector, Emitter_BeamVector, SpawnInterp);
	Context.MapSpawn.Emitter.BeamStart = lerp(PREV_Emitter_BeamStart, Emitter_BeamStart, SpawnInterp);
	Context.MapSpawn.Emitter.BeamStartEndLength = lerp(PREV_Emitter_BeamStartEndLength, Emitter_BeamStartEndLength, SpawnInterp);
	Context.MapSpawn.Emitter.BeamDirection = lerp(PREV_Emitter_BeamDirection, Emitter_BeamDirection, SpawnInterp);
	Context.MapSpawn.Emitter.BeamStartTangent = lerp(PREV_Emitter_BeamStartTangent, Emitter_BeamStartTangent, SpawnInterp);
	Context.MapSpawn.Emitter.BeamEnd = lerp(PREV_Emitter_BeamEnd, Emitter_BeamEnd, SpawnInterp);
	Context.MapSpawn.Emitter.BeamEndTangent = lerp(PREV_Emitter_BeamEndTangent, Emitter_BeamEndTangent, SpawnInterp);
	Context.MapSpawn.Emitter.AlphaScale = lerp(PREV_Emitter_AlphaScale, Emitter_AlphaScale, SpawnInterp);
	Context.MapSpawn.Engine.DeltaTime = 0.0f;
	Context.MapSpawn.Engine.InverseDeltaTime = 0.0f;
	Context.MapUpdate.Engine.DeltaTime = InterpSpawn_UpdateTime;
	Context.MapUpdate.Engine.InverseDeltaTime = InterpSpawn_InvUpdateTime;
}

void ReadDataSets(inout FSimulationContext Context)
{
}

void WriteDataSets(inout FSimulationContext Context)
{
}

void SimulateMapSpawn(inout FSimulationContext Context)
{


	float Constant = 1;
	Context.MapSpawn.Particles.Lifetime = Constant;
	float4 Constant1 = float4(1,1,1,1);
	Context.MapSpawn.Particles.Color = Constant1;
	float Constant2 = 1;
	Context.MapSpawn.Particles.Mass = Constant2;
	float2 Constant3 = float2(10,10);
	Context.MapSpawn.Particles.SpriteSize = Constant3;
	float Constant4 = 0;
	Context.MapSpawn.Particles.SpriteRotation = Constant4;
	float3 Constant5 = float3(1,1,1);
	Context.MapSpawn.Particles.Scale = Constant5;
	float Constant6 = 0;
	Context.MapSpawn.Particles.MaterialRandom = Constant6;
	float Constant7 = (0.0);
	Context.MapSpawn.Particles.RibbonLinkOrder = Constant7;
	float3 Constant8 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.BeamSplineTangent = Constant8;
	float3 Constant9 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.BeamSplineNormal = Constant9;
	float3 Constant10 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.BeamSplineBinormal = Constant10;
	NiagaraID Constant11 = (NiagaraID)0;
	Context.MapSpawn.Particles.RibbonID = Constant11;
	float Constant12 = (0.0);
	Context.MapSpawn.Particles.RibbonWidth = Constant12;
	float Constant13 = (0.0);
	Context.MapSpawn.Particles.RibbonTwist = Constant13;
	float3 Constant14 = float3(0,0,0);
	Context.MapSpawn.Particles.Velocity = Constant14;
	float3 Constant15 = float3(0,0,0);
	Context.MapSpawn.Particles.RotationalVelocity = Constant15;
	float Constant16 = 1;
	Context.MapSpawn.Particles.RotationalInertia = Constant16;
	float Constant17 = 0;
	Context.MapSpawn.Particles.Age = Constant17;
	float Constant18 = (0.0);
	Context.MapSpawn.Particles.NormalizedAge = Constant18;

	bool Constant19 = false;
	float3 SimulationPosition_Emitter_Func_Output_OutPosition;
	SimulationPosition_Emitter_Func_(SimulationPosition_Emitter_Func_Output_OutPosition, Context);
	bool Constant22 = false;
	bool Constant23 = false;
	Context.MapSpawn.InitializeParticle.Position = SimulationPosition_Emitter_Func_Output_OutPosition;
	Context.MapSpawn.InitializeParticle.WriteMass = Constant22;
	Context.MapSpawn.InitializeParticle.WriteColor = Constant23;
	bool Constant24 = true;
	Context.MapSpawn.InitializeParticle.WriteLifetime = Constant24;
	bool Constant25 = false;
	Context.MapSpawn.InitializeParticle.WriteSpriteSize = Constant25;
	bool Constant26 = false;
	Context.MapSpawn.InitializeParticle.WriteSpriteRotation = Constant26;
	bool Constant27 = false;
	Context.MapSpawn.InitializeParticle.WriteScale = Constant27;
	bool Constant28 = false;
	Context.MapSpawn.InitializeParticle.WritePosition = Constant28;
	float3 InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition;
	InitializeParticle_SimulationPosition_Emitter_Func_(InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition, Context);
	Context.MapSpawn.Particles.Position = InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition;
	bool Constant31 = true;
	Context.MapSpawn.InitializeParticle.WriteMaterialRandom = Constant31;
	float Constant32 = 0;
	float Constant33 = 1;
	int Constant34 = -1;
	int Constant35 = 0;
	bool Constant36 = false;
	float RandomRangeFloat_Func_Output_Result;
	RandomRangeFloat_Func_(Constant32, Constant33, Constant34, Constant35, Constant36, RandomRangeFloat_Func_Output_Result, Context);
	Context.MapSpawn.InitializeParticle.MaterialRandom = RandomRangeFloat_Func_Output_Result;
	EnterStatScope(1 );
	InitializeParticle_Emitter_Func_(Context);
	ExitStatScope( );
	float Constant50 = (0.0);
	Context.MapSpawn.Local.SpawnBeam.NormalizedExecIndex = Constant50;
	float3 Constant51 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Local.SpawnBeam.BeamVector = Constant51;
	float3 Constant52 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Local.SpawnBeam.BeamDirection = Constant52;
	EnterStatScope(2 );
	SpawnBeam_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapSpawn.FloatFromCurve002.CurveIndex = Context.MapSpawn.Particles.RibbonLinkOrder;
	float FloatFromCurve002_Emitter_Func_Output_Value;
	FloatFromCurve002_Emitter_Func_(FloatFromCurve002_Emitter_Func_Output_Value, Context);
	Context.MapSpawn.BeamWidth.BeamWidth = FloatFromCurve002_Emitter_Func_Output_Value;
	EnterStatScope(3 );
	BeamWidth_Emitter_Func_(Context);
	ExitStatScope( );
	bool Constant59 = true;
	Context.MapSpawn.ApplyInitialForces.ApplyForcetoVelocity = Constant59;
	bool Constant60 = false;
	Context.MapSpawn.ApplyInitialForces.ApplyForcetoPosition = Constant60;
	bool Constant61 = true;
	Context.MapSpawn.ApplyInitialForces.ApplyRotationalForcetoRotationalVelocity = Constant61;
	float3 Constant62 = float3(0,0,0);
	Context.MapSpawn.Transient.PhysicsForce = Constant62;
	float3 Constant63 = float3(0,0,0);
	Context.MapSpawn.Transient.PhysicsRotationalForce = Constant63;
	EnterStatScope(4 );
	ApplyInitialForces_Emitter_Func_(Context);
	ExitStatScope( );




	Context.MapSpawn.Particles.PreviousVelocity = Context.MapSpawn.Particles.Velocity;



}
void SimulateMapUpdate(inout FSimulationContext Context)
{

	bool Constant68 = true;
	Context.MapUpdate.DataInstance.Alive = Constant68;
	Context.MapUpdate.ParticleState.DeltaTime = Context.MapUpdate.Engine.DeltaTime;
	Context.MapUpdate.ParticleState.Lifetime = Context.MapUpdate.Particles.Lifetime;
	EnterStatScope(5 );
	ParticleState_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapUpdate.FloatFromCurve001.CurveIndex = Context.MapUpdate.Particles.NormalizedAge;
	float FloatFromCurve001_Emitter_Func_Output_Value;
	FloatFromCurve001_Emitter_Func_(FloatFromCurve001_Emitter_Func_Output_Value, Context);
	Context.MapUpdate.Color.ScaleAlpha = FloatFromCurve001_Emitter_Func_Output_Value;
	EnterStatScope(6 );
	Color_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapUpdate.Transient.PhysicsDeltaTime = Context.MapUpdate.Engine.DeltaTime;
	Context.MapUpdate.SolveForcesAndVelocity.DeltaTime = Context.MapUpdate.Transient.PhysicsDeltaTime;
	float Constant72 = (0.0);
	Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime = Constant72;
	float3 Constant73 = float3(0,0,0);
	Context.MapUpdate.Transient.PhysicsForce = Constant73;
	Context.MapUpdate.SolveForcesAndVelocity.Force = Context.MapUpdate.Transient.PhysicsForce;
	Context.MapUpdate.SolveForcesAndVelocity.Velocity = Context.MapUpdate.Particles.Velocity;
	Context.MapUpdate.SolveForcesAndVelocity.Mass = Context.MapUpdate.Particles.Mass;
	float3 Constant74 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Constant74;
	float3 Constant75 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Constant75;
	float Constant76 = (0.0);
	Context.MapUpdate.Local.SolveForcesAndVelocity.Mass = Constant76;
	float Constant77 = 0;
	Context.MapUpdate.Transient.PhysicsDrag = Constant77;
	Context.MapUpdate.SolveForcesAndVelocity.PreviousVelocity = Context.MapUpdate.Particles.PreviousVelocity;
	bool Constant78 = false;
	Context.MapUpdate.SolveForcesAndVelocity.Position = Context.MapUpdate.Particles.Position;
	float3 Constant79 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position = Constant79;
	bool Constant80 = true;
	Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties = Constant80;
	EnterStatScope(7 );
	SolveForcesAndVelocity_Emitter_Func_(Context);
	ExitStatScope( );



}
void SimulateMain()
{
EnterStatScope(8 );

	FSimulationContext Context = (FSimulationContext)0;
	Context.MapSpawn.Particles.Age = 0.0f;
	Context.MapSpawn.Particles.BeamSplineBinormal.x = 0.0f;
	Context.MapSpawn.Particles.BeamSplineBinormal.y = 0.0f;
	Context.MapSpawn.Particles.BeamSplineBinormal.z = 0.0f;
	Context.MapSpawn.Particles.BeamSplineNormal.x = 0.0f;
	Context.MapSpawn.Particles.BeamSplineNormal.y = 0.0f;
	Context.MapSpawn.Particles.BeamSplineNormal.z = 0.0f;
	Context.MapSpawn.Particles.BeamSplineTangent.x = 0.0f;
	Context.MapSpawn.Particles.BeamSplineTangent.y = 0.0f;
	Context.MapSpawn.Particles.BeamSplineTangent.z = 0.0f;
	Context.MapSpawn.Particles.Color.r = 0.0f;
	Context.MapSpawn.Particles.Color.g = 0.0f;
	Context.MapSpawn.Particles.Color.b = 0.0f;
	Context.MapSpawn.Particles.Color.a = 0.0f;
	Context.MapSpawn.Particles.Lifetime = 0.0f;
	Context.MapSpawn.Particles.Mass = 0.0f;
	Context.MapSpawn.Particles.MaterialRandom = 0.0f;
	Context.MapSpawn.Particles.NormalizedAge = 0.0f;
	Context.MapSpawn.Particles.Position.x = 0.0f;
	Context.MapSpawn.Particles.Position.y = 0.0f;
	Context.MapSpawn.Particles.Position.z = 0.0f;
	Context.MapSpawn.Particles.PreviousVelocity.x = 0.0f;
	Context.MapSpawn.Particles.PreviousVelocity.y = 0.0f;
	Context.MapSpawn.Particles.PreviousVelocity.z = 0.0f;
	Context.MapSpawn.Particles.RibbonID.Index = 0;
	Context.MapSpawn.Particles.RibbonID.AcquireTag = 0;
	Context.MapSpawn.Particles.RibbonLinkOrder = 0.0f;
	Context.MapSpawn.Particles.RibbonTwist = 0.0f;
	Context.MapSpawn.Particles.RibbonWidth = 0.0f;
	Context.MapSpawn.Particles.RotationalInertia = 0.0f;
	Context.MapSpawn.Particles.RotationalVelocity.x = 0.0f;
	Context.MapSpawn.Particles.RotationalVelocity.y = 0.0f;
	Context.MapSpawn.Particles.RotationalVelocity.z = 0.0f;
	Context.MapSpawn.Particles.Scale.x = 0.0f;
	Context.MapSpawn.Particles.Scale.y = 0.0f;
	Context.MapSpawn.Particles.Scale.z = 0.0f;
	Context.MapSpawn.Particles.SpriteRotation = 0.0f;
	Context.MapSpawn.Particles.SpriteSize.x = 0.0f;
	Context.MapSpawn.Particles.SpriteSize.y = 0.0f;
	Context.MapSpawn.Particles.UniqueID = 0;
	Context.MapSpawn.Particles.Velocity.x = 0.0f;
	Context.MapSpawn.Particles.Velocity.y = 0.0f;
	Context.MapSpawn.Particles.Velocity.z = 0.0f;
	Context.MapSpawn.Particles.UniqueID = Engine_Emitter_TotalSpawnedParticles + ExecIndex();
	Context.MapSpawn.Engine.Owner.Position = Engine_Owner_Position.xyz;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.Lifetime = Constants_Emitter_InitializeParticle_Lifetime;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.Color = Constants_Emitter_InitializeParticle_Color;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.Mass = Constants_Emitter_InitializeParticle_Mass;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.SpriteSize = Constants_Emitter_InitializeParticle_SpriteSize;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.SpriteRotation = Constants_Emitter_InitializeParticle_SpriteRotation;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.MeshScale = Constants_Emitter_InitializeParticle_MeshScale;
	Context.MapSpawn.Emitter.RandomSeed = Emitter_RandomSeed;
	Context.MapSpawn.Engine.System.TickCount = Engine_System_TickCount;
	Context.MapSpawn.Engine.ExecutionCount = Engine_ExecutionCount;
	Context.MapSpawn.Emitter.BeamVector = Emitter_BeamVector;
	Context.MapSpawn.Emitter.BeamStart = Emitter_BeamStart;
	Context.MapSpawn.Emitter.BeamStartEndLength = Emitter_BeamStartEndLength;
	Context.MapSpawn.Emitter.BeamDirection = Emitter_BeamDirection;
	Context.MapSpawn.Emitter.BeamStartTangent = Emitter_BeamStartTangent;
	Context.MapSpawn.Emitter.BeamEnd = Emitter_BeamEnd;
	Context.MapSpawn.Emitter.BeamEndTangent = Emitter_BeamEndTangent;
	Context.MapSpawn.Constants.Emitter.SpawnBeam.SplinePositionErrorThreshold = Constants_Emitter_SpawnBeam_SplinePositionErrorThreshold;
	Context.MapSpawn.Emitter.UseBeamTangents = Emitter_UseBeamTangents;
	Context.MapSpawn.Emitter.BeamID = Emitter_BeamID;
	Context.MapSpawn.Constants.Emitter.FloatFromCurve002.ScaleCurve = Constants_Emitter_FloatFromCurve002_ScaleCurve;
	Context.MapSpawn.Constants.Emitter.BeamWidth.BeamTwistAmount = Constants_Emitter_BeamWidth_BeamTwistAmount;
	Context.MapSpawn.Constants.Emitter.ApplyInitialForces.PositionalForceWarmupTime = Constants_Emitter_ApplyInitialForces_PositionalForceWarmupTime;
	Context.MapUpdate.Engine.DeltaTime = Engine_DeltaTime;
	Context.MapUpdate.Constants.Emitter.FloatFromCurve001.ScaleCurve = Constants_Emitter_FloatFromCurve001_ScaleCurve;
	Context.MapUpdate.Constants.Emitter.Color.Color = Constants_Emitter_Color_Color;
	Context.MapUpdate.Constants.Emitter.Color.ScaleColor = Constants_Emitter_Color_ScaleColor;
	Context.MapUpdate.Emitter.AlphaScale = Emitter_AlphaScale;
	Context.MapUpdate.Constants.Emitter.SolveForcesAndVelocity.SpeedLimit = Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	Context.MapUpdate.Constants.Emitter.SolveForcesAndVelocity.AccelerationLimit = Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	Context.MapUpdate.Engine.Owner.Position = Engine_Owner_Position.xyz;
	Context.MapUpdate.Engine.Time = Engine_Time;
	Context.MapUpdate.Engine.InverseDeltaTime = Engine_InverseDeltaTime;
	Context.MapUpdate.Engine.ExecutionCount = Engine_ExecutionCount;
	Context.MapUpdate.Emitter.SpawnRate = Emitter_SpawnRate;
	Context.MapUpdate.Emitter.SpawnInterval = Emitter_SpawnInterval;
	Context.MapUpdate.Emitter.InterpSpawnStartDt = Emitter_InterpSpawnStartDt;
	Context.MapUpdate.Emitter.SpawnGroup = Emitter_SpawnGroup;
	Context.MapUpdate.Engine.Emitter.TotalSpawnedParticles = Engine_Emitter_TotalSpawnedParticles;
	Context.MapUpdate.Emitter.RandomSeed = Emitter_RandomSeed;
	ReadDataSets(Context);
	InterpolateParameters(Context);
	SimulateMapSpawn(Context);

	Context.MapUpdate.Particles = Context.MapSpawn.Particles;


	SimulateMapUpdate(Context);
	WriteDataSets(Context);
	{
	bool bValid = Context.MapUpdate.DataInstance.Alive;
	int TmpWriteIndex = OutputIndex(0, true, bValid);
	OutputDataFloat(0, 0, TmpWriteIndex, Context.MapUpdate.Particles.Age);
	OutputDataFloat(0, 1, TmpWriteIndex, Context.MapUpdate.Particles.BeamSplineBinormal.x);
	OutputDataFloat(0, 2, TmpWriteIndex, Context.MapUpdate.Particles.BeamSplineBinormal.y);
	OutputDataFloat(0, 3, TmpWriteIndex, Context.MapUpdate.Particles.BeamSplineBinormal.z);
	OutputDataFloat(0, 4, TmpWriteIndex, Context.MapUpdate.Particles.BeamSplineNormal.x);
	OutputDataFloat(0, 5, TmpWriteIndex, Context.MapUpdate.Particles.BeamSplineNormal.y);
	OutputDataFloat(0, 6, TmpWriteIndex, Context.MapUpdate.Particles.BeamSplineNormal.z);
	OutputDataFloat(0, 7, TmpWriteIndex, Context.MapUpdate.Particles.BeamSplineTangent.x);
	OutputDataFloat(0, 8, TmpWriteIndex, Context.MapUpdate.Particles.BeamSplineTangent.y);
	OutputDataFloat(0, 9, TmpWriteIndex, Context.MapUpdate.Particles.BeamSplineTangent.z);
	OutputDataFloat(0, 10, TmpWriteIndex, Context.MapUpdate.Particles.Color.r);
	OutputDataFloat(0, 11, TmpWriteIndex, Context.MapUpdate.Particles.Color.g);
	OutputDataFloat(0, 12, TmpWriteIndex, Context.MapUpdate.Particles.Color.b);
	OutputDataFloat(0, 13, TmpWriteIndex, Context.MapUpdate.Particles.Color.a);
	OutputDataFloat(0, 14, TmpWriteIndex, Context.MapUpdate.Particles.Lifetime);
	OutputDataFloat(0, 15, TmpWriteIndex, Context.MapUpdate.Particles.Mass);
	OutputDataFloat(0, 16, TmpWriteIndex, Context.MapUpdate.Particles.MaterialRandom);
	OutputDataFloat(0, 17, TmpWriteIndex, Context.MapUpdate.Particles.NormalizedAge);
	OutputDataFloat(0, 18, TmpWriteIndex, Context.MapUpdate.Particles.Position.x);
	OutputDataFloat(0, 19, TmpWriteIndex, Context.MapUpdate.Particles.Position.y);
	OutputDataFloat(0, 20, TmpWriteIndex, Context.MapUpdate.Particles.Position.z);
	OutputDataFloat(0, 21, TmpWriteIndex, Context.MapUpdate.Particles.PreviousVelocity.x);
	OutputDataFloat(0, 22, TmpWriteIndex, Context.MapUpdate.Particles.PreviousVelocity.y);
	OutputDataFloat(0, 23, TmpWriteIndex, Context.MapUpdate.Particles.PreviousVelocity.z);
	OutputDataInt(0, 24, TmpWriteIndex, Context.MapUpdate.Particles.RibbonID.Index);
	OutputDataInt(0, 25, TmpWriteIndex, Context.MapUpdate.Particles.RibbonID.AcquireTag);
	OutputDataFloat(0, 26, TmpWriteIndex, Context.MapUpdate.Particles.RibbonLinkOrder);
	OutputDataFloat(0, 27, TmpWriteIndex, Context.MapUpdate.Particles.RibbonTwist);
	OutputDataFloat(0, 28, TmpWriteIndex, Context.MapUpdate.Particles.RibbonWidth);
	OutputDataFloat(0, 29, TmpWriteIndex, Context.MapUpdate.Particles.RotationalInertia);
	OutputDataFloat(0, 30, TmpWriteIndex, Context.MapUpdate.Particles.RotationalVelocity.x);
	OutputDataFloat(0, 31, TmpWriteIndex, Context.MapUpdate.Particles.RotationalVelocity.y);
	OutputDataFloat(0, 32, TmpWriteIndex, Context.MapUpdate.Particles.RotationalVelocity.z);
	OutputDataFloat(0, 33, TmpWriteIndex, Context.MapUpdate.Particles.Scale.x);
	OutputDataFloat(0, 34, TmpWriteIndex, Context.MapUpdate.Particles.Scale.y);
	OutputDataFloat(0, 35, TmpWriteIndex, Context.MapUpdate.Particles.Scale.z);
	OutputDataFloat(0, 36, TmpWriteIndex, Context.MapUpdate.Particles.SpriteRotation);
	OutputDataFloat(0, 37, TmpWriteIndex, Context.MapUpdate.Particles.SpriteSize.x);
	OutputDataFloat(0, 38, TmpWriteIndex, Context.MapUpdate.Particles.SpriteSize.y);
	OutputDataInt(0, 39, TmpWriteIndex, Context.MapUpdate.Particles.UniqueID);
	OutputDataFloat(0, 40, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.x);
	OutputDataFloat(0, 41, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.y);
	OutputDataFloat(0, 42, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.z);
	}
ExitStatScope( );
}
#line 703 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"

#if 0 /*BEGIN_RESOURCE_TABLES*/
NULL, 0
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
