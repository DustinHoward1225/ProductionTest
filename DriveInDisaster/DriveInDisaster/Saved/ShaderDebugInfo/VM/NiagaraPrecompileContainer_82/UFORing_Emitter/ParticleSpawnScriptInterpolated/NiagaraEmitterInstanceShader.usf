#line 1 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 6 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#pragma warning(disable:4008)
#line 7 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Public/Platform.ush"
#line 9 "/Engine/Public/Platform.ush"
#line 1 "FP16Math.ush"
#line 10 "/Engine/Public/Platform.ush"
#line 43 "/Engine/Public/Platform.ush"
#line 1 "ShaderVersion.ush"
#line 44 "/Engine/Public/Platform.ush"
#line 595 "/Engine/Public/Platform.ush"
float min3( float a, float b, float c )
{
	return min( a, min( b, c ) );
}

float max3( float a, float b, float c )
{
	return max( a, max( b, c ) );
}

float2 min3( float2 a, float2 b, float2 c )
{
	return float2(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y )
	);
}

float2 max3( float2 a, float2 b, float2 c )
{
	return float2(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y )
	);
}

float3 max3( float3 a, float3 b, float3 c )
{
	return float3(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z )
	);
}

float3 min3( float3 a, float3 b, float3 c )
{
	return float3(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z )
	);
}

float4 min3( float4 a, float4 b, float4 c )
{
	return float4(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z ),
		min3( a.w, b.w, c.w )
	);
}

float4 max3( float4 a, float4 b, float4 c )
{
	return float4(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z ),
		max3( a.w, b.w, c.w )
	);
}




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }
#line 8 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"






	const static float PI = 3.1415926535897932f;

	const static float TWO_PI = 3.1415926535897932f*2.0f;
#line 18 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Private/Definitions.usf"
#line 19 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"


float4 ModuloPrecise(float4 x, float4 y){ return x - y * trunc(x/y); }
float3 ModuloPrecise(float3 x, float3 y){ return x - y * trunc(x/y); }
float2 ModuloPrecise(float2 x, float2 y){ return x - y * trunc(x/y);}
float ModuloPrecise(float x, float y){ return x - y * trunc(x/y); }
int ModuloPrecise(int x, int y){ return x - y * (x/y); }
int Modulo(int x, int y){ return x - y * (x/y); }



float4 Reciprocal(float4 x){ return 1.0f/x;}
float3 Reciprocal(float3 x){ return 1.0f/x; }
float2 Reciprocal(float2 x){ return 1.0f/x;}
float Reciprocal(float x){ return 1.0f/x; }



bool NiagaraAll(bool b) { return b; }
bool NiagaraAny(bool b) { return b; }









bool NiagaraAll(bool2 b) { return b.x && b.y; }
bool NiagaraAll(bool3 b) { return b.x && b.y && b.z; }
bool NiagaraAll(bool4 b) { return b.x && b.y && b.z && b.w; }
bool NiagaraAny(bool2 b) { return b.x || b.y; }
bool NiagaraAny(bool3 b) { return b.x || b.y || b.z; }
bool NiagaraAny(bool4 b) { return b.x || b.y || b.z || b.w; }
#line 193 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
float4 rand4(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int4 v = int4(Seed4, Seed1, Seed2, Seed3) * 1664525 + 1013904223;

	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;






	return float4((v >> 8) & 0x00ffffff) / 16777216.0;

}







float3 rand3(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int3 v = int3(Seed1, Seed2, Seed4 | (Seed3 << 16)) * 1664525 + 1013904223;

	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return float3((v >> 8) & 0x00ffffff) / 16777216.0;
}


static int RandomCounterDeterministic = 0;


float rand(float x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * x;
}


float2 rand(float2 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xy * x;
}


float3 rand(float3 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyz * x;
}


float4 rand(float4 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand4(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyzw * x;
}


int rand(int x, int Seed1, int Seed2, int Seed3)
{


	RandomCounterDeterministic += 1;
	return int(rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * (x+1));
}
#line 323 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float rand(float x);

	float2 rand(float2 x)
	{
		return float2(rand(x.x), rand(x.y));
	}

	float3 rand(float3 x)
	{
		return float3(rand(x.x), rand(x.y), rand(x.z));
	}

	float4 rand(float4 x)
	{
		return float4(rand(x.x), rand(x.y), rand(x.z), rand(x.w));
	}

	int rand(int x);



float rand_float(float x)
{
	return rand(x.x);
}

float2 rand_float(float2 x)
{
	return float2(rand_float(x.x), rand_float(x.y));
}

float3 rand_float(float3 x)
{
	return float3(rand_float(x.x), rand_float(x.y), rand_float(x.z));
}

float4 rand_float(float4 x)
{
	return float4(rand_float(x.x), rand_float(x.y), rand_float(x.z), rand_float(x.w));
}

int rand_int(int x)
{



	return rand_float(x.x);
}


float rand_float(float x, int Seed1, int Seed2, int Seed3)
{
	return rand(x.x, Seed1, Seed2, Seed3);
}

float2 rand_float(float2 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float3 rand_float(float3 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float4 rand_float(float4 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

int rand_int(int x, int Seed1, int Seed2, int Seed3)
{


	return rand(x.x-1, Seed1, Seed2, Seed3);
}
#line 405 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float noise(float x);
	float noise(float2 x);
	float noise(float3 x);



	float4 Modulo(float4 x, float4 y);
	float3 Modulo(float3 x, float3 y);
	float2 Modulo(float2 x, float2 y);
	float Modulo(float x, float y);


	int ExecIndex();



	int AcquireIndex(int DataSetID, bool DoAcquire);

	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag);
	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex);

	float InputDataFloat(int DataSetIndex, int RegisterIdx);
	int InputDataInt(int DataSetIndex, int RegisterIdx);
	bool InputDataBool(int DataSetIndex, int RegisterIdx);

	float InputDataNoadvanceFloat(int DataSetIndex, int RegisterIdx);
	int InputDataNoadvanceInt(int DataSetIndex, int RegisterIdx);
	bool InputDataNoadvanceBool(int DataSetIndex, int RegisterIdx);

	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);
	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value);
	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value);
#line 683 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int OutputIndex(const int DataSetID, const bool bStageKillsParticles, const bool bIsValid)
	{
#line 698 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
			return AcquireIndex(DataSetID, bIsValid);
	}
#line 702 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Generated/NiagaraEmitterInstance.ush"




struct MeshTriCoordinate
{
	int Tri;
	float3 BaryCoord;
};

struct NiagaraRandInfo
{
	int Seed1;
	int Seed2;
	int Seed3;
};

struct NiagaraID
{
	int Index;
	int AcquireTag;
};

cbuffer FNiagaraGlobalParameters
{
	float Engine_DeltaTime;
	float Engine_InverseDeltaTime;
	float Engine_Time;
	float Engine_RealTime;
}

cbuffer FNiagaraSystemParameters
{
	float Engine_Owner_TimeSinceRendered;
	float Engine_Owner_LODDistance;
	float Engine_Owner_LODDistanceFraction;
	float Engine_System_Age;
	int Engine_Owner_ExecutionState;
	int Engine_System_TickCount;
	int Engine_System_NumEmitters;
	int Engine_System_NumEmittersAlive;
}

cbuffer FNiagaraOwnerParameters
{
	float4x4 Engine_Owner_SystemLocalToWorld;
	float4x4 Engine_Owner_SystemWorldToLocal;
	float4x4 Engine_Owner_SystemLocalToWorldTransposed;
	float4x4 Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 Engine_Owner_SystemWorldToLocalNoScale;
	float4 Engine_Owner_Rotation;
	float4 Engine_Owner_Position;
	float4 Engine_Owner_Velocity;
	float4 Engine_Owner_SystemXAxis;
	float4 Engine_Owner_SystemYAxis;
	float4 Engine_Owner_SystemZAxis;
	float4 Engine_Owner_Scale;
}

cbuffer FNiagaraEmitterParameters
{
	int Engine_Emitter_NumParticles;
	int Engine_Emitter_TotalSpawnedParticles;
	float Engine_Emitter_SpawnCountScale;
	float Emitter_Age;
	int Emitter_RandomSeed;
	int Engine_Emitter_PaddingInt32_0;
	int Engine_Emitter_PaddingInt32_1;
	int Engine_Emitter_PaddingInt32_2;
}

cbuffer FNiagaraExternalParameters
{
	float2 Constants_Emitter_Vector2DFromCurve_ScaleCurve;
	float Constants_Emitter_InitializeParticle_Lifetime;
	float4 Constants_Emitter_InitializeParticle_Color;
	float Constants_Emitter_InitializeParticle_Mass;
	float Constants_Emitter_InitializeParticle_SpriteRotation;
	float3 Constants_Emitter_InitializeParticle_MeshScale;
	float Constants_Emitter_StaticMeshLocation_NormalOffset;
	float3 Constants_Emitter_StaticMeshLocation_WorldAxisConstraint;
	float Constants_Emitter_StaticMeshLocation_WorldAxisConstraintThreshold;
	float3 Constants_Emitter_GravityForce_Gravity;
	float Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	float Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	float2 Constants_Emitter_Vector2DFromCurve001_ScaleCurve;
	int Engine_ExecutionCount;
	float Emitter_SpawnRate;
	float Emitter_SpawnInterval;
	float Emitter_InterpSpawnStartDt;
	int Emitter_SpawnGroup;
}

cbuffer PREV_FNiagaraGlobalParameters
{
	float PREV_Engine_DeltaTime;
	float PREV_Engine_InverseDeltaTime;
	float PREV_Engine_Time;
	float PREV_Engine_RealTime;
}

cbuffer PREV_FNiagaraSystemParameters
{
	float PREV_Engine_Owner_TimeSinceRendered;
	float PREV_Engine_Owner_LODDistance;
	float PREV_Engine_Owner_LODDistanceFraction;
	float PREV_Engine_System_Age;
	int PREV_Engine_Owner_ExecutionState;
	int PREV_Engine_System_TickCount;
	int PREV_Engine_System_NumEmitters;
	int PREV_Engine_System_NumEmittersAlive;
}

cbuffer PREV_FNiagaraOwnerParameters
{
	float4x4 PREV_Engine_Owner_SystemLocalToWorld;
	float4x4 PREV_Engine_Owner_SystemWorldToLocal;
	float4x4 PREV_Engine_Owner_SystemLocalToWorldTransposed;
	float4x4 PREV_Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 PREV_Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 PREV_Engine_Owner_SystemWorldToLocalNoScale;
	float4 PREV_Engine_Owner_Rotation;
	float4 PREV_Engine_Owner_Position;
	float4 PREV_Engine_Owner_Velocity;
	float4 PREV_Engine_Owner_SystemXAxis;
	float4 PREV_Engine_Owner_SystemYAxis;
	float4 PREV_Engine_Owner_SystemZAxis;
	float4 PREV_Engine_Owner_Scale;
}

cbuffer PREV_FNiagaraEmitterParameters
{
	int PREV_Engine_Emitter_NumParticles;
	int PREV_Engine_Emitter_TotalSpawnedParticles;
	float PREV_Engine_Emitter_SpawnCountScale;
	float PREV_Emitter_Age;
	int PREV_Emitter_RandomSeed;
	int PREV_Engine_Emitter_PaddingInt32_0;
	int PREV_Engine_Emitter_PaddingInt32_1;
	int PREV_Engine_Emitter_PaddingInt32_2;
}

cbuffer PREV_FNiagaraExternalParameters
{
	float2 PREV_Constants_Emitter_Vector2DFromCurve_ScaleCurve;
	float PREV_Constants_Emitter_InitializeParticle_Lifetime;
	float4 PREV_Constants_Emitter_InitializeParticle_Color;
	float PREV_Constants_Emitter_InitializeParticle_Mass;
	float PREV_Constants_Emitter_InitializeParticle_SpriteRotation;
	float3 PREV_Constants_Emitter_InitializeParticle_MeshScale;
	float PREV_Constants_Emitter_StaticMeshLocation_NormalOffset;
	float3 PREV_Constants_Emitter_StaticMeshLocation_WorldAxisConstraint;
	float PREV_Constants_Emitter_StaticMeshLocation_WorldAxisConstraintThreshold;
	float3 PREV_Constants_Emitter_GravityForce_Gravity;
	float PREV_Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	float PREV_Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	float2 PREV_Constants_Emitter_Vector2DFromCurve001_ScaleCurve;
	int PREV_Engine_ExecutionCount;
	float PREV_Emitter_SpawnRate;
	float PREV_Emitter_SpawnInterval;
	float PREV_Emitter_InterpSpawnStartDt;
	int PREV_Emitter_SpawnGroup;
}

struct FParamMap0_Vector2DFromCurve001
{
	float CurveIndex;
	float2 ScaleCurve;
};

struct FParamMap0_Vector2DFromCurve
{
	float CurveIndex;
	float2 ScaleCurve;
};

struct FParamMap0_Transient
{
	float PhysicsDeltaTime;
	float PhysicsDrag;
	float3 PhysicsForce;
	float2 SpriteSizeScaleFactor;
};

struct FParamMap0_StaticMeshLocation
{
	bool EnableAxisConstraint;
	float NormalOffset;
	float3 SampledMeshNormal;
	float3 SampledMeshPosition;
	float3 WorldAxisConstraint;
	float WorldAxisConstraintThreshold;
	bool WriteToIntrinsicParameters;
};

struct FParamMap0_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float DeltaTime;
	float3 Force;
	float Mass;
	float3 Position;
	float3 PreviousVelocity;
	float SpeedLimit;
	float3 Velocity;
	bool WritetoIntrinsicProperties;
};

struct FParamMap0_ScaleSpriteSize
{
	float2 InitialSpriteSize;
	float2 ScaleFactor;
};

struct FParamMap0_ParticleState
{
	float DeltaTime;
	float Lifetime;
};

struct FParamMap0_Particles_SampleStaticMesh
{
	float4 MeshColor;
	float3 MeshNormal;
	float3 MeshPosition;
	MeshTriCoordinate MeshSampleCoord;
	float3 MeshTangent;
	float2 MeshUV;
	float3 MeshVelocity;
};

struct FParamMap0_Particles_Initial
{
	float2 SpriteSize;
};

struct FParamMap0_Particles
{
	float Age;
	float4 Color;
	FParamMap0_Particles_Initial Initial;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float NormalizedAge;
	float3 Position;
	float3 PreviousVelocity;
	FParamMap0_Particles_SampleStaticMesh SampleStaticMesh;
	float3 Scale;
	float SpriteRotation;
	float2 SpriteSize;
	int UniqueID;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_StaticMeshLocation
{
	bool Alive;
	float3 Position;
};

struct FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity
{
	float IncomingPhysicsDrag;
	float3 IncomingPhysicsForce;
	float3 Position;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_ParticleState
{
	bool FirstFrame;
};

struct FParamMap0_OUTPUT_VAR
{
	FParamMap0_OUTPUT_VAR_ParticleState ParticleState;
	FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_OUTPUT_VAR_StaticMeshLocation StaticMeshLocation;
};

struct FParamMap0_Local_SolveForcesAndVelocity
{
	float DeltaTime;
	float Mass;
	float3 PhysicsForce;
};

struct FParamMap0_Local
{
	FParamMap0_Local_SolveForcesAndVelocity SolveForcesAndVelocity;
};

struct FParamMap0_Interpolation
{
	float Emitter_InterpSpawnStartDt;
	int Emitter_SpawnGroup;
	float Emitter_SpawnInterval;
	int InterpSpawn_Index;
	float InterpSpawn_InvSpawnTime;
	float InterpSpawn_InvUpdateTime;
	float InterpSpawn_SpawnTime;
	float InterpSpawn_UpdateTime;
	float SpawnInterp;
};

struct FParamMap0_InitializeParticle
{
	float4 Color;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float3 MeshScale;
	float3 Position;
	float SpriteRotation;
	float2 SpriteSize;
	bool WriteColor;
	bool WriteLifetime;
	bool WriteMass;
	bool WriteMaterialRandom;
	bool WritePosition;
	bool WriteScale;
	bool WriteSpriteRotation;
	bool WriteSpriteSize;
};

struct FParamMap0_GravityForce
{
	float3 Gravity;
};

struct FParamMap0_Engine_System
{
	float Age;
	int NumEmitters;
	int NumEmittersAlive;
	int TickCount;
};

struct FParamMap0_Engine_Owner
{
	int ExecutionState;
	float LODDistance;
	float LODDistanceFraction;
	float3 Position;
	float4 Rotation;
	float3 Scale;
	float4x4 SystemLocalToWorld;
	float4x4 SystemLocalToWorldNoScale;
	float4x4 SystemLocalToWorldTransposed;
	float4x4 SystemWorldToLocal;
	float4x4 SystemWorldToLocalNoScale;
	float4x4 SystemWorldToLocalTransposed;
	float3 SystemXAxis;
	float3 SystemYAxis;
	float3 SystemZAxis;
	float TimeSinceRendered;
	float3 Velocity;
};

struct FParamMap0_Engine_Emitter
{
	int NumParticles;
	int PaddingInt32_0;
	int PaddingInt32_1;
	int PaddingInt32_2;
	float SpawnCountScale;
	int TotalSpawnedParticles;
};

struct FParamMap0_Engine
{
	float DeltaTime;
	FParamMap0_Engine_Emitter Emitter;
	int ExecutionCount;
	float InverseDeltaTime;
	FParamMap0_Engine_Owner Owner;
	float RealTime;
	FParamMap0_Engine_System System;
	float Time;
};

struct FParamMap0_Emitter
{
	float Age;
	float InterpSpawnStartDt;
	bool LocalSpace;
	int RandomSeed;
	int SpawnGroup;
	float SpawnInterval;
	float SpawnRate;
};

struct FParamMap0_DataInstance
{
	bool Alive;
};

struct FParamMap0_Constants_Emitter_Vector2DFromCurve001
{
	float2 ScaleCurve;
};

struct FParamMap0_Constants_Emitter_Vector2DFromCurve
{
	float2 ScaleCurve;
};

struct FParamMap0_Constants_Emitter_StaticMeshLocation
{
	float NormalOffset;
	float3 WorldAxisConstraint;
	float WorldAxisConstraintThreshold;
};

struct FParamMap0_Constants_Emitter_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float SpeedLimit;
};

struct FParamMap0_Constants_Emitter_InitializeParticle
{
	float4 Color;
	float Lifetime;
	float Mass;
	float3 MeshScale;
	float SpriteRotation;
};

struct FParamMap0_Constants_Emitter_GravityForce
{
	float3 Gravity;
};

struct FParamMap0_Constants_Emitter
{
	FParamMap0_Constants_Emitter_GravityForce GravityForce;
	FParamMap0_Constants_Emitter_InitializeParticle InitializeParticle;
	FParamMap0_Constants_Emitter_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Constants_Emitter_StaticMeshLocation StaticMeshLocation;
	FParamMap0_Constants_Emitter_Vector2DFromCurve Vector2DFromCurve;
	FParamMap0_Constants_Emitter_Vector2DFromCurve001 Vector2DFromCurve001;
};

struct FParamMap0_Constants
{
	FParamMap0_Constants_Emitter Emitter;
};

struct FParamMap0
{
	FParamMap0_Constants Constants;
	FParamMap0_DataInstance DataInstance;
	FParamMap0_Emitter Emitter;
	FParamMap0_Engine Engine;
	FParamMap0_GravityForce GravityForce;
	FParamMap0_InitializeParticle InitializeParticle;
	FParamMap0_Interpolation Interpolation;
	FParamMap0_Local Local;
	FParamMap0_OUTPUT_VAR OUTPUT_VAR;
	FParamMap0_Particles Particles;
	FParamMap0_ParticleState ParticleState;
	FParamMap0_ScaleSpriteSize ScaleSpriteSize;
	FParamMap0_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_StaticMeshLocation StaticMeshLocation;
	FParamMap0_Transient Transient;
	FParamMap0_Vector2DFromCurve Vector2DFromCurve;
	FParamMap0_Vector2DFromCurve001 Vector2DFromCurve001;
};

struct FSimulationContext
{
	FParamMap0 MapSpawn;
	FParamMap0 MapUpdate;
};

static float HackSpawnInterp = 1.0;
void ParticleOwnerPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context);
void SampleVector2DCurve_EmitterSpriteSizeVector2Curve(float In_X, out float2 Out_Value);
void Vector2DFromCurve_Emitter_Func_(out float2 Out_Value, inout FSimulationContext Context);
void InitializeParticle_SimulationPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context);
void GetRandomInfo_Emitter_Determinism_false_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context);
void InitializeParticle_Emitter_Func_(inout FSimulationContext Context);
void RandomTriCoord_EmitterStaticMesh(int In_InstanceData, out MeshTriCoordinate Out_Coord);
void GetTriTangents_EmitterStaticMesh(int In_InstanceData, MeshTriCoordinate In_Coord, out float3 Out_Tangent, out float3 Out_Binormal, out float3 Out_Normal);
void GetTriPosition_EmitterStaticMesh(int In_InstanceData, MeshTriCoordinate In_Coord, out float3 Out_Position);
void GetTriPositionAndVelocityWS_EmitterStaticMesh(int In_InstanceData, MeshTriCoordinate In_Coord, out float3 Out_Position, out float3 Out_Velocity);
void GetTriTangentsWS_EmitterStaticMesh(int In_InstanceData, MeshTriCoordinate In_Coord, out float3 Out_Tangent, out float3 Out_Binormal, out float3 Out_Normal);
void GetTriColor_EmitterStaticMesh(int In_InstanceData, MeshTriCoordinate In_Coord, out float4 Out_Color);
void GetTriUV_EmitterStaticMesh(int In_InstanceData, MeshTriCoordinate In_Coord, int In_UVSet, out float2 Out_UV);
void SampleStaticMesh_Emitter_Func_(inout FSimulationContext Context);
void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context);
void StaticMeshLocation_TransformPosition_Emitter_Func_(float3 In_InPosition, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutPosition, inout FSimulationContext Context);
void StaticMeshLocation_Emitter_Func_(inout FSimulationContext Context);
void ParticleState_Emitter_Func_(inout FSimulationContext Context);
void GravityForce_Emitter_Func_(inout FSimulationContext Context);
void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context);
void SampleVector2DCurve_EmitterScaleFactorVector2Curve(float In_X, out float2 Out_Value);
void Vector2DFromCurve001_Emitter_Func_(out float2 Out_Value, inout FSimulationContext Context);
void ScaleSpriteSize_Emitter_Func_(inout FSimulationContext Context);
float GetSpawnInterpolation();
void ParticleOwnerPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant21 = false;
	float3 Constant22 = float3(0,0,0);
	float3 Vector_IfResult;
	if(Constant21)
	{
	Vector_IfResult = Constant22;
	}
	else
	{
	Vector_IfResult = Context.MapSpawn.Engine.Owner.Position;
	}
	Out_OutPosition = Vector_IfResult;
}

void Vector2DFromCurve_Emitter_Func_(out float2 Out_Value, inout FSimulationContext Context)
{
	float2 SampleVector2DCurve_EmitterSpriteSizeVector2CurveOutput_Value;
	SampleVector2DCurve_EmitterSpriteSizeVector2Curve(Context.MapSpawn.Vector2DFromCurve.CurveIndex, SampleVector2DCurve_EmitterSpriteSizeVector2CurveOutput_Value);
	float2 Result = SampleVector2DCurve_EmitterSpriteSizeVector2CurveOutput_Value * Context.MapSpawn.Constants.Emitter.Vector2DFromCurve.ScaleCurve;
	Out_Value = Result;
}

void InitializeParticle_SimulationPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant27 = false;
	float3 Constant28 = float3(0,0,0);
	float3 Vector_IfResult1;
	if(Constant27)
	{
	Vector_IfResult1 = Constant28;
	}
	else
	{
	Vector_IfResult1 = Context.MapSpawn.Engine.Owner.Position;
	}
	Out_OutPosition = Vector_IfResult1;
}

void GetRandomInfo_Emitter_Determinism_false_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context)
{
	bool Constant40 = false;
	int Constant41 = 0;
	bool Result1 = NiagaraAll(In_RandomnessMode == Constant41);
	bool Result2 = Constant40 && Result1;
	int Constant42 = 1;
	bool Result3 = NiagaraAll(In_RandomnessMode == Constant42);
	bool Result4 = Result2 || Result3;
	int Seed_IfResult;
	if(In_OverrideSeed)
	{
	Seed_IfResult = In_Seed;
	}
	else
	{
	Seed_IfResult = Context.MapSpawn.Emitter.RandomSeed;
	}
	int Constant43 = 0;
	int Constant44 = 0;
	int Seed1_IfResult;
	int Seed2_IfResult;
	int Seed3_IfResult;
	if(In_FixedOverrideSeed)
	{
	Seed1_IfResult = Seed_IfResult;
	Seed2_IfResult = Constant43;
	Seed3_IfResult = Constant44;
	}
	else
	{
	Seed1_IfResult = Context.MapSpawn.Particles.UniqueID;
	Seed2_IfResult = Context.MapSpawn.Engine.System.TickCount;
	Seed3_IfResult = Seed_IfResult;
	}
	int Constant45 = -1;
	int Constant46 = -1;
	int Constant47 = -1;
	int Seed1_IfResult1;
	int Seed2_IfResult1;
	int Seed3_IfResult1;
	if(Result4)
	{
	Seed1_IfResult1 = Seed1_IfResult;
	Seed2_IfResult1 = Seed2_IfResult;
	Seed3_IfResult1 = Seed3_IfResult;
	}
	else
	{
	Seed1_IfResult1 = Constant45;
	Seed2_IfResult1 = Constant46;
	Seed3_IfResult1 = Constant47;
	}
	NiagaraRandInfo Output1;
	Output1.Seed1 = Seed1_IfResult1;
	Output1.Seed2 = Seed2_IfResult1;
	Output1.Seed3 = Seed3_IfResult1;
	Out_RandomInfo = Output1;
	Out_UseDeterministicRandoms = Result4;
}

void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context)
{
	int Constant35 = (0);
	bool Constant36 = false;
	int Constant37 = 0;
	int Constant38 = (0);
	bool Constant39 = false;
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo;
	bool GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms;
	GetRandomInfo_Emitter_Determinism_false_Func_(In_Seed, Constant35, In_OverrideSeed, Constant37, Constant38, Constant39, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo, GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms, Context);
	float Result5 = In_Max - In_Min;
	int Seed1;
	int Seed2;
	int Seed3;
	Seed1 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo.Seed1;
	Seed2 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo.Seed2;
	Seed3 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo.Seed3;
	float Result6 = rand_float(Result5, Seed1, Seed2, Seed3);
	float Result7 = rand_float(Result5);
	float Random_IfResult;
	if(GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms)
	{
	Random_IfResult = Result6;
	}
	else
	{
	Random_IfResult = Result7;
	}
	float Result8 = In_Min + Random_IfResult;
	Out_Result = Result8;
}

void InitializeParticle_Emitter_Func_(inout FSimulationContext Context)
{
	float Lifetime_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteLifetime)
	{
	Lifetime_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.Lifetime;
	}
	else
	{
	Lifetime_IfResult = Context.MapSpawn.Particles.Lifetime;
	}
	Context.MapSpawn.Particles.Lifetime = Lifetime_IfResult;
	float4 Color_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteColor)
	{
	Color_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.Color;
	}
	else
	{
	Color_IfResult = Context.MapSpawn.Particles.Color;
	}
	Context.MapSpawn.Particles.Color = Color_IfResult;
	float Mass_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteMass)
	{
	Mass_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.Mass;
	}
	else
	{
	Mass_IfResult = Context.MapSpawn.Particles.Mass;
	}
	Context.MapSpawn.Particles.Mass = Mass_IfResult;
	float2 SpriteSize_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteSpriteSize)
	{
	SpriteSize_IfResult = Context.MapSpawn.InitializeParticle.SpriteSize;
	}
	else
	{
	SpriteSize_IfResult = Context.MapSpawn.Particles.SpriteSize;
	}
	Context.MapSpawn.Particles.SpriteSize = SpriteSize_IfResult;
	float SpriteRotation_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteSpriteRotation)
	{
	SpriteRotation_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.SpriteRotation;
	}
	else
	{
	SpriteRotation_IfResult = Context.MapSpawn.Particles.SpriteRotation;
	}
	Context.MapSpawn.Particles.SpriteRotation = SpriteRotation_IfResult;
	float3 Scale_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteScale)
	{
	Scale_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.MeshScale;
	}
	else
	{
	Scale_IfResult = Context.MapSpawn.Particles.Scale;
	}
	Context.MapSpawn.Particles.Scale = Scale_IfResult;
	float3 Scale_IfResult1;
	if(Context.MapSpawn.InitializeParticle.WritePosition)
	{
	Scale_IfResult1 = Context.MapSpawn.InitializeParticle.Position;
	}
	else
	{
	Scale_IfResult1 = Context.MapSpawn.Particles.Position;
	}
	Context.MapSpawn.Particles.Position = Scale_IfResult1;
	float MaterialRandom_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteMaterialRandom)
	{
	MaterialRandom_IfResult = Context.MapSpawn.InitializeParticle.MaterialRandom;
	}
	else
	{
	MaterialRandom_IfResult = Context.MapSpawn.Particles.MaterialRandom;
	}
	Context.MapSpawn.Particles.MaterialRandom = MaterialRandom_IfResult;
}

void SampleStaticMesh_Emitter_Func_(inout FSimulationContext Context)
{
	bool Constant48 = false;
	MeshTriCoordinate RandomTriCoord_EmitterStaticMeshOutput_Coord;
	RandomTriCoord_EmitterStaticMesh(0, RandomTriCoord_EmitterStaticMeshOutput_Coord);
	float3 GetTriTangents_EmitterStaticMeshOutput_Tangent;
	float3 GetTriTangents_EmitterStaticMeshOutput_Binormal;
	float3 GetTriTangents_EmitterStaticMeshOutput_Normal;
	GetTriTangents_EmitterStaticMesh(0, RandomTriCoord_EmitterStaticMeshOutput_Coord, GetTriTangents_EmitterStaticMeshOutput_Tangent, GetTriTangents_EmitterStaticMeshOutput_Binormal, GetTriTangents_EmitterStaticMeshOutput_Normal);
	float3 GetTriPosition_EmitterStaticMeshOutput_Position;
	GetTriPosition_EmitterStaticMesh(0, RandomTriCoord_EmitterStaticMeshOutput_Coord, GetTriPosition_EmitterStaticMeshOutput_Position);
	float3 GetTriPositionAndVelocityWS_EmitterStaticMeshOutput_Position;
	float3 GetTriPositionAndVelocityWS_EmitterStaticMeshOutput_Velocity;
	GetTriPositionAndVelocityWS_EmitterStaticMesh(0, RandomTriCoord_EmitterStaticMeshOutput_Coord, GetTriPositionAndVelocityWS_EmitterStaticMeshOutput_Position, GetTriPositionAndVelocityWS_EmitterStaticMeshOutput_Velocity);
	float3 GetTriTangentsWS_EmitterStaticMeshOutput_Tangent;
	float3 GetTriTangentsWS_EmitterStaticMeshOutput_Binormal;
	float3 GetTriTangentsWS_EmitterStaticMeshOutput_Normal;
	GetTriTangentsWS_EmitterStaticMesh(0, RandomTriCoord_EmitterStaticMeshOutput_Coord, GetTriTangentsWS_EmitterStaticMeshOutput_Tangent, GetTriTangentsWS_EmitterStaticMeshOutput_Binormal, GetTriTangentsWS_EmitterStaticMeshOutput_Normal);
	float3 Tangent_IfResult;
	float3 Normal_IfResult;
	float3 Position_IfResult;
	float3 Velocity_IfResult;
	if(Constant48)
	{
	Tangent_IfResult = GetTriTangents_EmitterStaticMeshOutput_Tangent;
	Normal_IfResult = GetTriTangents_EmitterStaticMeshOutput_Normal;
	Position_IfResult = GetTriPosition_EmitterStaticMeshOutput_Position;
	Velocity_IfResult = GetTriPositionAndVelocityWS_EmitterStaticMeshOutput_Velocity;
	}
	else
	{
	Tangent_IfResult = GetTriTangentsWS_EmitterStaticMeshOutput_Tangent;
	Normal_IfResult = GetTriTangentsWS_EmitterStaticMeshOutput_Normal;
	Position_IfResult = GetTriPositionAndVelocityWS_EmitterStaticMeshOutput_Position;
	Velocity_IfResult = GetTriPositionAndVelocityWS_EmitterStaticMeshOutput_Velocity;
	}
	float4 GetTriColor_EmitterStaticMeshOutput_Color;
	GetTriColor_EmitterStaticMesh(0, RandomTriCoord_EmitterStaticMeshOutput_Coord, GetTriColor_EmitterStaticMeshOutput_Color);
	int Constant49 = 0;
	float2 GetTriUV_EmitterStaticMeshOutput_UV;
	GetTriUV_EmitterStaticMesh(0, RandomTriCoord_EmitterStaticMeshOutput_Coord, Constant49, GetTriUV_EmitterStaticMeshOutput_UV);
	Context.MapSpawn.Particles.SampleStaticMesh.MeshTangent = Tangent_IfResult;
	Context.MapSpawn.Particles.SampleStaticMesh.MeshNormal = Normal_IfResult;
	Context.MapSpawn.Particles.SampleStaticMesh.MeshPosition = Position_IfResult;
	Context.MapSpawn.Particles.SampleStaticMesh.MeshVelocity = Velocity_IfResult;
	Context.MapSpawn.Particles.SampleStaticMesh.MeshColor = GetTriColor_EmitterStaticMeshOutput_Color;
	Context.MapSpawn.Particles.SampleStaticMesh.MeshUV = GetTriUV_EmitterStaticMeshOutput_UV;
	Context.MapSpawn.Particles.SampleStaticMesh.MeshSampleCoord = RandomTriCoord_EmitterStaticMeshOutput_Coord;
}

void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context)
{
	int Constant63 = 0;
	bool Result13 = NiagaraAll(In_SourceSpace == Constant63);
	int Constant64 = 0;
	bool Result14 = NiagaraAll(In_DestinationSpace == Constant64);
	bool Result15 = Result13 && Result14;
	int Constant65 = 1;
	bool Result16 = NiagaraAll(In_SourceSpace == Constant65);
	int Constant66 = 1;
	bool Result17 = NiagaraAll(In_DestinationSpace == Constant66);
	bool Result18 = Result16 && Result17;
	bool Result19 = Result15 || Result18;
	int Constant67 = 2;
	bool Result20 = NiagaraAll(In_SourceSpace == Constant67);
	int Constant68 = 2;
	bool Result21 = NiagaraAll(In_DestinationSpace == Constant68);
	bool Result22 = Result20 && Result21;
	bool Result23 = Result19 || Result22;
	bool Result24 = Result13 && Result21;
	bool Result25 = Result20 && Result14;
	bool Result26 = Result24 || Result25;
	bool Result27 = In_bLocalSpace && Result26;
	bool Result28 = Result23 || Result27;
	bool Result29 = !In_bLocalSpace;
	bool Result30 = Result13 && Result17;
	bool Result31 = Result16 && Result14;
	bool Result32 = Result30 || Result31;
	bool Result33 = Result29 && Result32;
	bool Result34 = Result28 || Result33;
	bool Result35 = In_bLocalSpace && Result30;
	bool Result36 = Result20 && Result17;
	bool Result37 = Result35 || Result36;
	bool Result38 = Result29 && Result25;
	bool Result39 = Result37 || Result38;
	float4x4 Matrix_IfResult1;
	if(Result39)
	{
	Matrix_IfResult1 = In_LocalToWorldTransform;
	}
	else
	{
	Matrix_IfResult1 = In_WorldToLocalTransform;
	}
	Out_bUseOriginal = Result34;
	Out_OutTransform = Matrix_IfResult1;
}

void StaticMeshLocation_TransformPosition_Emitter_Func_(float3 In_InPosition, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant62 = false;
	float4x4 Matrix_IfResult;
	float4x4 Matrix001_IfResult;
	if(In_ApplyScale)
	{
	Matrix_IfResult = Context.MapSpawn.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult = Context.MapSpawn.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult = Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult = Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal;
	float4x4 TransformBase_Func_Output_OutTransform;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult, Matrix001_IfResult, Constant62, TransformBase_Func_Output_bUseOriginal, TransformBase_Func_Output_OutTransform, Context);
	float3 Result40 = mul(float4(In_InPosition,1.0),TransformBase_Func_Output_OutTransform).xyz;
	float3 Vector_IfResult2;
	if(TransformBase_Func_Output_bUseOriginal)
	{
	Vector_IfResult2 = In_InPosition;
	}
	else
	{
	Vector_IfResult2 = Result40;
	}
	Out_OutPosition = Vector_IfResult2;
}

void StaticMeshLocation_Emitter_Func_(inout FSimulationContext Context)
{
	float3 Result9 = Context.MapSpawn.StaticMeshLocation.SampledMeshNormal * Context.MapSpawn.Constants.Emitter.StaticMeshLocation.NormalOffset;
	float3 Result10 = Context.MapSpawn.StaticMeshLocation.SampledMeshPosition + Result9;
	float Result11 = dot(Context.MapSpawn.StaticMeshLocation.SampledMeshNormal,Context.MapSpawn.Constants.Emitter.StaticMeshLocation.WorldAxisConstraint);
	bool Result12 = NiagaraAll(Result11 > Context.MapSpawn.Constants.Emitter.StaticMeshLocation.WorldAxisConstraintThreshold);
	bool Constant55 = true;
	bool bool_IfResult;
	if(Context.MapSpawn.StaticMeshLocation.EnableAxisConstraint)
	{
	bool_IfResult = Result12;
	}
	else
	{
	bool_IfResult = Constant55;
	}
	Context.MapSpawn.OUTPUT_VAR.StaticMeshLocation.Position = Result10;
	Context.MapSpawn.OUTPUT_VAR.StaticMeshLocation.Alive = bool_IfResult;
	bool Constant56 = false;
	bool Constant57 = false;
	int Constant58 = 2;
	int Constant59 = 1;
	int ENiagaraCoordinateSpace_IfResult;
	if(Constant57)
	{
	ENiagaraCoordinateSpace_IfResult = Constant58;
	}
	else
	{
	ENiagaraCoordinateSpace_IfResult = Constant59;
	}
	int Constant60 = 0;
	bool Constant61 = true;
	float3 StaticMeshLocation_TransformPosition_Emitter_Func_Output_OutPosition;
	StaticMeshLocation_TransformPosition_Emitter_Func_(Context.MapSpawn.OUTPUT_VAR.StaticMeshLocation.Position, ENiagaraCoordinateSpace_IfResult, Constant60, Constant61, StaticMeshLocation_TransformPosition_Emitter_Func_Output_OutPosition, Context);
	float3 Result41 = Context.MapSpawn.Particles.Position + StaticMeshLocation_TransformPosition_Emitter_Func_Output_OutPosition;
	float3 Vector_IfResult3;
	if(Constant56)
	{
	Vector_IfResult3 = Result41;
	}
	else
	{
	Vector_IfResult3 = StaticMeshLocation_TransformPosition_Emitter_Func_Output_OutPosition;
	}
	Context.MapSpawn.OUTPUT_VAR.StaticMeshLocation.Position = Vector_IfResult3;
	float3 Vector_IfResult4;
	bool bool_IfResult1;
	if(Context.MapSpawn.StaticMeshLocation.WriteToIntrinsicParameters)
	{
	Vector_IfResult4 = Context.MapSpawn.OUTPUT_VAR.StaticMeshLocation.Position;
	bool_IfResult1 = Context.MapSpawn.OUTPUT_VAR.StaticMeshLocation.Alive;
	}
	else
	{
	Vector_IfResult4 = Context.MapSpawn.Particles.Position;
	bool_IfResult1 = Context.MapSpawn.DataInstance.Alive;
	}
	Context.MapSpawn.Particles.Position = Vector_IfResult4;
	Context.MapSpawn.DataInstance.Alive = bool_IfResult1;
}

void ParticleState_Emitter_Func_(inout FSimulationContext Context)
{
	bool Result42 = NiagaraAll(Context.MapUpdate.Particles.Age <= Context.MapUpdate.Engine.DeltaTime);
	Context.MapUpdate.OUTPUT_VAR.ParticleState.FirstFrame = Result42;
	float Result43 = Context.MapUpdate.Particles.Age + Context.MapUpdate.ParticleState.DeltaTime;
	float Constant69 = 1e-05;
	float Result44 = max(Context.MapUpdate.ParticleState.Lifetime, Constant69);
	float Constant70 = 0.0001;
	float Result45 = Result44 - Constant70;
	bool Result46 = NiagaraAll(Result43 < Result45);
	bool Constant71 = false;
	bool bool_IfResult2;
	if(Result46)
	{
	bool_IfResult2 = Context.MapUpdate.DataInstance.Alive;
	}
	else
	{
	bool_IfResult2 = Constant71;
	}
	float Result47 = Result43 / Result44;
	Context.MapUpdate.DataInstance.Alive = bool_IfResult2;
	Context.MapUpdate.Particles.Age = Result43;
	Context.MapUpdate.Particles.NormalizedAge = Result47;
}

void GravityForce_Emitter_Func_(inout FSimulationContext Context)
{
	float3 Result48 = Context.MapUpdate.Constants.Emitter.GravityForce.Gravity * Context.MapUpdate.Particles.Mass;
	float3 Result49 = Context.MapUpdate.Transient.PhysicsForce + Result48;
	Context.MapUpdate.Transient.PhysicsForce = Result49;
}

void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context)
{
	Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime = Context.MapUpdate.SolveForcesAndVelocity.DeltaTime;
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Context.MapUpdate.SolveForcesAndVelocity.Force;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsForce = Context.MapUpdate.SolveForcesAndVelocity.Force;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.SolveForcesAndVelocity.Velocity;
	Context.MapUpdate.Local.SolveForcesAndVelocity.Mass = Context.MapUpdate.SolveForcesAndVelocity.Mass;
	float Constant81 = 0.0001;
	float Result50 = max(Context.MapUpdate.Local.SolveForcesAndVelocity.Mass, Constant81);
	float Result51 = Reciprocal(Result50);
	float3 Result52 = Result51 * Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce;
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Result52;
	float3 Result53 = Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce * Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime + Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float Constant82 = 0;
	float Result54 = max(Context.MapUpdate.Transient.PhysicsDrag, Constant82);
	float Result55 = Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime * Result54;
	float Constant83 = 1;
	float Result56 = Result55 + Constant83;
	float3 Result57 = Result53 / Result56;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Result57;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsDrag = Context.MapUpdate.Transient.PhysicsDrag;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float3 Result58 = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity * Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime + Context.MapUpdate.SolveForcesAndVelocity.Position;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position = Result58;
	float3 Position_IfResult1;
	float3 Velocity_IfResult1;
	float3 PreviousVelocity_IfResult;
	if(Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	Position_IfResult1 = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position;
	Velocity_IfResult1 = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	PreviousVelocity_IfResult = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	}
	else
	{
	Position_IfResult1 = Context.MapUpdate.SolveForcesAndVelocity.Position;
	Velocity_IfResult1 = Context.MapUpdate.SolveForcesAndVelocity.Velocity;
	PreviousVelocity_IfResult = Context.MapUpdate.SolveForcesAndVelocity.PreviousVelocity;
	}
	Context.MapUpdate.Particles.Position = Position_IfResult1;
	Context.MapUpdate.Particles.Velocity = Velocity_IfResult1;
	Context.MapUpdate.Particles.PreviousVelocity = PreviousVelocity_IfResult;
	float3 Constant84 = float3(0,0,0);
	float Constant85 = 0;
	float3 ForceVector_IfResult;
	float Drag_IfResult;
	if(Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	ForceVector_IfResult = Constant84;
	Drag_IfResult = Constant85;
	}
	else
	{
	ForceVector_IfResult = Context.MapUpdate.Transient.PhysicsForce;
	Drag_IfResult = Context.MapUpdate.Transient.PhysicsDrag;
	}
	Context.MapUpdate.Transient.PhysicsForce = ForceVector_IfResult;
	Context.MapUpdate.Transient.PhysicsDrag = Drag_IfResult;
}

void Vector2DFromCurve001_Emitter_Func_(out float2 Out_Value, inout FSimulationContext Context)
{
	float2 SampleVector2DCurve_EmitterScaleFactorVector2CurveOutput_Value;
	SampleVector2DCurve_EmitterScaleFactorVector2Curve(Context.MapUpdate.Vector2DFromCurve001.CurveIndex, SampleVector2DCurve_EmitterScaleFactorVector2CurveOutput_Value);
	float2 Result59 = SampleVector2DCurve_EmitterScaleFactorVector2CurveOutput_Value * Context.MapUpdate.Constants.Emitter.Vector2DFromCurve001.ScaleCurve;
	Out_Value = Result59;
}

void ScaleSpriteSize_Emitter_Func_(inout FSimulationContext Context)
{
	float2 Result60 = Context.MapUpdate.ScaleSpriteSize.ScaleFactor * Context.MapUpdate.Transient.SpriteSizeScaleFactor;
	float2 Result61 = Context.MapUpdate.ScaleSpriteSize.InitialSpriteSize * Result60;
	Context.MapUpdate.Particles.SpriteSize = Result61;
	Context.MapUpdate.Transient.SpriteSizeScaleFactor = Result60;
}

float GetSpawnInterpolation()
{
	return HackSpawnInterp;
}


void InterpolateParameters(inout FSimulationContext Context)
{
	int InterpSpawn_Index = ExecIndex();
	float InterpSpawn_SpawnTime = Emitter_InterpSpawnStartDt + (Emitter_SpawnInterval * InterpSpawn_Index);
	float InterpSpawn_UpdateTime = Engine_DeltaTime - InterpSpawn_SpawnTime;
	float InterpSpawn_InvSpawnTime = 1.0 / InterpSpawn_SpawnTime;
	float InterpSpawn_InvUpdateTime = 1.0 / InterpSpawn_UpdateTime;
	float SpawnInterp = InterpSpawn_SpawnTime * Engine_InverseDeltaTime ;
	HackSpawnInterp = SpawnInterp;
	Context.MapSpawn.Interpolation.InterpSpawn_Index = InterpSpawn_Index;
	Context.MapSpawn.Interpolation.InterpSpawn_SpawnTime = InterpSpawn_SpawnTime;
	Context.MapSpawn.Interpolation.InterpSpawn_UpdateTime = InterpSpawn_UpdateTime;
	Context.MapSpawn.Interpolation.InterpSpawn_InvSpawnTime = InterpSpawn_InvSpawnTime;
	Context.MapSpawn.Interpolation.InterpSpawn_InvUpdateTime = InterpSpawn_InvUpdateTime;
	Context.MapSpawn.Interpolation.SpawnInterp = SpawnInterp;
	Context.MapSpawn.Interpolation.Emitter_SpawnInterval = Emitter_SpawnInterval;
	Context.MapSpawn.Interpolation.Emitter_InterpSpawnStartDt = Emitter_InterpSpawnStartDt;
	Context.MapSpawn.Interpolation.Emitter_SpawnGroup = Emitter_SpawnGroup;
	Context.MapSpawn.Engine.Time = lerp(PREV_Engine_Time, Engine_Time, SpawnInterp);
	Context.MapSpawn.Engine.RealTime = lerp(PREV_Engine_RealTime, Engine_RealTime, SpawnInterp);
	Context.MapSpawn.Engine.Owner.TimeSinceRendered = lerp(PREV_Engine_Owner_TimeSinceRendered, Engine_Owner_TimeSinceRendered, SpawnInterp);
	Context.MapSpawn.Engine.Owner.LODDistance = lerp(PREV_Engine_Owner_LODDistance, Engine_Owner_LODDistance, SpawnInterp);
	Context.MapSpawn.Engine.Owner.LODDistanceFraction = lerp(PREV_Engine_Owner_LODDistanceFraction, Engine_Owner_LODDistanceFraction, SpawnInterp);
	Context.MapSpawn.Engine.System.Age = lerp(PREV_Engine_System_Age, Engine_System_Age, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Rotation = lerp(PREV_Engine_Owner_Rotation, Engine_Owner_Rotation, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Position = lerp(PREV_Engine_Owner_Position.xyz, Engine_Owner_Position.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Velocity = lerp(PREV_Engine_Owner_Velocity.xyz, Engine_Owner_Velocity.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemXAxis = lerp(PREV_Engine_Owner_SystemXAxis.xyz, Engine_Owner_SystemXAxis.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemYAxis = lerp(PREV_Engine_Owner_SystemYAxis.xyz, Engine_Owner_SystemYAxis.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemZAxis = lerp(PREV_Engine_Owner_SystemZAxis.xyz, Engine_Owner_SystemZAxis.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Scale = lerp(PREV_Engine_Owner_Scale.xyz, Engine_Owner_Scale.xyz, SpawnInterp);
	Context.MapSpawn.Emitter.Age = lerp(PREV_Emitter_Age, Emitter_Age, SpawnInterp);
	Context.MapSpawn.Engine.DeltaTime = 0.0f;
	Context.MapSpawn.Engine.InverseDeltaTime = 0.0f;
	Context.MapUpdate.Engine.DeltaTime = InterpSpawn_UpdateTime;
	Context.MapUpdate.Engine.InverseDeltaTime = InterpSpawn_InvUpdateTime;
}

void ReadDataSets(inout FSimulationContext Context)
{
}

void WriteDataSets(inout FSimulationContext Context)
{
}

void SimulateMapSpawn(inout FSimulationContext Context)
{


	float Constant = 0;
	Context.MapSpawn.Particles.NormalizedAge = Constant;
	float Constant1 = 1;
	Context.MapSpawn.Particles.Lifetime = Constant1;
	float4 Constant2 = float4(1,1,1,1);
	Context.MapSpawn.Particles.Color = Constant2;
	float Constant3 = 1;
	Context.MapSpawn.Particles.Mass = Constant3;
	float2 Constant4 = float2(10,10);
	Context.MapSpawn.Particles.SpriteSize = Constant4;
	float Constant5 = 0;
	Context.MapSpawn.Particles.SpriteRotation = Constant5;
	float3 Constant6 = float3(1,1,1);
	Context.MapSpawn.Particles.Scale = Constant6;
	float Constant7 = 0;
	Context.MapSpawn.Particles.MaterialRandom = Constant7;
	float3 Constant8 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.SampleStaticMesh.MeshTangent = Constant8;
	float3 Constant9 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.SampleStaticMesh.MeshNormal = Constant9;
	float3 Constant10 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.SampleStaticMesh.MeshPosition = Constant10;
	float3 Constant11 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.SampleStaticMesh.MeshVelocity = Constant11;
	float4 Constant12 = float4(1.0, 1.0, 1.0, 1.0);
	Context.MapSpawn.Particles.SampleStaticMesh.MeshColor = Constant12;
	float2 Constant13 = float2(0.0, 0.0);
	Context.MapSpawn.Particles.SampleStaticMesh.MeshUV = Constant13;
	MeshTriCoordinate Constant14 = (MeshTriCoordinate)0;
	Context.MapSpawn.Particles.SampleStaticMesh.MeshSampleCoord = Constant14;
	float Constant15 = 0;
	Context.MapSpawn.Particles.Age = Constant15;
	float3 Constant16 = float3(0,0,0);
	Context.MapSpawn.Particles.Velocity = Constant16;

	bool Constant17 = true;
	bool Constant18 = true;
	bool Constant19 = false;
	bool Constant20 = false;
	float3 ParticleOwnerPosition_Emitter_Func_Output_OutPosition;
	ParticleOwnerPosition_Emitter_Func_(ParticleOwnerPosition_Emitter_Func_Output_OutPosition, Context);
	bool Constant23 = true;
	bool Constant24 = false;
	Context.MapSpawn.Vector2DFromCurve.CurveIndex = Context.MapSpawn.Particles.NormalizedAge;
	float2 Vector2DFromCurve_Emitter_Func_Output_Value;
	Vector2DFromCurve_Emitter_Func_(Vector2DFromCurve_Emitter_Func_Output_Value, Context);
	Context.MapSpawn.InitializeParticle.WriteSpriteSize = Constant17;
	Context.MapSpawn.InitializeParticle.WriteColor = Constant18;
	Context.MapSpawn.InitializeParticle.WritePosition = Constant19;
	Context.MapSpawn.InitializeParticle.Position = ParticleOwnerPosition_Emitter_Func_Output_OutPosition;
	Context.MapSpawn.InitializeParticle.WriteMass = Constant23;
	Context.MapSpawn.InitializeParticle.WriteSpriteRotation = Constant24;
	Context.MapSpawn.InitializeParticle.SpriteSize = Vector2DFromCurve_Emitter_Func_Output_Value;
	bool Constant25 = true;
	Context.MapSpawn.InitializeParticle.WriteLifetime = Constant25;
	bool Constant26 = false;
	Context.MapSpawn.InitializeParticle.WriteScale = Constant26;
	float3 InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition;
	InitializeParticle_SimulationPosition_Emitter_Func_(InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition, Context);
	Context.MapSpawn.Particles.Position = InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition;
	bool Constant29 = true;
	Context.MapSpawn.InitializeParticle.WriteMaterialRandom = Constant29;
	float Constant30 = 0;
	float Constant31 = 1;
	int Constant32 = -1;
	int Constant33 = 0;
	bool Constant34 = false;
	float RandomRangeFloat_Func_Output_Result;
	RandomRangeFloat_Func_(Constant30, Constant31, Constant32, Constant33, Constant34, RandomRangeFloat_Func_Output_Result, Context);
	Context.MapSpawn.InitializeParticle.MaterialRandom = RandomRangeFloat_Func_Output_Result;
	EnterStatScope(1 );
	InitializeParticle_Emitter_Func_(Context);
	ExitStatScope( );
	EnterStatScope(2 );
	SampleStaticMesh_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapSpawn.StaticMeshLocation.SampledMeshPosition = Context.MapSpawn.Particles.SampleStaticMesh.MeshPosition;
	Context.MapSpawn.StaticMeshLocation.SampledMeshNormal = Context.MapSpawn.Particles.SampleStaticMesh.MeshNormal;
	bool Constant50 = false;
	Context.MapSpawn.StaticMeshLocation.EnableAxisConstraint = Constant50;
	float3 Constant51 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.OUTPUT_VAR.StaticMeshLocation.Position = Constant51;
	bool Constant52 = (false);
	Context.MapSpawn.OUTPUT_VAR.StaticMeshLocation.Alive = Constant52;
	bool Constant53 = true;
	Context.MapSpawn.StaticMeshLocation.WriteToIntrinsicParameters = Constant53;
	bool Constant54 = true;
	Context.MapSpawn.DataInstance.Alive = Constant54;
	EnterStatScope(3 );
	StaticMeshLocation_Emitter_Func_(Context);
	ExitStatScope( );




	Context.MapSpawn.Particles.PreviousVelocity = Context.MapSpawn.Particles.Velocity;
	Context.MapSpawn.Particles.Initial.SpriteSize = Context.MapSpawn.Particles.SpriteSize;




}
void SimulateMapUpdate(inout FSimulationContext Context)
{

	Context.MapUpdate.ParticleState.DeltaTime = Context.MapUpdate.Engine.DeltaTime;
	Context.MapUpdate.ParticleState.Lifetime = Context.MapUpdate.Particles.Lifetime;
	EnterStatScope(4 );
	ParticleState_Emitter_Func_(Context);
	ExitStatScope( );
	float3 Constant72 = float3(0,0,0);
	Context.MapUpdate.Transient.PhysicsForce = Constant72;
	EnterStatScope(5 );
	GravityForce_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapUpdate.Transient.PhysicsDeltaTime = Context.MapUpdate.Engine.DeltaTime;
	Context.MapUpdate.SolveForcesAndVelocity.DeltaTime = Context.MapUpdate.Transient.PhysicsDeltaTime;
	float Constant73 = (0.0);
	Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime = Constant73;
	Context.MapUpdate.SolveForcesAndVelocity.Force = Context.MapUpdate.Transient.PhysicsForce;
	Context.MapUpdate.SolveForcesAndVelocity.Velocity = Context.MapUpdate.Particles.Velocity;
	Context.MapUpdate.SolveForcesAndVelocity.Mass = Context.MapUpdate.Particles.Mass;
	float3 Constant74 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Constant74;
	float3 Constant75 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Constant75;
	float Constant76 = (0.0);
	Context.MapUpdate.Local.SolveForcesAndVelocity.Mass = Constant76;
	float Constant77 = 0;
	Context.MapUpdate.Transient.PhysicsDrag = Constant77;
	Context.MapUpdate.SolveForcesAndVelocity.PreviousVelocity = Context.MapUpdate.Particles.PreviousVelocity;
	bool Constant78 = false;
	Context.MapUpdate.SolveForcesAndVelocity.Position = Context.MapUpdate.Particles.Position;
	float3 Constant79 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position = Constant79;
	bool Constant80 = true;
	Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties = Constant80;
	EnterStatScope(6 );
	SolveForcesAndVelocity_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapUpdate.Vector2DFromCurve001.CurveIndex = Context.MapUpdate.Particles.NormalizedAge;
	float2 Vector2DFromCurve001_Emitter_Func_Output_Value;
	Vector2DFromCurve001_Emitter_Func_(Vector2DFromCurve001_Emitter_Func_Output_Value, Context);
	Context.MapUpdate.ScaleSpriteSize.ScaleFactor = Vector2DFromCurve001_Emitter_Func_Output_Value;
	Context.MapUpdate.ScaleSpriteSize.InitialSpriteSize = Context.MapUpdate.Particles.Initial.SpriteSize;
	float2 Constant86 = float2(1,1);
	Context.MapUpdate.Transient.SpriteSizeScaleFactor = Constant86;
	EnterStatScope(7 );
	ScaleSpriteSize_Emitter_Func_(Context);
	ExitStatScope( );



}
void SimulateMain()
{
EnterStatScope(8 );

	FSimulationContext Context = (FSimulationContext)0;
	Context.MapSpawn.Particles.Age = 0.0f;
	Context.MapSpawn.Particles.Color.r = 0.0f;
	Context.MapSpawn.Particles.Color.g = 0.0f;
	Context.MapSpawn.Particles.Color.b = 0.0f;
	Context.MapSpawn.Particles.Color.a = 0.0f;
	Context.MapSpawn.Particles.Initial.SpriteSize.x = 0.0f;
	Context.MapSpawn.Particles.Initial.SpriteSize.y = 0.0f;
	Context.MapSpawn.Particles.Lifetime = 0.0f;
	Context.MapSpawn.Particles.Mass = 0.0f;
	Context.MapSpawn.Particles.MaterialRandom = 0.0f;
	Context.MapSpawn.Particles.NormalizedAge = 0.0f;
	Context.MapSpawn.Particles.Position.x = 0.0f;
	Context.MapSpawn.Particles.Position.y = 0.0f;
	Context.MapSpawn.Particles.Position.z = 0.0f;
	Context.MapSpawn.Particles.PreviousVelocity.x = 0.0f;
	Context.MapSpawn.Particles.PreviousVelocity.y = 0.0f;
	Context.MapSpawn.Particles.PreviousVelocity.z = 0.0f;
	Context.MapSpawn.Particles.SampleStaticMesh.MeshColor.r = 0.0f;
	Context.MapSpawn.Particles.SampleStaticMesh.MeshColor.g = 0.0f;
	Context.MapSpawn.Particles.SampleStaticMesh.MeshColor.b = 0.0f;
	Context.MapSpawn.Particles.SampleStaticMesh.MeshColor.a = 0.0f;
	Context.MapSpawn.Particles.SampleStaticMesh.MeshNormal.x = 0.0f;
	Context.MapSpawn.Particles.SampleStaticMesh.MeshNormal.y = 0.0f;
	Context.MapSpawn.Particles.SampleStaticMesh.MeshNormal.z = 0.0f;
	Context.MapSpawn.Particles.SampleStaticMesh.MeshPosition.x = 0.0f;
	Context.MapSpawn.Particles.SampleStaticMesh.MeshPosition.y = 0.0f;
	Context.MapSpawn.Particles.SampleStaticMesh.MeshPosition.z = 0.0f;
	Context.MapSpawn.Particles.SampleStaticMesh.MeshSampleCoord.Tri = 0;
	Context.MapSpawn.Particles.SampleStaticMesh.MeshSampleCoord.BaryCoord.x = 0.0f;
	Context.MapSpawn.Particles.SampleStaticMesh.MeshSampleCoord.BaryCoord.y = 0.0f;
	Context.MapSpawn.Particles.SampleStaticMesh.MeshSampleCoord.BaryCoord.z = 0.0f;
	Context.MapSpawn.Particles.SampleStaticMesh.MeshTangent.x = 0.0f;
	Context.MapSpawn.Particles.SampleStaticMesh.MeshTangent.y = 0.0f;
	Context.MapSpawn.Particles.SampleStaticMesh.MeshTangent.z = 0.0f;
	Context.MapSpawn.Particles.SampleStaticMesh.MeshUV.x = 0.0f;
	Context.MapSpawn.Particles.SampleStaticMesh.MeshUV.y = 0.0f;
	Context.MapSpawn.Particles.SampleStaticMesh.MeshVelocity.x = 0.0f;
	Context.MapSpawn.Particles.SampleStaticMesh.MeshVelocity.y = 0.0f;
	Context.MapSpawn.Particles.SampleStaticMesh.MeshVelocity.z = 0.0f;
	Context.MapSpawn.Particles.Scale.x = 0.0f;
	Context.MapSpawn.Particles.Scale.y = 0.0f;
	Context.MapSpawn.Particles.Scale.z = 0.0f;
	Context.MapSpawn.Particles.SpriteRotation = 0.0f;
	Context.MapSpawn.Particles.SpriteSize.x = 0.0f;
	Context.MapSpawn.Particles.SpriteSize.y = 0.0f;
	Context.MapSpawn.Particles.UniqueID = 0;
	Context.MapSpawn.Particles.Velocity.x = 0.0f;
	Context.MapSpawn.Particles.Velocity.y = 0.0f;
	Context.MapSpawn.Particles.Velocity.z = 0.0f;
	Context.MapSpawn.Particles.UniqueID = Engine_Emitter_TotalSpawnedParticles + ExecIndex();
	Context.MapSpawn.Engine.Owner.Position = Engine_Owner_Position.xyz;
	Context.MapSpawn.Constants.Emitter.Vector2DFromCurve.ScaleCurve = Constants_Emitter_Vector2DFromCurve_ScaleCurve;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.Lifetime = Constants_Emitter_InitializeParticle_Lifetime;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.Color = Constants_Emitter_InitializeParticle_Color;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.Mass = Constants_Emitter_InitializeParticle_Mass;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.SpriteRotation = Constants_Emitter_InitializeParticle_SpriteRotation;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.MeshScale = Constants_Emitter_InitializeParticle_MeshScale;
	Context.MapSpawn.Emitter.RandomSeed = Emitter_RandomSeed;
	Context.MapSpawn.Engine.System.TickCount = Engine_System_TickCount;
	Context.MapSpawn.Constants.Emitter.StaticMeshLocation.NormalOffset = Constants_Emitter_StaticMeshLocation_NormalOffset;
	Context.MapSpawn.Constants.Emitter.StaticMeshLocation.WorldAxisConstraint = Constants_Emitter_StaticMeshLocation_WorldAxisConstraint;
	Context.MapSpawn.Constants.Emitter.StaticMeshLocation.WorldAxisConstraintThreshold = Constants_Emitter_StaticMeshLocation_WorldAxisConstraintThreshold;
	Context.MapSpawn.Engine.Owner.SystemLocalToWorld = Engine_Owner_SystemLocalToWorld;
	Context.MapSpawn.Engine.Owner.SystemWorldToLocal = Engine_Owner_SystemWorldToLocal;
	Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale = Engine_Owner_SystemLocalToWorldNoScale;
	Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale = Engine_Owner_SystemWorldToLocalNoScale;
	Context.MapUpdate.Engine.DeltaTime = Engine_DeltaTime;
	Context.MapUpdate.Constants.Emitter.GravityForce.Gravity = Constants_Emitter_GravityForce_Gravity;
	Context.MapUpdate.Constants.Emitter.SolveForcesAndVelocity.SpeedLimit = Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	Context.MapUpdate.Constants.Emitter.SolveForcesAndVelocity.AccelerationLimit = Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	Context.MapUpdate.Engine.Owner.Position = Engine_Owner_Position.xyz;
	Context.MapUpdate.Constants.Emitter.Vector2DFromCurve001.ScaleCurve = Constants_Emitter_Vector2DFromCurve001_ScaleCurve;
	Context.MapUpdate.Engine.Time = Engine_Time;
	Context.MapUpdate.Engine.InverseDeltaTime = Engine_InverseDeltaTime;
	Context.MapUpdate.Engine.ExecutionCount = Engine_ExecutionCount;
	Context.MapUpdate.Emitter.SpawnRate = Emitter_SpawnRate;
	Context.MapUpdate.Emitter.SpawnInterval = Emitter_SpawnInterval;
	Context.MapUpdate.Emitter.InterpSpawnStartDt = Emitter_InterpSpawnStartDt;
	Context.MapUpdate.Emitter.SpawnGroup = Emitter_SpawnGroup;
	Context.MapUpdate.Engine.Emitter.TotalSpawnedParticles = Engine_Emitter_TotalSpawnedParticles;
	Context.MapUpdate.Emitter.RandomSeed = Emitter_RandomSeed;
	ReadDataSets(Context);
	InterpolateParameters(Context);
	SimulateMapSpawn(Context);

	Context.MapUpdate.Particles = Context.MapSpawn.Particles;
		Context.MapUpdate.DataInstance = Context.MapSpawn.DataInstance;


	SimulateMapUpdate(Context);
	WriteDataSets(Context);
	{
	bool bValid = Context.MapUpdate.DataInstance.Alive;
	int TmpWriteIndex = OutputIndex(0, true, bValid);
	OutputDataFloat(0, 0, TmpWriteIndex, Context.MapUpdate.Particles.Age);
	OutputDataFloat(0, 1, TmpWriteIndex, Context.MapUpdate.Particles.Color.r);
	OutputDataFloat(0, 2, TmpWriteIndex, Context.MapUpdate.Particles.Color.g);
	OutputDataFloat(0, 3, TmpWriteIndex, Context.MapUpdate.Particles.Color.b);
	OutputDataFloat(0, 4, TmpWriteIndex, Context.MapUpdate.Particles.Color.a);
	OutputDataFloat(0, 5, TmpWriteIndex, Context.MapUpdate.Particles.Initial.SpriteSize.x);
	OutputDataFloat(0, 6, TmpWriteIndex, Context.MapUpdate.Particles.Initial.SpriteSize.y);
	OutputDataFloat(0, 7, TmpWriteIndex, Context.MapUpdate.Particles.Lifetime);
	OutputDataFloat(0, 8, TmpWriteIndex, Context.MapUpdate.Particles.Mass);
	OutputDataFloat(0, 9, TmpWriteIndex, Context.MapUpdate.Particles.MaterialRandom);
	OutputDataFloat(0, 10, TmpWriteIndex, Context.MapUpdate.Particles.NormalizedAge);
	OutputDataFloat(0, 11, TmpWriteIndex, Context.MapUpdate.Particles.Position.x);
	OutputDataFloat(0, 12, TmpWriteIndex, Context.MapUpdate.Particles.Position.y);
	OutputDataFloat(0, 13, TmpWriteIndex, Context.MapUpdate.Particles.Position.z);
	OutputDataFloat(0, 14, TmpWriteIndex, Context.MapUpdate.Particles.PreviousVelocity.x);
	OutputDataFloat(0, 15, TmpWriteIndex, Context.MapUpdate.Particles.PreviousVelocity.y);
	OutputDataFloat(0, 16, TmpWriteIndex, Context.MapUpdate.Particles.PreviousVelocity.z);
	OutputDataFloat(0, 17, TmpWriteIndex, Context.MapUpdate.Particles.SampleStaticMesh.MeshColor.r);
	OutputDataFloat(0, 18, TmpWriteIndex, Context.MapUpdate.Particles.SampleStaticMesh.MeshColor.g);
	OutputDataFloat(0, 19, TmpWriteIndex, Context.MapUpdate.Particles.SampleStaticMesh.MeshColor.b);
	OutputDataFloat(0, 20, TmpWriteIndex, Context.MapUpdate.Particles.SampleStaticMesh.MeshColor.a);
	OutputDataFloat(0, 21, TmpWriteIndex, Context.MapUpdate.Particles.SampleStaticMesh.MeshNormal.x);
	OutputDataFloat(0, 22, TmpWriteIndex, Context.MapUpdate.Particles.SampleStaticMesh.MeshNormal.y);
	OutputDataFloat(0, 23, TmpWriteIndex, Context.MapUpdate.Particles.SampleStaticMesh.MeshNormal.z);
	OutputDataFloat(0, 24, TmpWriteIndex, Context.MapUpdate.Particles.SampleStaticMesh.MeshPosition.x);
	OutputDataFloat(0, 25, TmpWriteIndex, Context.MapUpdate.Particles.SampleStaticMesh.MeshPosition.y);
	OutputDataFloat(0, 26, TmpWriteIndex, Context.MapUpdate.Particles.SampleStaticMesh.MeshPosition.z);
	OutputDataInt(0, 27, TmpWriteIndex, Context.MapUpdate.Particles.SampleStaticMesh.MeshSampleCoord.Tri);
	OutputDataFloat(0, 28, TmpWriteIndex, Context.MapUpdate.Particles.SampleStaticMesh.MeshSampleCoord.BaryCoord.x);
	OutputDataFloat(0, 29, TmpWriteIndex, Context.MapUpdate.Particles.SampleStaticMesh.MeshSampleCoord.BaryCoord.y);
	OutputDataFloat(0, 30, TmpWriteIndex, Context.MapUpdate.Particles.SampleStaticMesh.MeshSampleCoord.BaryCoord.z);
	OutputDataFloat(0, 31, TmpWriteIndex, Context.MapUpdate.Particles.SampleStaticMesh.MeshTangent.x);
	OutputDataFloat(0, 32, TmpWriteIndex, Context.MapUpdate.Particles.SampleStaticMesh.MeshTangent.y);
	OutputDataFloat(0, 33, TmpWriteIndex, Context.MapUpdate.Particles.SampleStaticMesh.MeshTangent.z);
	OutputDataFloat(0, 34, TmpWriteIndex, Context.MapUpdate.Particles.SampleStaticMesh.MeshUV.x);
	OutputDataFloat(0, 35, TmpWriteIndex, Context.MapUpdate.Particles.SampleStaticMesh.MeshUV.y);
	OutputDataFloat(0, 36, TmpWriteIndex, Context.MapUpdate.Particles.SampleStaticMesh.MeshVelocity.x);
	OutputDataFloat(0, 37, TmpWriteIndex, Context.MapUpdate.Particles.SampleStaticMesh.MeshVelocity.y);
	OutputDataFloat(0, 38, TmpWriteIndex, Context.MapUpdate.Particles.SampleStaticMesh.MeshVelocity.z);
	OutputDataFloat(0, 39, TmpWriteIndex, Context.MapUpdate.Particles.Scale.x);
	OutputDataFloat(0, 40, TmpWriteIndex, Context.MapUpdate.Particles.Scale.y);
	OutputDataFloat(0, 41, TmpWriteIndex, Context.MapUpdate.Particles.Scale.z);
	OutputDataFloat(0, 42, TmpWriteIndex, Context.MapUpdate.Particles.SpriteRotation);
	OutputDataFloat(0, 43, TmpWriteIndex, Context.MapUpdate.Particles.SpriteSize.x);
	OutputDataFloat(0, 44, TmpWriteIndex, Context.MapUpdate.Particles.SpriteSize.y);
	OutputDataInt(0, 45, TmpWriteIndex, Context.MapUpdate.Particles.UniqueID);
	OutputDataFloat(0, 46, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.x);
	OutputDataFloat(0, 47, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.y);
	OutputDataFloat(0, 48, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.z);
	}
ExitStatScope( );
}
#line 703 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"

#if 0 /*BEGIN_RESOURCE_TABLES*/
NULL, 0
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
