#line 1 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 6 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#pragma warning(disable:4008)
#line 7 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Public/Platform.ush"
#line 9 "/Engine/Public/Platform.ush"
#line 1 "FP16Math.ush"
#line 10 "/Engine/Public/Platform.ush"
#line 43 "/Engine/Public/Platform.ush"
#line 1 "ShaderVersion.ush"
#line 44 "/Engine/Public/Platform.ush"
#line 595 "/Engine/Public/Platform.ush"
float min3( float a, float b, float c )
{
	return min( a, min( b, c ) );
}

float max3( float a, float b, float c )
{
	return max( a, max( b, c ) );
}

float2 min3( float2 a, float2 b, float2 c )
{
	return float2(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y )
	);
}

float2 max3( float2 a, float2 b, float2 c )
{
	return float2(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y )
	);
}

float3 max3( float3 a, float3 b, float3 c )
{
	return float3(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z )
	);
}

float3 min3( float3 a, float3 b, float3 c )
{
	return float3(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z )
	);
}

float4 min3( float4 a, float4 b, float4 c )
{
	return float4(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z ),
		min3( a.w, b.w, c.w )
	);
}

float4 max3( float4 a, float4 b, float4 c )
{
	return float4(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z ),
		max3( a.w, b.w, c.w )
	);
}




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }
#line 8 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"






	const static float PI = 3.1415926535897932f;

	const static float TWO_PI = 3.1415926535897932f*2.0f;
#line 18 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Private/Definitions.usf"
#line 19 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"


float4 ModuloPrecise(float4 x, float4 y){ return x - y * trunc(x/y); }
float3 ModuloPrecise(float3 x, float3 y){ return x - y * trunc(x/y); }
float2 ModuloPrecise(float2 x, float2 y){ return x - y * trunc(x/y);}
float ModuloPrecise(float x, float y){ return x - y * trunc(x/y); }
int ModuloPrecise(int x, int y){ return x - y * (x/y); }
int Modulo(int x, int y){ return x - y * (x/y); }



float4 Reciprocal(float4 x){ return 1.0f/x;}
float3 Reciprocal(float3 x){ return 1.0f/x; }
float2 Reciprocal(float2 x){ return 1.0f/x;}
float Reciprocal(float x){ return 1.0f/x; }



bool NiagaraAll(bool b) { return b; }
bool NiagaraAny(bool b) { return b; }









bool NiagaraAll(bool2 b) { return b.x && b.y; }
bool NiagaraAll(bool3 b) { return b.x && b.y && b.z; }
bool NiagaraAll(bool4 b) { return b.x && b.y && b.z && b.w; }
bool NiagaraAny(bool2 b) { return b.x || b.y; }
bool NiagaraAny(bool3 b) { return b.x || b.y || b.z; }
bool NiagaraAny(bool4 b) { return b.x || b.y || b.z || b.w; }
#line 193 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
float4 rand4(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int4 v = int4(Seed4, Seed1, Seed2, Seed3) * 1664525 + 1013904223;

	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;






	return float4((v >> 8) & 0x00ffffff) / 16777216.0;

}







float3 rand3(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int3 v = int3(Seed1, Seed2, Seed4 | (Seed3 << 16)) * 1664525 + 1013904223;

	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return float3((v >> 8) & 0x00ffffff) / 16777216.0;
}


static int RandomCounterDeterministic = 0;


float rand(float x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * x;
}


float2 rand(float2 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xy * x;
}


float3 rand(float3 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyz * x;
}


float4 rand(float4 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand4(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyzw * x;
}


int rand(int x, int Seed1, int Seed2, int Seed3)
{


	RandomCounterDeterministic += 1;
	return int(rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * (x+1));
}
#line 323 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float rand(float x);

	float2 rand(float2 x)
	{
		return float2(rand(x.x), rand(x.y));
	}

	float3 rand(float3 x)
	{
		return float3(rand(x.x), rand(x.y), rand(x.z));
	}

	float4 rand(float4 x)
	{
		return float4(rand(x.x), rand(x.y), rand(x.z), rand(x.w));
	}

	int rand(int x);



float rand_float(float x)
{
	return rand(x.x);
}

float2 rand_float(float2 x)
{
	return float2(rand_float(x.x), rand_float(x.y));
}

float3 rand_float(float3 x)
{
	return float3(rand_float(x.x), rand_float(x.y), rand_float(x.z));
}

float4 rand_float(float4 x)
{
	return float4(rand_float(x.x), rand_float(x.y), rand_float(x.z), rand_float(x.w));
}

int rand_int(int x)
{



	return rand_float(x.x);
}


float rand_float(float x, int Seed1, int Seed2, int Seed3)
{
	return rand(x.x, Seed1, Seed2, Seed3);
}

float2 rand_float(float2 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float3 rand_float(float3 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float4 rand_float(float4 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

int rand_int(int x, int Seed1, int Seed2, int Seed3)
{


	return rand(x.x-1, Seed1, Seed2, Seed3);
}
#line 405 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float noise(float x);
	float noise(float2 x);
	float noise(float3 x);



	float4 Modulo(float4 x, float4 y);
	float3 Modulo(float3 x, float3 y);
	float2 Modulo(float2 x, float2 y);
	float Modulo(float x, float y);


	int ExecIndex();



	int AcquireIndex(int DataSetID, bool DoAcquire);

	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag);
	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex);

	float InputDataFloat(int DataSetIndex, int RegisterIdx);
	int InputDataInt(int DataSetIndex, int RegisterIdx);
	bool InputDataBool(int DataSetIndex, int RegisterIdx);

	float InputDataNoadvanceFloat(int DataSetIndex, int RegisterIdx);
	int InputDataNoadvanceInt(int DataSetIndex, int RegisterIdx);
	bool InputDataNoadvanceBool(int DataSetIndex, int RegisterIdx);

	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);
	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value);
	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value);
#line 683 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int OutputIndex(const int DataSetID, const bool bStageKillsParticles, const bool bIsValid)
	{
#line 698 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
			return AcquireIndex(DataSetID, bIsValid);
	}
#line 702 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Generated/NiagaraEmitterInstance.ush"




struct NiagaraRandInfo
{
	int Seed1;
	int Seed2;
	int Seed3;
};

struct NiagaraID
{
	int Index;
	int AcquireTag;
};

cbuffer FNiagaraGlobalParameters
{
	float Engine_DeltaTime;
	float Engine_InverseDeltaTime;
	float Engine_Time;
	float Engine_RealTime;
}

cbuffer FNiagaraSystemParameters
{
	float Engine_Owner_TimeSinceRendered;
	float Engine_Owner_LODDistance;
	float Engine_Owner_LODDistanceFraction;
	float Engine_System_Age;
	int Engine_Owner_ExecutionState;
	int Engine_System_TickCount;
	int Engine_System_NumEmitters;
	int Engine_System_NumEmittersAlive;
}

cbuffer FNiagaraOwnerParameters
{
	float4x4 Engine_Owner_SystemLocalToWorld;
	float4x4 Engine_Owner_SystemWorldToLocal;
	float4x4 Engine_Owner_SystemLocalToWorldTransposed;
	float4x4 Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 Engine_Owner_SystemWorldToLocalNoScale;
	float4 Engine_Owner_Rotation;
	float4 Engine_Owner_Position;
	float4 Engine_Owner_Velocity;
	float4 Engine_Owner_SystemXAxis;
	float4 Engine_Owner_SystemYAxis;
	float4 Engine_Owner_SystemZAxis;
	float4 Engine_Owner_Scale;
}

cbuffer FNiagaraEmitterParameters
{
	int Engine_Emitter_NumParticles;
	int Engine_Emitter_TotalSpawnedParticles;
	float Engine_Emitter_SpawnCountScale;
	float Emitter_Age;
	int Emitter_RandomSeed;
	int Engine_Emitter_PaddingInt32_0;
	int Engine_Emitter_PaddingInt32_1;
	int Engine_Emitter_PaddingInt32_2;
}

cbuffer FNiagaraExternalParameters
{
	float Constants_Emitter_FloatFromCurve002_ScaleCurve;
	float Constants_Emitter_Drag_RotationalDrag;
	float Constants_Emitter_FloatFromCurve001_ScaleCurve;
	int Constants_Emitter_CurlNoiseForce_RandomSeed;
	float Constants_Emitter_CurlNoiseForce_NoiseFrequency;
	float3 Constants_Emitter_CurlNoiseForce_PanNoiseField;
	float Constants_Emitter_CurlNoiseForce_CurlNoiseConeMaskAngle;
	float Constants_Emitter_CurlNoiseForce_CurlNoiseConeMaskFalloffAngle;
	float3 Constants_Emitter_UniformRangedVector_Minimum;
	float3 Constants_Emitter_UniformRangedVector_Maximum;
	int Constants_Emitter_UniformRangedVector_RandomSeed;
	float3 Constants_Emitter_AddVelocity_ScaleAddedVelocity;
	float3 Constants_Emitter_AddVelocityFromPoint_OriginOffset;
	float Constants_Emitter_AddVelocityFromPoint_VelocityFalloffDistance;
	float Constants_Emitter_AddVelocityFromPoint_VelocityStrength;
	float Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	float Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	float Constants_Emitter_FloatFromCurve_ScaleCurve;
	float3 Constants_Emitter_ScaleColor_ScaleRGB;
	float3 Constants_Emitter_Color_ScaleColor;
	float Constants_Emitter_Color_ScaleAlpha;
	float Emitter_AlphaScale;
}

struct FParamMap0_UniformRangedVector
{
	bool FixedRandomSeed;
	float3 Maximum;
	float3 Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_Transient
{
	float4 ParticleColorScaleFactor;
	float PhysicsDeltaTime;
	float PhysicsDrag;
	float3 PhysicsForce;
	float PhysicsRotationalDrag;
};

struct FParamMap0_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float DeltaTime;
	float3 Force;
	float Mass;
	float3 Position;
	float3 PreviousVelocity;
	float SpeedLimit;
	float3 Velocity;
	bool WritetoIntrinsicProperties;
};

struct FParamMap0_ScaleColor
{
	float4 ColorValueToScale;
	float ScaleAlpha;
	float3 ScaleRGB;
};

struct FParamMap0_Particles_Initial
{
	float4 Color;
};

struct FParamMap0_Particles
{
	float4 Color;
	FParamMap0_Particles_Initial Initial;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float NormalizedAge;
	float3 Position;
	float3 PreviousVelocity;
	float3 Scale;
	float SpriteRotation;
	float2 SpriteSize;
	int UniqueID;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity
{
	float IncomingPhysicsDrag;
	float3 IncomingPhysicsForce;
	float3 Position;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_AddVelocityFromPoint
{
	float NormalizedFalloff;
};

struct FParamMap0_OUTPUT_VAR
{
	FParamMap0_OUTPUT_VAR_AddVelocityFromPoint AddVelocityFromPoint;
	FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity SolveForcesAndVelocity;
};

struct FParamMap0_Local_SolveForcesAndVelocity
{
	float DeltaTime;
	float Mass;
	float3 PhysicsForce;
};

struct FParamMap0_Local_CurlNoiseForce
{
	float AgeAdvancement;
	float DeterministicOffset;
	float Falloff;
	float3 SampledNoise;
	float3 SamplePosition;
};

struct FParamMap0_Local
{
	FParamMap0_Local_CurlNoiseForce CurlNoiseForce;
	FParamMap0_Local_SolveForcesAndVelocity SolveForcesAndVelocity;
};

struct FParamMap0_FloatFromCurve002
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve001
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_Engine_System
{
	float Age;
	int NumEmitters;
	int NumEmittersAlive;
	int TickCount;
};

struct FParamMap0_Engine_Owner
{
	int ExecutionState;
	float LODDistance;
	float LODDistanceFraction;
	float3 Position;
	float4 Rotation;
	float3 Scale;
	float4x4 SystemLocalToWorld;
	float4x4 SystemLocalToWorldNoScale;
	float4x4 SystemLocalToWorldTransposed;
	float4x4 SystemWorldToLocal;
	float4x4 SystemWorldToLocalNoScale;
	float4x4 SystemWorldToLocalTransposed;
	float3 SystemXAxis;
	float3 SystemYAxis;
	float3 SystemZAxis;
	float TimeSinceRendered;
	float3 Velocity;
};

struct FParamMap0_Engine_Emitter
{
	int NumParticles;
	int PaddingInt32_0;
	int PaddingInt32_1;
	int PaddingInt32_2;
	float SpawnCountScale;
	int TotalSpawnedParticles;
};

struct FParamMap0_Engine
{
	float DeltaTime;
	FParamMap0_Engine_Emitter Emitter;
	float InverseDeltaTime;
	FParamMap0_Engine_Owner Owner;
	float RealTime;
	FParamMap0_Engine_System System;
	float Time;
};

struct FParamMap0_Emitter
{
	float Age;
	float AlphaScale;
	bool LocalSpace;
	int RandomSeed;
};

struct FParamMap0_Drag
{
	float Drag;
	float RotationalDrag;
};

struct FParamMap0_CurlNoiseForce
{
	float CurlNoiseConeMaskAngle;
	float3 CurlNoiseConeMaskAxis;
	float CurlNoiseConeMaskFalloffAngle;
	float NoiseFrequency;
	float NoiseStrength;
	float3 PanNoiseField;
	int RandomSeed;
	float3 SamplePosition;
};

struct FParamMap0_Constants_Emitter_UniformRangedVector
{
	float3 Maximum;
	float3 Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float SpeedLimit;
};

struct FParamMap0_Constants_Emitter_ScaleColor
{
	float3 ScaleRGB;
};

struct FParamMap0_Constants_Emitter_FloatFromCurve002
{
	float ScaleCurve;
};

struct FParamMap0_Constants_Emitter_FloatFromCurve001
{
	float ScaleCurve;
};

struct FParamMap0_Constants_Emitter_FloatFromCurve
{
	float ScaleCurve;
};

struct FParamMap0_Constants_Emitter_Drag
{
	float RotationalDrag;
};

struct FParamMap0_Constants_Emitter_CurlNoiseForce
{
	float CurlNoiseConeMaskAngle;
	float CurlNoiseConeMaskFalloffAngle;
	float NoiseFrequency;
	float3 PanNoiseField;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_Color
{
	float ScaleAlpha;
	float3 ScaleColor;
};

struct FParamMap0_Constants_Emitter_AddVelocityFromPoint
{
	float3 OriginOffset;
	float VelocityFalloffDistance;
	float VelocityStrength;
};

struct FParamMap0_Constants_Emitter_AddVelocity
{
	float3 ScaleAddedVelocity;
};

struct FParamMap0_Constants_Emitter
{
	FParamMap0_Constants_Emitter_AddVelocity AddVelocity;
	FParamMap0_Constants_Emitter_AddVelocityFromPoint AddVelocityFromPoint;
	FParamMap0_Constants_Emitter_Color Color;
	FParamMap0_Constants_Emitter_CurlNoiseForce CurlNoiseForce;
	FParamMap0_Constants_Emitter_Drag Drag;
	FParamMap0_Constants_Emitter_FloatFromCurve FloatFromCurve;
	FParamMap0_Constants_Emitter_FloatFromCurve001 FloatFromCurve001;
	FParamMap0_Constants_Emitter_FloatFromCurve002 FloatFromCurve002;
	FParamMap0_Constants_Emitter_ScaleColor ScaleColor;
	FParamMap0_Constants_Emitter_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Constants_Emitter_UniformRangedVector UniformRangedVector;
};

struct FParamMap0_Constants
{
	FParamMap0_Constants_Emitter Emitter;
};

struct FParamMap0_ColorFromCurve
{
	float CurveIndex;
};

struct FParamMap0_Color
{
	float4 Color;
	float ScaleAlpha;
	float3 ScaleColor;
};

struct FParamMap0_AddVelocityFromPoint
{
	float3 DefaultPosition;
	bool InvertVelocityFalloff;
	float3 OriginOffset;
	int OriginOffsetCoordinateSpace;
	bool UseFalloffDistance;
	float VelocityFalloffDistance;
	float3 VelocityOrigin;
	float VelocityStrength;
};

struct FParamMap0_AddVelocity
{
	int CoordinateSpace;
	float3 ScaleAddedVelocity;
	float3 Velocity;
};

struct FParamMap0
{
	FParamMap0_AddVelocity AddVelocity;
	FParamMap0_AddVelocityFromPoint AddVelocityFromPoint;
	FParamMap0_Color Color;
	FParamMap0_ColorFromCurve ColorFromCurve;
	FParamMap0_Constants Constants;
	FParamMap0_CurlNoiseForce CurlNoiseForce;
	FParamMap0_Drag Drag;
	FParamMap0_Emitter Emitter;
	FParamMap0_Engine Engine;
	FParamMap0_FloatFromCurve FloatFromCurve;
	FParamMap0_FloatFromCurve001 FloatFromCurve001;
	FParamMap0_FloatFromCurve002 FloatFromCurve002;
	FParamMap0_Local Local;
	FParamMap0_OUTPUT_VAR OUTPUT_VAR;
	FParamMap0_Particles Particles;
	FParamMap0_ScaleColor ScaleColor;
	FParamMap0_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Transient Transient;
	FParamMap0_UniformRangedVector UniformRangedVector;
};

struct FSimulationContext
{
	FParamMap0 Map;
};

static float HackSpawnInterp = 1.0;
void SampleCurve_EmitterDragFloatCurve(float In_X, out float Out_Value);
void FloatFromCurve002_Emitter_Func_(out float Out_Value, inout FSimulationContext Context);
void Drag_Emitter_Func_(inout FSimulationContext Context);
void SampleCurve_EmitterNoiseStrengthFloatCurve(float In_X, out float Out_Value);
void FloatFromCurve001_Emitter_Func_(out float Out_Value, inout FSimulationContext Context);
void SampleField_EmitterVectorField32(float3 In_SamplePoint, out float3 Out_SampledValue);
void CurlNoiseForce_Emitter_Func_(int In_Emitter_RandomSeed, inout FSimulationContext Context);
void GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float3 In_Min, float3 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float3 Out_Result, inout FSimulationContext Context);
void UniformRangedVector_Emitter_Func_(out float3 Out_UniformRangedVector, inout FSimulationContext Context);
void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context);
void AddVelocity_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void AddVelocity_Emitter_Func_(inout FSimulationContext Context);
void AddVelocityFromPoint_SimulationPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context);
void AddVelocityFromPoint_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float2 In_Min, float2 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float2 Out_Result, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context);
void RandomUnitVector_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float3 Out_UnitVector3D, out float2 Out_UnitVector2D, inout FSimulationContext Context);
void RandomVector_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float3 Out_Vector, inout FSimulationContext Context);
void DirectionAndLengthSafe_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, float In_FallbackLength, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context);
void NormalizeDistanceRange_Func_(float3 In_StartPosition, float3 In_EndPosition, float In_Distance, float3 In_FallbackVector, out float Out_NormalizedRange, out float Out_InverseNormalizedRange, out float3 Out_NormalizedVectorBetweenPositions, out bool Out_WithinRange, inout FSimulationContext Context);
void DistanceBasedFalloff_Func_(float3 In_StartPosition, float3 In_EndPosition, float In_Distance, bool In_InvertFalloff, float In_FalloffScale, float3 In_FallbackVector, out float Out_Falloff, out float3 Out_NormalizedVectorBetweenPositions, out float Out_NormalizedDistanceRange, out bool Out_PositionIsWithinRange, inout FSimulationContext Context);
void AddVelocityFromPoint_Emitter_Func_(inout FSimulationContext Context);
void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context);
void SampleCurve_EmitterScaleAlphaFloatCurve(float In_X, out float Out_Value);
void FloatFromCurve_Emitter_Func_(out float Out_Value, inout FSimulationContext Context);
void ScaleColor_Emitter_Func_(inout FSimulationContext Context);
void SampleColorCurve_EmitterColorColorCurve(float In_X, out float4 Out_Value);
void ColorFromCurve_Emitter_Func_(out float4 Out_Value, inout FSimulationContext Context);
void Color_Emitter_Func_(inout FSimulationContext Context);
float GetSpawnInterpolation();
void FloatFromCurve002_Emitter_Func_(out float Out_Value, inout FSimulationContext Context)
{
	float SampleCurve_EmitterDragFloatCurveOutput_Value;
	SampleCurve_EmitterDragFloatCurve(Context.Map.FloatFromCurve002.CurveIndex, SampleCurve_EmitterDragFloatCurveOutput_Value);
	float Result = SampleCurve_EmitterDragFloatCurveOutput_Value * Context.Map.Constants.Emitter.FloatFromCurve002.ScaleCurve;
	Out_Value = Result;
}

void Drag_Emitter_Func_(inout FSimulationContext Context)
{
	float Result1 = Context.Map.Drag.Drag + Context.Map.Transient.PhysicsDrag;
	Context.Map.Transient.PhysicsDrag = Result1;
	Context.Map.Transient.PhysicsRotationalDrag = Context.Map.Transient.PhysicsRotationalDrag;
}

void FloatFromCurve001_Emitter_Func_(out float Out_Value, inout FSimulationContext Context)
{
	float SampleCurve_EmitterNoiseStrengthFloatCurveOutput_Value;
	SampleCurve_EmitterNoiseStrengthFloatCurve(Context.Map.FloatFromCurve001.CurveIndex, SampleCurve_EmitterNoiseStrengthFloatCurveOutput_Value);
	float Result2 = SampleCurve_EmitterNoiseStrengthFloatCurveOutput_Value * Context.Map.Constants.Emitter.FloatFromCurve001.ScaleCurve;
	Out_Value = Result2;
}

void CurlNoiseForce_Emitter_Func_(int In_Emitter_RandomSeed, inout FSimulationContext Context)
{
	bool Constant11 = false;
	float AgeAdvancement_IfResult;
	if(Constant11)
	{
	AgeAdvancement_IfResult = Context.Map.Emitter.Age;
	}
	else
	{
	AgeAdvancement_IfResult = Context.Map.Engine.Time;
	}
	float Constant12 = 4096;
	int Constant13 = 0;
	float Result3 = rand_float(Constant12, Context.Map.Constants.Emitter.CurlNoiseForce.RandomSeed, Context.Map.Emitter.RandomSeed, Constant13);
	Context.Map.Local.CurlNoiseForce.AgeAdvancement = AgeAdvancement_IfResult;
	Context.Map.Local.CurlNoiseForce.DeterministicOffset = Result3;
	Context.Map.Local.CurlNoiseForce.SamplePosition = Context.Map.CurlNoiseForce.SamplePosition;
	float3 Result4 = Context.Map.Local.CurlNoiseForce.DeterministicOffset + Context.Map.Local.CurlNoiseForce.SamplePosition;
	float3 Result5 = Result4 * Context.Map.Constants.Emitter.CurlNoiseForce.NoiseFrequency;
	float Constant14 = 125;
	float3 Result6 = Result5 * Constant14;
	float3 SampleField_EmitterVectorField32Output_SampledValue;
	SampleField_EmitterVectorField32(Result6, SampleField_EmitterVectorField32Output_SampledValue);
	Context.Map.Local.CurlNoiseForce.SampledNoise = SampleField_EmitterVectorField32Output_SampledValue;
	float Constant15 = 1;
	Context.Map.Local.CurlNoiseForce.Falloff = Constant15;
	Context.Map.CurlNoiseForce.CurlNoiseConeMaskAngle = Context.Map.Constants.Emitter.CurlNoiseForce.CurlNoiseConeMaskAngle;
	Context.Map.CurlNoiseForce.CurlNoiseConeMaskFalloffAngle = Context.Map.Constants.Emitter.CurlNoiseForce.CurlNoiseConeMaskFalloffAngle;
	Context.Map.CurlNoiseForce.CurlNoiseConeMaskAxis = Context.Map.CurlNoiseForce.CurlNoiseConeMaskAxis;
	float3 Result7 = Context.Map.Local.CurlNoiseForce.SampledNoise * Context.Map.CurlNoiseForce.NoiseStrength;
	float3 Result8 = Context.Map.Transient.PhysicsForce + Result7;
	Context.Map.Transient.PhysicsForce = Result8;
}

void GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context)
{
	bool Constant26 = false;
	int Constant27 = 0;
	bool Result9 = NiagaraAll(In_RandomnessMode == Constant27);
	bool Result10 = Constant26 && Result9;
	int Constant28 = 1;
	bool Result11 = NiagaraAll(In_RandomnessMode == Constant28);
	bool Result12 = Result10 || Result11;
	int Seed_IfResult;
	if(In_OverrideSeed)
	{
	Seed_IfResult = In_Seed;
	}
	else
	{
	Seed_IfResult = Context.Map.Emitter.RandomSeed;
	}
	int Constant29 = 0;
	int Constant30 = 0;
	int Seed1_IfResult;
	int Seed2_IfResult;
	int Seed3_IfResult;
	if(In_FixedOverrideSeed)
	{
	Seed1_IfResult = Seed_IfResult;
	Seed2_IfResult = Constant29;
	Seed3_IfResult = Constant30;
	}
	else
	{
	Seed1_IfResult = Context.Map.Particles.UniqueID;
	Seed2_IfResult = Context.Map.Engine.System.TickCount;
	Seed3_IfResult = Seed_IfResult;
	}
	int Constant31 = -1;
	int Constant32 = -1;
	int Constant33 = -1;
	int Seed1_IfResult1;
	int Seed2_IfResult1;
	int Seed3_IfResult1;
	if(Result12)
	{
	Seed1_IfResult1 = Seed1_IfResult;
	Seed2_IfResult1 = Seed2_IfResult;
	Seed3_IfResult1 = Seed3_IfResult;
	}
	else
	{
	Seed1_IfResult1 = Constant31;
	Seed2_IfResult1 = Constant32;
	Seed3_IfResult1 = Constant33;
	}
	NiagaraRandInfo Output1;
	Output1.Seed1 = Seed1_IfResult1;
	Output1.Seed2 = Seed2_IfResult1;
	Output1.Seed3 = Seed3_IfResult1;
	Out_RandomInfo = Output1;
	Out_UseDeterministicRandoms = Result12;
}

void RandomRangeFloat_Func_(float3 In_Min, float3 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float3 Out_Result, inout FSimulationContext Context)
{
	int Constant22 = (0);
	bool Constant23 = false;
	int Constant24 = 0;
	int Constant25 = (0);
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo;
	bool GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms;
	GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_(In_Seed, Constant22, In_OverrideSeed, Constant24, Constant25, In_FixedOverrideSeed, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo, GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms, Context);
	float3 Result13 = In_Max - In_Min;
	int Seed1;
	int Seed2;
	int Seed3;
	Seed1 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo.Seed1;
	Seed2 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo.Seed2;
	Seed3 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo.Seed3;
	float3 Result14 = rand_float(Result13, Seed1, Seed2, Seed3);
	float3 Result15 = rand_float(Result13);
	float3 Random_IfResult;
	if(GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms)
	{
	Random_IfResult = Result14;
	}
	else
	{
	Random_IfResult = Result15;
	}
	float3 Result16 = In_Min + Random_IfResult;
	Out_Result = Result16;
}

void UniformRangedVector_Emitter_Func_(out float3 Out_UniformRangedVector, inout FSimulationContext Context)
{
	int Constant20 = 0;
	bool Constant21 = false;
	int Mode_IfResult;
	bool Override_IfResult;
	if(Context.Map.UniformRangedVector.OverrideRandomness)
	{
	Mode_IfResult = Context.Map.UniformRangedVector.RandomnessMode;
	Override_IfResult = Context.Map.UniformRangedVector.OverrideSeed;
	}
	else
	{
	Mode_IfResult = Constant20;
	Override_IfResult = Constant21;
	}
	float3 RandomRangeFloat_Func_Output_Result;
	RandomRangeFloat_Func_(Context.Map.Constants.Emitter.UniformRangedVector.Minimum, Context.Map.Constants.Emitter.UniformRangedVector.Maximum, Context.Map.Constants.Emitter.UniformRangedVector.RandomSeed, Mode_IfResult, Override_IfResult, Context.Map.UniformRangedVector.FixedRandomSeed, RandomRangeFloat_Func_Output_Result, Context);
	Out_UniformRangedVector = RandomRangeFloat_Func_Output_Result;
}

void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context)
{
	int Constant38 = 0;
	bool Result18 = NiagaraAll(In_SourceSpace == Constant38);
	int Constant39 = 0;
	bool Result19 = NiagaraAll(In_DestinationSpace == Constant39);
	bool Result20 = Result18 && Result19;
	int Constant40 = 1;
	bool Result21 = NiagaraAll(In_SourceSpace == Constant40);
	int Constant41 = 1;
	bool Result22 = NiagaraAll(In_DestinationSpace == Constant41);
	bool Result23 = Result21 && Result22;
	bool Result24 = Result20 || Result23;
	int Constant42 = 2;
	bool Result25 = NiagaraAll(In_SourceSpace == Constant42);
	int Constant43 = 2;
	bool Result26 = NiagaraAll(In_DestinationSpace == Constant43);
	bool Result27 = Result25 && Result26;
	bool Result28 = Result24 || Result27;
	bool Result29 = Result18 && Result26;
	bool Result30 = Result25 && Result19;
	bool Result31 = Result29 || Result30;
	bool Result32 = In_bLocalSpace && Result31;
	bool Result33 = Result28 || Result32;
	bool Result34 = !In_bLocalSpace;
	bool Result35 = Result18 && Result22;
	bool Result36 = Result21 && Result19;
	bool Result37 = Result35 || Result36;
	bool Result38 = Result34 && Result37;
	bool Result39 = Result33 || Result38;
	bool Result40 = In_bLocalSpace && Result35;
	bool Result41 = Result25 && Result22;
	bool Result42 = Result40 || Result41;
	bool Result43 = Result34 && Result30;
	bool Result44 = Result42 || Result43;
	float4x4 Matrix_IfResult1;
	if(Result44)
	{
	Matrix_IfResult1 = In_LocalToWorldTransform;
	}
	else
	{
	Matrix_IfResult1 = In_WorldToLocalTransform;
	}
	Out_bUseOriginal = Result39;
	Out_OutTransform = Matrix_IfResult1;
}

void AddVelocity_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant37 = false;
	float4x4 Matrix_IfResult;
	float4x4 Matrix001_IfResult;
	if(In_ApplyScale)
	{
	Matrix_IfResult = Context.Map.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult = Context.Map.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult = Context.Map.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult = Context.Map.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal;
	float4x4 TransformBase_Func_Output_OutTransform;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult, Matrix001_IfResult, Constant37, TransformBase_Func_Output_bUseOriginal, TransformBase_Func_Output_OutTransform, Context);
	float3 Result45 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform).xyz;
	float3 Vector_IfResult;
	if(TransformBase_Func_Output_bUseOriginal)
	{
	Vector_IfResult = In_InVector;
	}
	else
	{
	Vector_IfResult = Result45;
	}
	Out_OutVector = Vector_IfResult;
}

void AddVelocity_Emitter_Func_(inout FSimulationContext Context)
{
	float3 Result17 = Context.Map.AddVelocity.Velocity * Context.Map.Constants.Emitter.AddVelocity.ScaleAddedVelocity;
	int Constant35 = 0;
	bool Constant36 = false;
	float3 AddVelocity_TransformVector_Emitter_Func_Output_OutVector;
	AddVelocity_TransformVector_Emitter_Func_(Result17, Context.Map.AddVelocity.CoordinateSpace, Constant35, Constant36, AddVelocity_TransformVector_Emitter_Func_Output_OutVector, Context);
	float3 Result46 = AddVelocity_TransformVector_Emitter_Func_Output_OutVector + Context.Map.Particles.Velocity;
	Context.Map.Particles.Velocity = Result46;
}

void AddVelocityFromPoint_SimulationPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant45 = false;
	float3 Constant46 = float3(0,0,0);
	float3 Vector_IfResult1;
	if(Constant45)
	{
	Vector_IfResult1 = Constant46;
	}
	else
	{
	Vector_IfResult1 = Context.Map.Engine.Owner.Position;
	}
	Out_OutPosition = Vector_IfResult1;
}

void AddVelocityFromPoint_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant51 = false;
	float4x4 Matrix_IfResult2;
	float4x4 Matrix001_IfResult1;
	if(In_ApplyScale)
	{
	Matrix_IfResult2 = Context.Map.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult1 = Context.Map.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult2 = Context.Map.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult1 = Context.Map.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal1;
	float4x4 TransformBase_Func_Output_OutTransform1;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult2, Matrix001_IfResult1, Constant51, TransformBase_Func_Output_bUseOriginal1, TransformBase_Func_Output_OutTransform1, Context);
	float3 Result47 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform1).xyz;
	float3 Vector_IfResult2;
	if(TransformBase_Func_Output_bUseOriginal1)
	{
	Vector_IfResult2 = In_InVector;
	}
	else
	{
	Vector_IfResult2 = Result47;
	}
	Out_OutVector = Vector_IfResult2;
}

void RandomRangeFloat_Func_(float2 In_Min, float2 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float2 Out_Result, inout FSimulationContext Context)
{
	int Constant58 = (0);
	bool Constant59 = false;
	int Constant60 = 0;
	int Constant61 = (0);
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo1;
	bool GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms1;
	GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_(In_Seed, Constant58, In_OverrideSeed, Constant60, Constant61, In_FixedOverrideSeed, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo1, GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms1, Context);
	float2 Result49 = In_Max - In_Min;
	int Seed11;
	int Seed21;
	int Seed31;
	Seed11 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo1.Seed1;
	Seed21 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo1.Seed2;
	Seed31 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo1.Seed3;
	float2 Result50 = rand_float(Result49, Seed11, Seed21, Seed31);
	float2 Result51 = rand_float(Result49);
	float2 Random_IfResult1;
	if(GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms1)
	{
	Random_IfResult1 = Result50;
	}
	else
	{
	Random_IfResult1 = Result51;
	}
	float2 Result52 = In_Min + Random_IfResult1;
	Out_Result = Result52;
}

void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context)
{
	int Constant67 = (0);
	bool Constant68 = false;
	int Constant69 = 0;
	int Constant70 = (0);
	bool Constant71 = false;
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo2;
	bool GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms2;
	GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_(In_Seed, Constant67, In_OverrideSeed, Constant69, Constant70, Constant71, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo2, GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms2, Context);
	float Result60 = In_Max - In_Min;
	int Seed12;
	int Seed22;
	int Seed32;
	Seed12 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo2.Seed1;
	Seed22 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo2.Seed2;
	Seed32 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo2.Seed3;
	float Result61 = rand_float(Result60, Seed12, Seed22, Seed32);
	float Result62 = rand_float(Result60);
	float Random_IfResult2;
	if(GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms2)
	{
	Random_IfResult2 = Result61;
	}
	else
	{
	Random_IfResult2 = Result62;
	}
	float Result63 = In_Min + Random_IfResult2;
	Out_Result = Result63;
}

void RandomUnitVector_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float3 Out_UnitVector3D, out float2 Out_UnitVector2D, inout FSimulationContext Context)
{
	float2 Constant55 = float2(0,-1);
	float2 Constant56 = float2(6.28319,1);
	bool Constant57 = false;
	float2 RandomRangeFloat_Func_Output_Result1;
	RandomRangeFloat_Func_(Constant55, Constant56, In_Seed, In_RandomnessMode, In_OverrideSeed, Constant57, RandomRangeFloat_Func_Output_Result1, Context);
	float Phi;
	float CosASC40ThetaASC41;
	Phi = RandomRangeFloat_Func_Output_Result1.x;
	CosASC40ThetaASC41 = RandomRangeFloat_Func_Output_Result1.y;
	float Result53 = cos(Phi);
	float Result54 = CosASC40ThetaASC41 * CosASC40ThetaASC41;
	float Result55 = 1 - Result54;
	float Result56 = sqrt(Result55);
	float Result57 = Result53 * Result56;
	float Result58 = sin(Phi);
	float Result59 = Result58 * Result56;
	float3 PositionOnSphere;
	PositionOnSphere.x = Result57;
	PositionOnSphere.y = Result59;
	PositionOnSphere.z = CosASC40ThetaASC41;
	float Constant62 = 0;
	float Constant63 = 6.28319;
	int Constant64 = -1;
	int Constant65 = 0;
	bool Constant66 = false;
	float RandomRangeFloat_Func_Output_Result2;
	RandomRangeFloat_Func_(Constant62, Constant63, Constant64, Constant65, Constant66, RandomRangeFloat_Func_Output_Result2, Context);
	float Result64 = cos(RandomRangeFloat_Func_Output_Result2);
	float Result65 = sin(RandomRangeFloat_Func_Output_Result2);
	float2 PositionOnCircle;
	PositionOnCircle.x = Result64;
	PositionOnCircle.y = Result65;
	Out_UnitVector3D = PositionOnSphere;
	Out_UnitVector2D = PositionOnCircle;
}

void RandomVector_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float3 Out_Vector, inout FSimulationContext Context)
{
	float3 RandomUnitVector_Func_Output_UnitVector3D;
	float2 RandomUnitVector_Func_Output_UnitVector2D;
	RandomUnitVector_Func_(In_Seed, In_RandomnessMode, In_OverrideSeed, RandomUnitVector_Func_Output_UnitVector3D, RandomUnitVector_Func_Output_UnitVector2D, Context);
	Out_Vector = RandomUnitVector_Func_Output_UnitVector3D;
}

void DirectionAndLengthSafe_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, float In_FallbackLength, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context)
{
	float Result67 = length(In_V);
	bool Result68 = NiagaraAll(Result67 < In_Threshold);
	float Result69 = length(In_Fallback);
	float3 Vector_IfResult3;
	float float_IfResult;
	if(Result68)
	{
	Vector_IfResult3 = In_Fallback;
	float_IfResult = In_FallbackLength;
	}
	else
	{
	Vector_IfResult3 = In_V;
	float_IfResult = Result67;
	}
	float3 Result70 = Vector_IfResult3 / float_IfResult;
	float3 Vector_IfResult4;
	float float_IfResult1;
	if(Result68)
	{
	Vector_IfResult4 = In_Fallback;
	float_IfResult1 = Result69;
	}
	else
	{
	Vector_IfResult4 = Result70;
	float_IfResult1 = float_IfResult;
	}
	Out_Direction = Vector_IfResult4;
	Out_Length = float_IfResult1;
	Out_BelowThreshold = Result68;
}

void NormalizeDistanceRange_Func_(float3 In_StartPosition, float3 In_EndPosition, float In_Distance, float3 In_FallbackVector, out float Out_NormalizedRange, out float Out_InverseNormalizedRange, out float3 Out_NormalizedVectorBetweenPositions, out bool Out_WithinRange, inout FSimulationContext Context)
{
	float3 Result66 = In_StartPosition - In_EndPosition;
	float Constant72 = 1e-05;
	float Constant73 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction;
	float DirectionAndLengthSafe_Func_Output_Length;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold;
	DirectionAndLengthSafe_Func_(Result66, In_FallbackVector, Constant72, Constant73, DirectionAndLengthSafe_Func_Output_Direction, DirectionAndLengthSafe_Func_Output_Length, DirectionAndLengthSafe_Func_Output_BelowThreshold, Context);
	float Constant74 = 0;
	float float_IfResult2;
	if(DirectionAndLengthSafe_Func_Output_BelowThreshold)
	{
	float_IfResult2 = Constant74;
	}
	else
	{
	float_IfResult2 = DirectionAndLengthSafe_Func_Output_Length;
	}
	float Result71 = min(float_IfResult2, In_Distance);
	float Constant75 = 0.0001;
	float Result72 = max(In_Distance, Constant75);
	float Result73 = Result71 / Result72;
	float Result74 = 1 - Result73;
	bool Result75 = NiagaraAll(float_IfResult2 <= In_Distance);
	Out_NormalizedRange = Result73;
	Out_InverseNormalizedRange = Result74;
	Out_NormalizedVectorBetweenPositions = DirectionAndLengthSafe_Func_Output_Direction;
	Out_WithinRange = Result75;
}

void DistanceBasedFalloff_Func_(float3 In_StartPosition, float3 In_EndPosition, float In_Distance, bool In_InvertFalloff, float In_FalloffScale, float3 In_FallbackVector, out float Out_Falloff, out float3 Out_NormalizedVectorBetweenPositions, out float Out_NormalizedDistanceRange, out bool Out_PositionIsWithinRange, inout FSimulationContext Context)
{
	float NormalizeDistanceRange_Func_Output_NormalizedRange;
	float NormalizeDistanceRange_Func_Output_InverseNormalizedRange;
	float3 NormalizeDistanceRange_Func_Output_NormalizedVectorBetweenPositions;
	bool NormalizeDistanceRange_Func_Output_WithinRange;
	NormalizeDistanceRange_Func_(In_StartPosition, In_EndPosition, In_Distance, In_FallbackVector, NormalizeDistanceRange_Func_Output_NormalizedRange, NormalizeDistanceRange_Func_Output_InverseNormalizedRange, NormalizeDistanceRange_Func_Output_NormalizedVectorBetweenPositions, NormalizeDistanceRange_Func_Output_WithinRange, Context);
	float float_IfResult3;
	if(In_InvertFalloff)
	{
	float_IfResult3 = NormalizeDistanceRange_Func_Output_InverseNormalizedRange;
	}
	else
	{
	float_IfResult3 = NormalizeDistanceRange_Func_Output_NormalizedRange;
	}
	float Result76 = float_IfResult3 * In_FalloffScale;
	Out_Falloff = Result76;
	Out_NormalizedVectorBetweenPositions = NormalizeDistanceRange_Func_Output_NormalizedVectorBetweenPositions;
	Out_NormalizedDistanceRange = float_IfResult3;
	Out_PositionIsWithinRange = NormalizeDistanceRange_Func_Output_WithinRange;
}

void AddVelocityFromPoint_Emitter_Func_(inout FSimulationContext Context)
{
	int Constant49 = 0;
	bool Constant50 = false;
	float3 AddVelocityFromPoint_NF_TransformVector_Emitter_Func_Output_OutVector;
	AddVelocityFromPoint_NF_TransformVector_Emitter_Func_(Context.Map.Constants.Emitter.AddVelocityFromPoint.OriginOffset, Context.Map.AddVelocityFromPoint.OriginOffsetCoordinateSpace, Constant49, Constant50, AddVelocityFromPoint_NF_TransformVector_Emitter_Func_Output_OutVector, Context);
	float3 Result48 = AddVelocityFromPoint_NF_TransformVector_Emitter_Func_Output_OutVector + Context.Map.AddVelocityFromPoint.VelocityOrigin;
	int Constant52 = -1;
	int Constant53 = 0;
	bool Constant54 = false;
	float3 RandomVector_Func_Output_Vector;
	RandomVector_Func_(Constant52, Constant53, Constant54, RandomVector_Func_Output_Vector, Context);
	float DistanceBasedFalloff_Func_Output_Falloff;
	float3 DistanceBasedFalloff_Func_Output_NormalizedVectorBetweenPositions;
	float DistanceBasedFalloff_Func_Output_NormalizedDistanceRange;
	bool DistanceBasedFalloff_Func_Output_PositionIsWithinRange;
	DistanceBasedFalloff_Func_(Context.Map.AddVelocityFromPoint.DefaultPosition, Result48, Context.Map.Constants.Emitter.AddVelocityFromPoint.VelocityFalloffDistance, Context.Map.AddVelocityFromPoint.InvertVelocityFalloff, Context.Map.Constants.Emitter.AddVelocityFromPoint.VelocityStrength, RandomVector_Func_Output_Vector, DistanceBasedFalloff_Func_Output_Falloff, DistanceBasedFalloff_Func_Output_NormalizedVectorBetweenPositions, DistanceBasedFalloff_Func_Output_NormalizedDistanceRange, DistanceBasedFalloff_Func_Output_PositionIsWithinRange, Context);
	float float_IfResult4;
	if(Context.Map.AddVelocityFromPoint.UseFalloffDistance)
	{
	float_IfResult4 = DistanceBasedFalloff_Func_Output_Falloff;
	}
	else
	{
	float_IfResult4 = Context.Map.Constants.Emitter.AddVelocityFromPoint.VelocityStrength;
	}
	float3 Result77 = float_IfResult4 * DistanceBasedFalloff_Func_Output_NormalizedVectorBetweenPositions;
	float3 Result78 = Context.Map.Particles.Velocity + Result77;
	Context.Map.Particles.Velocity = Result78;
	Context.Map.OUTPUT_VAR.AddVelocityFromPoint.NormalizedFalloff = DistanceBasedFalloff_Func_Output_NormalizedDistanceRange;
}

void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context)
{
	Context.Map.Local.SolveForcesAndVelocity.DeltaTime = Context.Map.SolveForcesAndVelocity.DeltaTime;
	Context.Map.Local.SolveForcesAndVelocity.PhysicsForce = Context.Map.SolveForcesAndVelocity.Force;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsForce = Context.Map.SolveForcesAndVelocity.Force;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.Map.SolveForcesAndVelocity.Velocity;
	Context.Map.Local.SolveForcesAndVelocity.Mass = Context.Map.SolveForcesAndVelocity.Mass;
	float Constant82 = 0.0001;
	float Result79 = max(Context.Map.Local.SolveForcesAndVelocity.Mass, Constant82);
	float Result80 = Reciprocal(Result79);
	float3 Result81 = Result80 * Context.Map.Local.SolveForcesAndVelocity.PhysicsForce;
	Context.Map.Local.SolveForcesAndVelocity.PhysicsForce = Result81;
	float3 Result82 = Context.Map.Local.SolveForcesAndVelocity.PhysicsForce * Context.Map.Local.SolveForcesAndVelocity.DeltaTime + Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float Constant83 = 0;
	float Result83 = max(Context.Map.Transient.PhysicsDrag, Constant83);
	float Result84 = Context.Map.Local.SolveForcesAndVelocity.DeltaTime * Result83;
	float Constant84 = 1;
	float Result85 = Result84 + Constant84;
	float3 Result86 = Result82 / Result85;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Result86;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsDrag = Context.Map.Transient.PhysicsDrag;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float3 Result87 = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity * Context.Map.Local.SolveForcesAndVelocity.DeltaTime + Context.Map.SolveForcesAndVelocity.Position;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Position = Result87;
	float3 Position_IfResult;
	float3 Velocity_IfResult;
	float3 PreviousVelocity_IfResult;
	if(Context.Map.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	Position_IfResult = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Position;
	Velocity_IfResult = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	PreviousVelocity_IfResult = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	}
	else
	{
	Position_IfResult = Context.Map.SolveForcesAndVelocity.Position;
	Velocity_IfResult = Context.Map.SolveForcesAndVelocity.Velocity;
	PreviousVelocity_IfResult = Context.Map.SolveForcesAndVelocity.PreviousVelocity;
	}
	Context.Map.Particles.Position = Position_IfResult;
	Context.Map.Particles.Velocity = Velocity_IfResult;
	Context.Map.Particles.PreviousVelocity = PreviousVelocity_IfResult;
	float3 Constant85 = float3(0,0,0);
	float Constant86 = 0;
	float3 ForceVector_IfResult;
	float Drag_IfResult;
	if(Context.Map.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	ForceVector_IfResult = Constant85;
	Drag_IfResult = Constant86;
	}
	else
	{
	ForceVector_IfResult = Context.Map.Transient.PhysicsForce;
	Drag_IfResult = Context.Map.Transient.PhysicsDrag;
	}
	Context.Map.Transient.PhysicsForce = ForceVector_IfResult;
	Context.Map.Transient.PhysicsDrag = Drag_IfResult;
}

void FloatFromCurve_Emitter_Func_(out float Out_Value, inout FSimulationContext Context)
{
	float SampleCurve_EmitterScaleAlphaFloatCurveOutput_Value;
	SampleCurve_EmitterScaleAlphaFloatCurve(Context.Map.FloatFromCurve.CurveIndex, SampleCurve_EmitterScaleAlphaFloatCurveOutput_Value);
	float Result88 = SampleCurve_EmitterScaleAlphaFloatCurveOutput_Value * Context.Map.Constants.Emitter.FloatFromCurve.ScaleCurve;
	Out_Value = Result88;
}

void ScaleColor_Emitter_Func_(inout FSimulationContext Context)
{
	float4 Output0;
	Output0.r = Context.Map.Constants.Emitter.ScaleColor.ScaleRGB.x;
	Output0.g = Context.Map.Constants.Emitter.ScaleColor.ScaleRGB.y;
	Output0.b = Context.Map.Constants.Emitter.ScaleColor.ScaleRGB.z;
	Output0.a = Context.Map.ScaleColor.ScaleAlpha;
	float4 Result89 = Context.Map.Transient.ParticleColorScaleFactor * Output0;
	float4 Result90 = Context.Map.ScaleColor.ColorValueToScale * Result89;
	Context.Map.Particles.Color = Result90;
	Context.Map.Transient.ParticleColorScaleFactor = Result89;
}

void ColorFromCurve_Emitter_Func_(out float4 Out_Value, inout FSimulationContext Context)
{
	float4 SampleColorCurve_EmitterColorColorCurveOutput_Value;
	SampleColorCurve_EmitterColorColorCurve(Context.Map.ColorFromCurve.CurveIndex, SampleColorCurve_EmitterColorColorCurveOutput_Value);
	Out_Value = SampleColorCurve_EmitterColorColorCurveOutput_Value;
}

void Color_Emitter_Func_(inout FSimulationContext Context)
{
	float3 Output01;
	float Output2;
	Output01.x = Context.Map.Color.Color.r;
	Output01.y = Context.Map.Color.Color.g;
	Output01.z = Context.Map.Color.Color.b;
	Output2 = Context.Map.Color.Color.a;
	float3 Result91 = Output01 * Context.Map.Constants.Emitter.Color.ScaleColor;
	float Result92 = Output2 * Context.Map.Constants.Emitter.Color.ScaleAlpha;
	float Result93 = Result92 * Context.Map.Emitter.AlphaScale;
	float4 Output02;
	Output02.g = Result91.y;
	Output02.a = Result93;
	Output02.r = Result91.x;
	Output02.b = Result91.z;
	Context.Map.Particles.Color = Output02;
}

float GetSpawnInterpolation()
{
	return 1.0f;}


void ReadDataSets(inout FSimulationContext Context)
{
}

void WriteDataSets(inout FSimulationContext Context)
{
}

void Simulate(inout FSimulationContext Context)
{
	EnterStatScope(0 );


	Context.Map.FloatFromCurve002.CurveIndex = Context.Map.Particles.NormalizedAge;
	float FloatFromCurve002_Emitter_Func_Output_Value;
	FloatFromCurve002_Emitter_Func_(FloatFromCurve002_Emitter_Func_Output_Value, Context);
	Context.Map.Drag.Drag = FloatFromCurve002_Emitter_Func_Output_Value;
	float Constant = 0;
	Context.Map.Transient.PhysicsDrag = Constant;
	float Constant1 = 0;
	Context.Map.Transient.PhysicsRotationalDrag = Constant1;
	EnterStatScope(1 );
	Drag_Emitter_Func_(Context);
	ExitStatScope( );
	Context.Map.FloatFromCurve001.CurveIndex = Context.Map.Particles.NormalizedAge;
	float FloatFromCurve001_Emitter_Func_Output_Value;
	FloatFromCurve001_Emitter_Func_(FloatFromCurve001_Emitter_Func_Output_Value, Context);
	Context.Map.CurlNoiseForce.NoiseStrength = FloatFromCurve001_Emitter_Func_Output_Value;
	bool Constant2 = false;
	int Constant3 = (0);
	float Constant4 = (0.0);
	Context.Map.Local.CurlNoiseForce.AgeAdvancement = Constant4;
	float Constant5 = (0.0);
	Context.Map.Local.CurlNoiseForce.DeterministicOffset = Constant5;
	bool Constant6 = false;
	Context.Map.CurlNoiseForce.SamplePosition = Context.Map.Particles.Position;
	float3 Constant7 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.CurlNoiseForce.SamplePosition = Constant7;
	float3 Constant8 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.CurlNoiseForce.SampledNoise = Constant8;
	float Constant9 = 1;
	Context.Map.Local.CurlNoiseForce.Falloff = Constant9;
	Context.Map.CurlNoiseForce.CurlNoiseConeMaskAxis = Context.Map.Particles.Velocity;
	float3 Constant10 = float3(0,0,0);
	Context.Map.Transient.PhysicsForce = Constant10;
	EnterStatScope(2 );
	CurlNoiseForce_Emitter_Func_(Constant3, Context);
	ExitStatScope( );
	bool Constant16 = false;
	Context.Map.UniformRangedVector.OverrideRandomness = Constant16;
	int Constant17 = 0;
	Context.Map.UniformRangedVector.RandomnessMode = Constant17;
	bool Constant18 = false;
	Context.Map.UniformRangedVector.OverrideSeed = Constant18;
	bool Constant19 = false;
	Context.Map.UniformRangedVector.FixedRandomSeed = Constant19;
	float3 UniformRangedVector_Emitter_Func_Output_UniformRangedVector;
	UniformRangedVector_Emitter_Func_(UniformRangedVector_Emitter_Func_Output_UniformRangedVector, Context);
	Context.Map.AddVelocity.Velocity = UniformRangedVector_Emitter_Func_Output_UniformRangedVector;
	int Constant34 = 2;
	Context.Map.AddVelocity.CoordinateSpace = Constant34;
	EnterStatScope(3 );
	AddVelocity_Emitter_Func_(Context);
	ExitStatScope( );
	int Constant44 = 2;
	Context.Map.AddVelocityFromPoint.OriginOffsetCoordinateSpace = Constant44;
	float3 AddVelocityFromPoint_SimulationPosition_Emitter_Func_Output_OutPosition;
	AddVelocityFromPoint_SimulationPosition_Emitter_Func_(AddVelocityFromPoint_SimulationPosition_Emitter_Func_Output_OutPosition, Context);
	Context.Map.AddVelocityFromPoint.VelocityOrigin = AddVelocityFromPoint_SimulationPosition_Emitter_Func_Output_OutPosition;
	Context.Map.AddVelocityFromPoint.DefaultPosition = Context.Map.Particles.Position;
	bool Constant47 = true;
	Context.Map.AddVelocityFromPoint.InvertVelocityFalloff = Constant47;
	bool Constant48 = false;
	Context.Map.AddVelocityFromPoint.UseFalloffDistance = Constant48;
	EnterStatScope(4 );
	AddVelocityFromPoint_Emitter_Func_(Context);
	ExitStatScope( );
	Context.Map.Transient.PhysicsDeltaTime = Context.Map.Engine.DeltaTime;
	Context.Map.SolveForcesAndVelocity.DeltaTime = Context.Map.Transient.PhysicsDeltaTime;
	float Constant76 = (0.0);
	Context.Map.Local.SolveForcesAndVelocity.DeltaTime = Constant76;
	Context.Map.SolveForcesAndVelocity.Force = Context.Map.Transient.PhysicsForce;
	Context.Map.SolveForcesAndVelocity.Velocity = Context.Map.Particles.Velocity;
	Context.Map.SolveForcesAndVelocity.Mass = Context.Map.Particles.Mass;
	float3 Constant77 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.SolveForcesAndVelocity.PhysicsForce = Constant77;
	float3 Constant78 = float3(0.0, 0.0, 0.0);
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Constant78;
	float Constant79 = (0.0);
	Context.Map.Local.SolveForcesAndVelocity.Mass = Constant79;
	Context.Map.SolveForcesAndVelocity.PreviousVelocity = Context.Map.Particles.PreviousVelocity;
	Context.Map.SolveForcesAndVelocity.Position = Context.Map.Particles.Position;
	float3 Constant80 = float3(0.0, 0.0, 0.0);
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Position = Constant80;
	bool Constant81 = true;
	Context.Map.SolveForcesAndVelocity.WritetoIntrinsicProperties = Constant81;
	EnterStatScope(5 );
	SolveForcesAndVelocity_Emitter_Func_(Context);
	ExitStatScope( );
	Context.Map.FloatFromCurve.CurveIndex = Context.Map.Particles.NormalizedAge;
	float FloatFromCurve_Emitter_Func_Output_Value;
	FloatFromCurve_Emitter_Func_(FloatFromCurve_Emitter_Func_Output_Value, Context);
	Context.Map.ScaleColor.ScaleAlpha = FloatFromCurve_Emitter_Func_Output_Value;
	Context.Map.ScaleColor.ColorValueToScale = Context.Map.Particles.Initial.Color;
	float4 Constant87 = float4(1,1,1,1);
	Context.Map.Transient.ParticleColorScaleFactor = Constant87;
	EnterStatScope(6 );
	ScaleColor_Emitter_Func_(Context);
	ExitStatScope( );
	Context.Map.ColorFromCurve.CurveIndex = Context.Map.Particles.NormalizedAge;
	float4 ColorFromCurve_Emitter_Func_Output_Value;
	ColorFromCurve_Emitter_Func_(ColorFromCurve_Emitter_Func_Output_Value, Context);
	Context.Map.Color.Color = ColorFromCurve_Emitter_Func_Output_Value;
	EnterStatScope(7 );
	Color_Emitter_Func_(Context);
	ExitStatScope( );
	ExitStatScope( );
}
void SimulateMain()
{
EnterStatScope(8 );

	FSimulationContext Context = (FSimulationContext)0;
	Context.Map.Particles.Color.r = InputDataFloat(0, 0);
	Context.Map.Particles.Color.g = InputDataFloat(0, 1);
	Context.Map.Particles.Color.b = InputDataFloat(0, 2);
	Context.Map.Particles.Color.a = InputDataFloat(0, 3);
	Context.Map.Particles.Initial.Color.r = InputDataFloat(0, 4);
	Context.Map.Particles.Initial.Color.g = InputDataFloat(0, 5);
	Context.Map.Particles.Initial.Color.b = InputDataFloat(0, 6);
	Context.Map.Particles.Initial.Color.a = InputDataFloat(0, 7);
	Context.Map.Particles.Lifetime = InputDataFloat(0, 8);
	Context.Map.Particles.Mass = InputDataFloat(0, 9);
	Context.Map.Particles.MaterialRandom = InputDataFloat(0, 10);
	Context.Map.Particles.NormalizedAge = InputDataFloat(0, 11);
	Context.Map.Particles.Position.x = InputDataFloat(0, 12);
	Context.Map.Particles.Position.y = InputDataFloat(0, 13);
	Context.Map.Particles.Position.z = InputDataFloat(0, 14);
	Context.Map.Particles.PreviousVelocity.x = InputDataFloat(0, 15);
	Context.Map.Particles.PreviousVelocity.y = InputDataFloat(0, 16);
	Context.Map.Particles.PreviousVelocity.z = InputDataFloat(0, 17);
	Context.Map.Particles.Scale.x = InputDataFloat(0, 18);
	Context.Map.Particles.Scale.y = InputDataFloat(0, 19);
	Context.Map.Particles.Scale.z = InputDataFloat(0, 20);
	Context.Map.Particles.SpriteRotation = InputDataFloat(0, 21);
	Context.Map.Particles.SpriteSize.x = InputDataFloat(0, 22);
	Context.Map.Particles.SpriteSize.y = InputDataFloat(0, 23);
	Context.Map.Particles.UniqueID = InputDataInt(0, 24);
	Context.Map.Particles.Velocity.x = InputDataFloat(0, 25);
	Context.Map.Particles.Velocity.y = InputDataFloat(0, 26);
	Context.Map.Particles.Velocity.z = InputDataFloat(0, 27);
	Context.Map.Constants.Emitter.FloatFromCurve002.ScaleCurve = Constants_Emitter_FloatFromCurve002_ScaleCurve;
	Context.Map.Constants.Emitter.Drag.RotationalDrag = Constants_Emitter_Drag_RotationalDrag;
	Context.Map.Constants.Emitter.FloatFromCurve001.ScaleCurve = Constants_Emitter_FloatFromCurve001_ScaleCurve;
	Context.Map.Emitter.Age = Emitter_Age;
	Context.Map.Engine.Time = Engine_Time;
	Context.Map.Constants.Emitter.CurlNoiseForce.RandomSeed = Constants_Emitter_CurlNoiseForce_RandomSeed;
	Context.Map.Engine.Owner.Position = Engine_Owner_Position.xyz;
	Context.Map.Constants.Emitter.CurlNoiseForce.NoiseFrequency = Constants_Emitter_CurlNoiseForce_NoiseFrequency;
	Context.Map.Constants.Emitter.CurlNoiseForce.PanNoiseField = Constants_Emitter_CurlNoiseForce_PanNoiseField;
	Context.Map.Constants.Emitter.CurlNoiseForce.CurlNoiseConeMaskAngle = Constants_Emitter_CurlNoiseForce_CurlNoiseConeMaskAngle;
	Context.Map.Constants.Emitter.CurlNoiseForce.CurlNoiseConeMaskFalloffAngle = Constants_Emitter_CurlNoiseForce_CurlNoiseConeMaskFalloffAngle;
	Context.Map.Emitter.RandomSeed = Emitter_RandomSeed;
	Context.Map.Constants.Emitter.UniformRangedVector.Minimum = Constants_Emitter_UniformRangedVector_Minimum;
	Context.Map.Constants.Emitter.UniformRangedVector.Maximum = Constants_Emitter_UniformRangedVector_Maximum;
	Context.Map.Constants.Emitter.UniformRangedVector.RandomSeed = Constants_Emitter_UniformRangedVector_RandomSeed;
	Context.Map.Engine.System.TickCount = Engine_System_TickCount;
	Context.Map.Constants.Emitter.AddVelocity.ScaleAddedVelocity = Constants_Emitter_AddVelocity_ScaleAddedVelocity;
	Context.Map.Engine.Owner.SystemLocalToWorld = Engine_Owner_SystemLocalToWorld;
	Context.Map.Engine.Owner.SystemWorldToLocal = Engine_Owner_SystemWorldToLocal;
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale = Engine_Owner_SystemLocalToWorldNoScale;
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale = Engine_Owner_SystemWorldToLocalNoScale;
	Context.Map.Constants.Emitter.AddVelocityFromPoint.OriginOffset = Constants_Emitter_AddVelocityFromPoint_OriginOffset;
	Context.Map.Constants.Emitter.AddVelocityFromPoint.VelocityFalloffDistance = Constants_Emitter_AddVelocityFromPoint_VelocityFalloffDistance;
	Context.Map.Constants.Emitter.AddVelocityFromPoint.VelocityStrength = Constants_Emitter_AddVelocityFromPoint_VelocityStrength;
	Context.Map.Engine.DeltaTime = Engine_DeltaTime;
	Context.Map.Constants.Emitter.SolveForcesAndVelocity.SpeedLimit = Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	Context.Map.Constants.Emitter.SolveForcesAndVelocity.AccelerationLimit = Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	Context.Map.Constants.Emitter.FloatFromCurve.ScaleCurve = Constants_Emitter_FloatFromCurve_ScaleCurve;
	Context.Map.Constants.Emitter.ScaleColor.ScaleRGB = Constants_Emitter_ScaleColor_ScaleRGB;
	Context.Map.Constants.Emitter.Color.ScaleColor = Constants_Emitter_Color_ScaleColor;
	Context.Map.Constants.Emitter.Color.ScaleAlpha = Constants_Emitter_Color_ScaleAlpha;
	Context.Map.Emitter.AlphaScale = Emitter_AlphaScale;
	Context.Map.Engine.Emitter.TotalSpawnedParticles = Engine_Emitter_TotalSpawnedParticles;
	ReadDataSets(Context);
	Simulate(Context);
	WriteDataSets(Context);
	{
	int TmpWriteIndex = OutputIndex(0, false, true);
	OutputDataFloat(0, 0, TmpWriteIndex, Context.Map.Particles.Color.r);
	OutputDataFloat(0, 1, TmpWriteIndex, Context.Map.Particles.Color.g);
	OutputDataFloat(0, 2, TmpWriteIndex, Context.Map.Particles.Color.b);
	OutputDataFloat(0, 3, TmpWriteIndex, Context.Map.Particles.Color.a);
	OutputDataFloat(0, 4, TmpWriteIndex, Context.Map.Particles.Initial.Color.r);
	OutputDataFloat(0, 5, TmpWriteIndex, Context.Map.Particles.Initial.Color.g);
	OutputDataFloat(0, 6, TmpWriteIndex, Context.Map.Particles.Initial.Color.b);
	OutputDataFloat(0, 7, TmpWriteIndex, Context.Map.Particles.Initial.Color.a);
	OutputDataFloat(0, 8, TmpWriteIndex, Context.Map.Particles.Lifetime);
	OutputDataFloat(0, 9, TmpWriteIndex, Context.Map.Particles.Mass);
	OutputDataFloat(0, 10, TmpWriteIndex, Context.Map.Particles.MaterialRandom);
	OutputDataFloat(0, 11, TmpWriteIndex, Context.Map.Particles.NormalizedAge);
	OutputDataFloat(0, 12, TmpWriteIndex, Context.Map.Particles.Position.x);
	OutputDataFloat(0, 13, TmpWriteIndex, Context.Map.Particles.Position.y);
	OutputDataFloat(0, 14, TmpWriteIndex, Context.Map.Particles.Position.z);
	OutputDataFloat(0, 15, TmpWriteIndex, Context.Map.Particles.PreviousVelocity.x);
	OutputDataFloat(0, 16, TmpWriteIndex, Context.Map.Particles.PreviousVelocity.y);
	OutputDataFloat(0, 17, TmpWriteIndex, Context.Map.Particles.PreviousVelocity.z);
	OutputDataFloat(0, 18, TmpWriteIndex, Context.Map.Particles.Scale.x);
	OutputDataFloat(0, 19, TmpWriteIndex, Context.Map.Particles.Scale.y);
	OutputDataFloat(0, 20, TmpWriteIndex, Context.Map.Particles.Scale.z);
	OutputDataFloat(0, 21, TmpWriteIndex, Context.Map.Particles.SpriteRotation);
	OutputDataFloat(0, 22, TmpWriteIndex, Context.Map.Particles.SpriteSize.x);
	OutputDataFloat(0, 23, TmpWriteIndex, Context.Map.Particles.SpriteSize.y);
	OutputDataInt(0, 24, TmpWriteIndex, Context.Map.Particles.UniqueID);
	OutputDataFloat(0, 25, TmpWriteIndex, Context.Map.Particles.Velocity.x);
	OutputDataFloat(0, 26, TmpWriteIndex, Context.Map.Particles.Velocity.y);
	OutputDataFloat(0, 27, TmpWriteIndex, Context.Map.Particles.Velocity.z);
	}
ExitStatScope( );
}
#line 703 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"

#if 0 /*BEGIN_RESOURCE_TABLES*/
NULL, 0
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
